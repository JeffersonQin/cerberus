BOLD="\033[1m"
RED="\033[31m"
YELLOW="\033[33m"
RESET="\033[0m"

# Looking for Lem
ifdef LEM_PATH
  LEMDIR=$(LEM_PATH)
else
  LEMDIR=~/bitbucket/lem
endif

LEM := $(LEMDIR)/lem
LEM_FLAGS = -wl ign -wl_rename warn -wl_pat_red err -wl_pat_exh warn \
        -only_changed_output 

# Where HOL files will be created
HOL_DIR = ../hol/

# Where auxiliary scripts will be created (these are not compiled automatically)
AUX_DIR = ../hol/auxScripts/

# Where LEM files are located
CMM_DIR = ../concurrency/
MODEL_DIR =../model/
AIL_DIR = ../model/ail/

# Util
UTIL_DIR = util/
UTIL = utilScript.sml

# Patches
PATCH_DIR = patches/
PATCH = defacto_memoryScript.patch \
 memScript.patch

# Cerberus model files
CMM = \
 cmm_aux.lem \
 cmm_csem.lem

UTILS =\
 global.lem \
 enum.lem \
 loc.lem \
 state.lem \
 uniqueId.lem \
 undefined.lem \
 implementation_.lem \
 symbol.lem \
 symbolic.lem \
 thread.lem \
 dlist.lem

DEFACTO =\
 defacto_memory.lem \
 defacto_memory_types.lem \
 mem_common.lem \
 mem.lem

CABS = \
 cabs.lem

AIL = \
 AilTypes.lem

CORE = \
 core_ctype_aux.lem \
 core_ctype.lem \
 core.lem


MODEL := $(UTILS) $(CABS) $(CORE) $(DEFACTO)
SOURCE := $(MODEL) $(AIL) $(CMM)

HOL_SCRIPTS := $(addsuffix Script.sml, $(basename $(SOURCE))))

# Create the directory where HOL files will be generated
$(HOL_DIR):
	@echo $(BOLD)CREATING the HOL build directory$(RESET)
	@mkdir $(HOL_DIR)

# Copy the mem concurrency files to the build dir
$(CMM): $(addprefix $(CMM_DIR), $(CMM)) | $(HOL_DIR)
	@echo $(BOLD)COPYING cmm .lem files$(RESET)
	@cp $^ $(HOL_DIR)

# Copy the ail files to the build dir
$(AIL): $(addprefix $(AIL_DIR), $(AIL)) | $(HOL_DIR)
	@echo $(BOLD)COPYING cerberus ail .lem files$(RESET)
	@cp $^ $(HOL_DIR)

# Copy the cerberus model files to the build dir
$(MODEL): $(addprefix $(MODEL_DIR), $(MODEL)) | $(HOL_DIR)
	@echo $(BOLD)COPYING cerberus model .lem files$(RESET)
	@cp $^ $(HOL_DIR)

# Copy the cerberus files to the build dir
cerberus: $(addprefix $(HOL_DIR), $(CMM)) \
          $(addprefix $(HOL_DIR), $(AIL)) \
          $(addprefix $(HOL_DIR), $(MODEL))

model: $(SOURCE)

# Create auxiliary folder
$(AUX_DIR): $(HOL_DIR)
	@echo $(BOLD)CREATING the auxiliary script directory$(RESET)
	@mkdir $(AUX_DIR) || true

$(HOL_SCRIPTS): | $(SOURCE) $(AUX_DIR)
	@echo $(BOLD)"Generating HOL Script files"$(RESET)
	$(LEM) -hol $(LEM_FLAGS) $(SOURCE)
	@echo $(BOLD)"Moving auxiliary scripts to aux directory"
	@cd $(HOL_DIR); mv -f *AuxiliaryScript.sml $(AUX_DIR) || true

$(UTIL): $(addprefix $(UTIL_DIR), $(UTIL))
	@echo $(BOLD)Copying util script files...$(RESET)
	@cp $^ .

.PHONY: patch
patch: $(addprefix $(PATCH_DIR), $(PATCH))
	@echo $(BOLD)Applying patch $<...$(RESET)
	for p in $^; do patch < $$p; done

# Run Holmake
hol: $(HOL_SCRIPTS) $(AUX_DIR) $(UTIL) patch
	@echo $(BOLD)Running Holmake$(RESET)
	Holmake

.PHONY: clean clean-all
# Cleaning stuff
clean:
	@echo $(BOLD)"Cleaning up files generated by Holmake"$(RESET)
	@rm -f *.ui *.uo *Theory.sml *.sig util/*.Theory util/*.ui util/*.uo
	@rm -rf $(AUX_DIR)

clean-all: clean
	@echo $(BOLD)"Cleaning up everything..."$(RESET)
	@Holmake cleanAll
	@rm -f *.sml *.lem
