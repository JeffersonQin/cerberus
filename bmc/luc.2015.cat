"Linux model"

//include "cos.cat"

let po-loc = po & loc
let fr = (rf_inv ; co) \ id
let com = rf | co | fr

let sc-order = (po-loc | com)
acyclic sc-order

//procedure sc-per-location() =
//  let order = (po-loc | com)
//  acyclic order
//end

let deps = addr | data
//let deref-po-deps = (deref-po & deps)
//let lderef-po-deps = (lderef-po & deps)
//let rb-fence = (fencerel(F & Rb_dep) & deps)
//let ctrl-po-deps = (ctrl-po & ctrl)
//let proper-deps =   rb-fence (*| deref-po-deps 
//                  | lderef-po-deps*) | ctrl-po-deps

let proper-deps = ctrl
//let local = proper-deps | fences 
let local = proper-deps
let non-transitive = rfe?;local

let pairs_inner = ((po?;(rfe & (LinuxRelease * LinuxAcquire));po?) | (po?;(rfe & ctrl); ctrl))+
let pairs = pairs_inner+

//let parirs =((po?;(rfe & (LinuxRelease * LinuxAcquire));po?) | (po?;(rfe & ctrl); ctrl))+
// (po?;(rfe & (Assign * Deref));deref-po-deps) |
// (po?;(rfe & (Release * Lderef));lderef-po-deps) |

//let transitive-fences(extra) = (mb | sync | extra)
//let transitive(extra) = (rfe?;transitive-fences(extra) | rfe?;pairs)+

let hb_inner_inner = rfe?;pairs
let hb_inner = hb_inner_inner+
//let hb = (non-transitive | transitive(0));non-transitive?

let hb = (non-transitive | hb_inner);non-transitive?

//procedure causality() =  
irreflexive hb as causality
//end

let fre = fr & ext
//procedure observation() =
irreflexive fre;hb as observation
//end

//let prop(extra) = transitive(extra);non-transitive?
//let propA = (*need mb to forbid both 2+2W and R*)
//            prop(0)
//let propB = (*need wmb to forbid 2+2W and mb to forbid R*)
//            prop(wmb)
//(*let propC = need wmb to forbid both 2+2W and R, i.e. decrete Power broken*) 
//procedure propagation(prop) =
//  acyclic co | prop as progation
//end

//let Start-Sync = Start & Sync
//let End-Sync = End & Sync
//let F-Sync = F & Sync

//let po-succ = po \ (po;po)

//let se =
// ((Start-Sync * F-Sync) & po-succ); 
// ((F-Sync * End-Sync) & po-succ)

//(* From end of rs-cs to end of grace period *)
//let ue0  = um ; com+ ; (_ * End-Sync) & po

//let ue = (po & (Unlock * _)) ? ; ue0

//(* From start of grace period to start of rs-cs *)
//let sl = (Start-Sync * _) & po ; com+  ; ml
//(* From end of grace period to end of rs-cs *)
//let eu = (End-Sync * _) & po ; com+  ; mu

//let es = (End-Sync * Start-Sync) & (po | (po;com+;po))

  

//let grace = (crit | se | es | sl | eu | ue)+

//let SL = grace & (Start-Sync * Lock)
//and UE = grace & (Unlock * End-Sync)

//let ImpliedSL = range SL
//let ImpliedUE = domain UE

//let MoreMB = ImpliedSL | ImpliedUE | Start-Sync
//let more-mb = M*M & fencerel(MoreMB)
//let mb = mb | more-mb

//let grace-hb = mu;grace;lm

acyclic com as sc

//procedure restoring-sc() =
//  acyclic mb | com as sc
//  irreflexive sl;crit;ue as no-overlap
//  irreflexive grace as grace
//  acyclic grace-hb|com as grace-hb
//end

//procedure memory_barriers() =
//  call sc-per-location()
//  call causality()
//  call observation()
//  call propagation(propA)
//  call restoring-sc()
//end

//call memory_barriers()
