-- auto-generated implementation file for: `gcc_4.9.0_x86_64-apple-darwin10.8.0'

def <bits_in_byte> : integer :=
  8


-- GCC uses the two's complement representation with no padding bits
fun <Integer.encode> (ty: ctype, n: integer) : integer :=
  error(<<<integerEncode>>>, Unit) -- encodeTwos(ty, n)

fun <Integer.decode> (ty: ctype, n: integer) : integer :=
  error(<<<integerDecode>>>, Unit) -- decodeTwos(ty, n)


-- "For conversion to a type of width N, the value is reduced modulo 2^N to be
--  within range of the type; no signal is raised."
fun <Integer.conv_nonrepresentable_signed_integer>(ty: ctype, n: integer) : integer :=
-- TODO doc
  wrapI(ty, n)
{-
--  n % (2 ^ ctype_width(ty))
  if is_representable(n, ty) then
    n
  else
    if ivmax(ty) < n then n % -(2 ^ ctype_width(ty)) else n % (2 ^ ctype_width(ty)) end
     -- <Integer.conv_nonrepresentable_signed_integer>(ty, if ivmax(ty) < n then n - 2 ^ ctype_width(ty)  else n + 2 ^ ctype_width(ty) end)
  end
-}

{-
--  n % exp(2, ctype_width(ty))
  let n = encodeTwos("signed long", n) in
    <Integer.decode>(ty, n % 2^ctype_width(ty))
  end
-}


-- GCC says "Signed ‘>>’ acts on negative numbers by sign extension."
fun <SHR_signed_negative> (ty: ctype, n: integer, m: integer) : integer :=
  let n: integer = encodeTwos(ty, n) in
  decodeTwos(ty, (n / 2^m) + ones_prefix(0, m, ctype_width(ty)))

-- implementation of the ~ operator (only used in the signed case)
fun <Bitwise_complement> (ty: ctype, n: integer) : integer :=
  let n: integer = encodeTwos(ty, n) in
  decodeTwos(ty, complementTwos(ty, n))
