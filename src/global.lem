type ('a, 'b) map = ('a, 'b) Pmap.map
type 'a multiset = 'a Multiset.t

let (-|) f g x = f (g x)
let (|-) g f x = f (g x)
(* TODO: ask change in lem to be able to have
         the traditional |> *)
let (>|>) x f = f x
let (>?>) x b f g = if b then f x else g x

sub [ocaml] int_of_num = int_of_num
sub [ocaml] num_of_int = num_of_int


let ($) f x = f x
let comp f g = fun x -> f (g x)

let rec nub' l acc =
  match l with
    | []    -> []
    | x::xs -> if List.mem x acc then nub' xs acc
                                 else x :: nub' xs (x::acc)
  end
let nub l = nub' l []


let rec or_list l =
  match l with
    | []    -> false
    | x::xs -> x || or_list xs
  end

let rec delete eq x = function
  | []    -> []
  | y::ys -> if eq x y then ys else y :: delete eq x ys
end

let list_diff eq = List.fold_left (fun x y -> delete eq y x)
