(* type ('id, 'e) t = Location.t * Ail.type_class *)
type t = Location.t * Ail.type_class

let a_type (l: Location.t) (t: Ail.type_class) = (l, t)

val loc_of: forall 'a. t * Ail.expression 'a -> Location.t
let loc_of  ((l, _), _) = l

val type_of: forall 'a. t * Ail.expression 'a -> Ail.type_class
let type_of ((_, t), _) = t

val exp_of: forall 'a. t * Ail.expression 'a -> Ail.expression 'a
let exp_of  (_,      e) = e

(*  *)
let exp_type_of (e: Ail.expression_l t) : Ail.ctype =
  let t =
    match type_of e with
      | Ail.T_EXP    t -> t
      | Ail.T_LVALUE t -> Types.lvalue_convert' t
    end in
  Types.pointer_convert t

let lvalue_type_of e =
  match type_of e with
    | Ail.T_LVALUE t -> Types.pointer_convert t
  end

let ctype_of (e: Ail.expression_l t) : Ail.ctype =
  match type_of e with
    | Ail.T_EXP    t -> t
    | Ail.T_LVALUE t -> t
  end
