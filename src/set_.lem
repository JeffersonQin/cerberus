let product_map f s1 s2 = {f e1 e2 | forall (e1 IN s1) (e2 IN s2) | true}
let product s1 s2 = product_map Pair.make s1 s2

let filter_map f s =
  let f' a s =
    match f a with
      | Some b -> s union {b}
      | None   -> s
    end in
  Set.fold f' s {}

let fold_map f s i =
  Set.fold (fun e (a, s) ->
    let (e', a') = f e a in
    (a', s union {e'})
  ) s (i, {})

let of_list xs =  {x | forall (x MEM xs) | true}