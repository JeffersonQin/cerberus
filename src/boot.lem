(* Error messages for impossible situations *)
val outOfHomeomorphism: forall 'a. string -> 'a
let inline {ocaml} outOfHomeomorphism = Ocaml.Boot.outOfHomeomorphism

val assert_false: forall 'a. string -> 'a
let inline {ocaml} assert_false = Ocaml.Boot.assert_false


val debug: forall 'a. string -> 'a
let inline {ocaml} debug = Ocaml.Boot.debug

val print_debug: forall 'a. string -> 'a -> 'a
let inline {ocaml} print_debug = Ocaml.Boot.print_debug
