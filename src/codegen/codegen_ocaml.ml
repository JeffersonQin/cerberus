(* Created by Victor Gomes 2017-03-10 *)

open Util
open Core
open Cps_core
open Core_opt
open Pp_prelude
open Pp_ocaml

open Rt_ocaml

let tt = ivmax

let print_head filename =
  !^"(* Generated by Cerberus from" ^^^ !^filename ^^ !^" *)" ^//^
  !^"module A = Rt_ocaml" ^/^
  !^"module M = Mem" ^/^
  !^"module I = Mem.Impl" ^/^
  !^"module T = AilTypes" ^/^
  !^"module C = Core_ctype" ^/^
  !^"module O = Util.Option" ^//^
  !^"let (>>=) = M.bind2" ^//^
  (*
  !^"let (>>=) = Continuation.bind" ^//^
     *)
  !^"let _std_function_printf cont x y = (A.value [(I.IV (I.Prov_none, \
                            I.IVconcrete (Nat_big_num.of_string \"0\")))])" ^/^
  !^"let kill x = A.value ()"

let print_foot =
    !^"A.quit main"

let opt_passes core =
  elim_wseq core
  |> assoc_seq
  |> elim_skip

(* Generate Ocaml *)
let generate_ocaml core =
  let cps_core = cps_transform (run opt_passes core) in
  let globals acc (sym, coreTy, e) =
    acc ^^ !^"and" ^^^ print_eff_function (print_symbol sym) []
      (print_base_type coreTy) (print_expr e)
  in
    print_impls cps_core.impl ^^
    print_funs cps_core.stdlib ^//^
    (* TODO: missing globals
       List.fold_left globals P.empty cps_core.globs ^^
       *)
    print_funs cps_core.funs ^^ P.semi ^^ P.semi

let compile filename core =
  let fl = Filename.chop_extension filename in
  let fl_ml = fl ^ ".ml" in
  let oc = open_out fl_ml in
  begin
    P.ToChannel.pretty 1. 80 oc
      (print_head filename ^^ generate_ocaml core ^//^ print_foot);
    close_out oc;
    Exception.return0 0
  end
