(* Created by Victor Gomes 2017-03-10 *)

open Util
open Core
open Cps_core
open Core_opt
open Pp_prelude
open Pp_ocaml

let print_head filename =
  !^"(* Generated by Cerberus from" ^^^ !^filename ^^ !^" *)" ^//^
  !^"module A = Rt_ocaml" ^/^
  !^"module M = Mem" ^/^
  !^"module I = Mem.Impl" ^/^
  !^"module T = AilTypes" ^/^
  !^"module C = Core_ctype" ^/^
  !^"module O = Util.Option" ^//^
  !^"let (>>=) = M.bind2" ^//^
  !^"let rec _std_function_printf cont xs args =\
     A.printf conv_int_2 xs args >>= fun x -> cont x"

let print_globals globs =
  let print_global_pair g =
    P.parens (!^"glob_" ^^ print_symbol g ^^ P.comma ^^^ print_symbol g)
  in
  List.map print_global_pair globs
  |> print_list id

let print_foot globs main =
  print_let !^"globals" (print_globals globs) ^//^
  print_let tunit (!^"A.run globals" ^^^ print_symbol main)

let opt_passes core =
  elim_wseq core
  |> assoc_seq
  |> elim_skip
  |> elim_loc

(* Generate Ocaml *)
let generate_ocaml sym_supply core =
  let globs_syms = List.map (fun (s,_,_) -> s) core.Core.globs in
  let cps_core = cps_transform sym_supply (run opt_passes core) globs_syms in
  let globals acc (sym, coreTy, bbs, bbody) =
    acc
    ^^ !^"and" ^^^ print_eff_function (!^"glob_" ^^ print_symbol sym
                                       ^^^ print_symbol default) []
      (print_base_type coreTy) (print_transformed globs_syms bbs bbody)
    ^/^ !^"and" ^^^ print_symbol sym ^^^ !^"= ref (M.null_ptrval Core_ctype.Void0)"
  in
    print_impls globs_syms cps_core.impl ^^
    print_funs globs_syms cps_core.stdlib ^//^
    List.fold_left globals P.empty cps_core.globs ^^
    print_funs globs_syms cps_core.funs ^//^
    print_foot globs_syms core.main
    (*print_start globs_syms core.main*)

let compile filename sym_supply core =
  let fl = Filename.chop_extension filename in
  let fl_ml = fl ^ ".ml" in
  let oc = open_out fl_ml in
  begin
    P.ToChannel.pretty 1. 80 oc
      (print_head filename ^^ generate_ocaml sym_supply core);
    close_out oc;
    Exception.return0 0
  end
