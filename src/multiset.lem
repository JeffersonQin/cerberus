type t 'a = Pmap.map 'a num

let emp = Pmap.empty

let count e m =
  match Pmap.mem e m with
    | true -> Pmap.find e m
    | false-> 0
  end

let mem e m = (count e m > 0)
let add e m = Pmap.add e (1 + count e m) m

let from_list ls = List.fold_left (fun m e -> add e m) emp ls

val unv_compare_int: forall 'a. 'a -> 'a -> int
let inline {ocaml} unv_compare_int = Ocaml.Pervasives.compare

val map_compare_int: forall 'a. (num -> num -> int) -> t 'a -> t 'a -> int
let inline {ocaml} map_compare_int = Ocaml.Pmap.compare
let compare_int t1 t2 = map_compare_int unv_compare_int t1 t2

