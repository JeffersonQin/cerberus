type t = Ocaml.Pprint.t

module Unicode = struct
  val null : t
  sub [ocaml] null = Pprint.Unicode.null
  val le : t
  sub [ocaml] le = Pprint.Unicode.le
  val ge : t
  sub [ocaml] ge = Pprint.Unicode.ge
  val disj : t
  sub [ocaml] disj = Pprint.Unicode.disj
  val conj : t
  sub [ocaml] conj = Pprint.Unicode.conj
  val compl : t
  sub [ocaml] compl = Pprint.Unicode.compl
  val implies : t
  sub [ocaml] implies = Pprint.Unicode.implies
  val mapsto : t
  sub [ocaml] mapsto = Pprint.Unicode.mapsto
end

module Operators = struct
  val (^^) : t -> t -> t
  sub [ocaml] (^^) = Pprint.Operators.(^^)
  val (^^^) : t -> t -> t
  sub [ocaml] (^^^) = Pprint.Operators.(^^^)
  val (^/^) : t -> t -> t
  sub [ocaml] (^/^) = Pprint.Operators.(^/^)
  val !^ : string -> t
  sub [ocaml] !^ = Pprint.text
end

val lbrace : t
sub [ocaml] lbrace = Pprint.lbrace
val rbrace : t
sub [ocaml] rbrace = Pprint.rbrace
val comma : t
sub [ocaml] comma = Pprint.comma
val star : t
sub [ocaml] star = Pprint.star
val plus : t
sub [ocaml] plus = Pprint.plus
val minus : t
sub [ocaml] minus = Pprint.minus
val percent : t
sub [ocaml] percent = Pprint.percent
val slash : t
sub [ocaml] slash = Pprint.slash
val caret : t
sub [ocaml] caret = Pprint.caret
val equals : t
sub [ocaml] equals = Pprint.equals
val langle : t
sub [ocaml] langle = Pprint.langle
val rangle : t
sub [ocaml] rangle = Pprint.rangle
val ampersand : t
sub [ocaml] ampersand = Pprint.ampersand
val tilde : t
sub [ocaml] tilde = Pprint.tilde
val bar : t
sub [ocaml] bar = Pprint.bar
val bang : t
sub [ocaml] bang = Pprint.bang
val space : t
sub [ocaml] space = Pprint.space
val qmark : t
sub [ocaml] qmark = Pprint.qmark
val colon : t
sub [ocaml] colon = Pprint.colon
val semi : t
sub [ocaml] semi = Pprint.semi
val underscore : t
sub [ocaml] underscore = Pprint.underscore

val empty : t
sub [ocaml] empty = Pprint.empty

val text : string -> t
sub [ocaml] text = Pprint.text

val nest : num -> t -> t
sub [ocaml] nest = Pprint.nest
val group : t -> t
sub [ocaml] group = Pprint.group

val parens : t -> t
sub [ocaml] parens = Pprint.parens
val brackets : t -> t
sub [ocaml] brackets = Pprint.brackets
val braces : t -> t
sub [ocaml] braces = Pprint.braces
val dquotes : t -> t
sub [ocaml] dquotes = Pprint.dquotes

(*
val optional : forall 'a. ('a -> t) -> 'a option -> t
sub [ocaml] optional = Pprint.optional
*)
val comma_list : forall 'a. ('a -> t) -> 'a list -> t
sub [ocaml] comma_list = Pprint.comma_list
val sepmap : forall 'a. t -> ('a -> t) -> 'a list -> t
sub [ocaml] sepmap = Pprint.sepmap
val sep0map: forall 'a. t -> ('a -> t) -> 'a list -> t
sub [ocaml] sep0map = Pprint.sepmap
val fold : forall 'a. (t -> t -> t) -> t list -> t
sub [ocaml] fold = Pprint.fold

val break0 : t
sub [ocaml] break0 = Pprint.break0
val break1 : t
sub [ocaml] break1 = Pprint.break1
val group2 : t -> t
sub [ocaml] group2 = Pprint.group2