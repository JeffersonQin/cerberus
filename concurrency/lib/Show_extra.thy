header{*Generated by Lem from show_extra.lem.*}

theory "Show_extra" 

imports 
 	 Main
	 "Lem_string" 
	 "Lem_maybe" 
	 "Lem_num" 
	 "Lem_basic_classes" 
	 "Show" 
	 "Lem_string_extra" 
	 "Lem_set_extra" 

begin 

(*open import String Maybe Num Basic_classes Show String_extra*)
(*import Set_extra*)

definition string_of_set  :: "('a \<Rightarrow> string)\<Rightarrow> 'a set \<Rightarrow> string "  where 
     " string_of_set showX xs = (
  (''{'') @ (Show.string_of_list_aux showX (list_of_set xs) @ (''}'')))"


definition instance_String_extra_Show_set_dict  :: " 'a Show_class \<Rightarrow>('a set)Show_class "  where 
     " instance_String_extra_Show_set_dict dict_String_extra_Show_a = ((|

  show_method = (\<lambda> xs. string_of_set 
  (show_method   dict_String_extra_Show_a) xs)|) )"

end
