// Modified from:
// https://github.com/herd/herdtools/tree/master/cats/c11/popl2016
// C11.cat w/o locks, consume
output addr
output data

let sb = po | I * (M \ I)
let mo = co

// no consume
let cacq = [ACQ | (SC & (R | F)) | ACQ_REL]

let crel = [REL | (SC & (W | F)) | ACQ_REL]

let fr = rf_inv ; mo

let fsb = [F] ; sb
let sbf = sb ; [F]

let rs_prime = int | (U * (R & W))
let rs = mo & (rs_prime \ ((mo \ rs_prime) ; mo))

let swra_head = crel ; fsb ? ; [A & W]
let swra_mid = [A & W] ; rs ? ; rf ; [R & A]
let swra_tail = [R & A] ; sbf ? ; cacq
let swra = (swra_head ; swra_mid ; swra_tail) & ext

let pp_asw = asw \ (asw ; sb)
let sw = pp_asw | swra

let ithbr = sw | (sw; sb)
let ithb_prime = (ithbr | (sb ; ithbr))

let ithb = ithb_prime+
let hb = sb | ithb
acyclic hb as hb_acyclic

let hbl = hb & loc

let coh_prime_head = rf_inv? ; mo
let coh_prime_tail = rf ? ; hb
let coh_prime = coh_prime_head ; coh_prime_tail

irreflexive coh_prime as coh_irreflexive

let vis = ([W] ; hbl ; [R]) \ (hbl; [W]; hbl)

let rf_prime = rf ; hb
irreflexive rf_prime as rf_irreflexive

let narf_prime = (rf ; nonatomicloc) \ vis
empty narf_prime as nrf_empty

let rmw_prime = rf | (mo ; mo ; rf_inv) | (mo ; rf)
irreflexive rmw_prime as rmw_irreflexive

let cnf = ((W * U) | (U * W)) & loc
let dr = ext & (((cnf \ hb) \ (hb^-1)) \ (A * A))

let ur = (((((W * M) | (M * W)) & int & loc) \ sb) \ sb^-1) \ id

let sc_clk_imm = [SC] ; (sc_clk \ (mo ; sc_clk))

let s1_prime = [SC]; sc_clk_imm ; hb
irreflexive s1_prime as s1

let s2_prime_head = [SC]; sc_clk ; fsb?
let s2_prime_tail = mo ; sbf?
let s2_prime = [SC]; s2_prime_head ; s2_prime_tail
irreflexive s2_prime as s2

let s3_prime_head = [SC]; sc_clk ; rf_inv ; [SC]
let s3_prime_tail = [SC] ; mo
let s3_prime = [SC]; s3_prime_head ; s3_prime_tail
irreflexive s3_prime as s3

let s4_prime = [SC]; sc_clk_imm ; rf_inv ; hbl ; [W]
irreflexive s4_prime as s4

let s5_prime = [SC]; sc_clk ; fsb ; fr
irreflexive s5_prime as s5

let s6_prime = [SC]; sc_clk ; fr ; sbf
irreflexive s6_prime as s6

let s7_prime_head = [SC]; sc_clk ; fsb
let s7_prime_tail = fr ; sbf
let s7_prime = [SC]; s7_prime_head ; s7_prime_tail
irreflexive s7_prime as s7

undefined_unless empty dr as dr_ub
undefined_unless empty ur as unsequenced_race

