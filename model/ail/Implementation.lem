open import Pervasives Global Common Global Range AilTypes


type binaryMode =
  | Two'sComplement
  | One'sComplement
  | SignPlusMagnitude

(* From 6.3.1.1
— The rank of a signed integer type shall be greater than the rank of any signed integer
type with less precision.
— The rank of long long int shall be greater than the rank of long int, which
shall be greater than the rank of int, which shall be greater than the rank of short
int, which shall be greater than the rank of signed char.

Suppose precision P (long long int) < precision P (long int). Then ltRank P
(long long int) (long int). But the second bullet tells us that ltRank P (long
int) (long long int). So P (long int) ≤ precision P (long long int).
*)

val min_precision: integerBaseType -> nat
let min_precision = function
  | Ichar    -> 8
  | Short    -> 16
  | Int_     -> 16
  | Long     -> 32
  | LongLong -> 64
  (* TODO: check the following *)
  | IntN_t n  -> n
end

type implementation = <|
  binary_mode: binaryMode;
  signed:      integerType -> bool;
  precision:   integerType -> nat;
  size_t:      integerType;
  ptrdiff_t:   integerType;
|>

val make_implementation: binaryMode -> (integerType -> bool) -> (integerType -> nat) -> integerType -> integerType -> implementation
let make_implementation binary_mode signed precision size_ity ptrdiff_ity = <|
  binary_mode= binary_mode;
  signed=      signed;
  precision=   precision;
  size_t=      size_ity;
  ptrdiff_t=   ptrdiff_ity
|>

val integer_range: implementation -> integerType -> range
let integer_range P ity =
  let prec = P.precision ity in
  if P.signed ity then
(*    let prec_minus_one = prec - 1 in *)
    match P.binary_mode with
(*
    | Two'sComplement   -> make_range (~(2 ** (prec - 1)))
                                      ((2 ** (prec - 1)) - 1)
    | One'sComplement   -> make_range (~((2 ** (prec - 1)) + 1))
                                      ((2 ** (prec - 1)) - 1)
    | SignPlusMagnitude -> make_range (~((2 ** (prec - 1)) + 1))
                                      ((2 ** (prec - 1)) - 1)
*)
    | Two'sComplement   -> make_range (~(2 ** prec))
                                      ((2 ** prec) - 1)
    | One'sComplement   -> make_range (~((2 ** prec)) + 1)
                                      ((2 ** prec) - 1)
    | SignPlusMagnitude -> make_range (~((2 ** prec)) + 1)
                                      ((2 ** prec) - 1)
    end
  else
    make_range 0 ((2 ** prec) - 1)

val min_range_unsigned: integerBaseType -> range
let min_range_unsigned ibty =
  let prec = min_precision ibty in
  make_range 0 ((2 ** prec) - 1)

val min_range_signed: integerBaseType -> range
let min_range_signed ibty =
  let prec = (min_precision ibty) (* - 1 *) in
  make_range ((~(2 ** (prec - 1))) + 1)
             ((2 ** (prec - 1)) - 1)

val min_integer_range: integerType -> range
let min_integer_range = function
  | Char          -> make_range 0 ((2 ** ((min_precision Ichar)- 1)) - 1)
  | Bool          -> make_range 0 1
  | Unsigned ibty -> min_range_unsigned ibty
  | Signed   ibty -> min_range_signed   ibty
  | IBuiltin str -> error ("WIP min_integer_range: " ^ str)
  (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
  | Enum _ -> min_range_signed Int_
end

val min_implementation_signed_char: implementation
let min_implementation_signed_char =
  make_implementation
    SignPlusMagnitude
    ( function
        | Char       -> true
	| Signed   _ -> true
        | Bool       -> false
	| Unsigned _ -> false
        | IBuiltin str -> error ("WIP: min_implementation_signed_char 1" ^ str)
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> true
      end
    )
    ( function
        | Char              -> 7
        | Bool              -> 1
        | Signed   Ichar    -> 7
        | Unsigned Ichar    -> 8
        | Signed   Short    -> 15
        | Unsigned Short    -> 16
        | Signed   Int_     -> 15
        | Unsigned Int_     -> 16
        | Signed   Long     -> 31
        | Unsigned Long     -> 32
        | Signed   LongLong -> 63
        | Unsigned LongLong -> 64

        | Signed (IntN_t n) -> n-1
        | Unsigned (IntN_t n) -> n
        
        
        | IBuiltin str -> error ("WIP: min_implementation_signed_char 4" ^ str)
        
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> 15
      end
    )
    (Unsigned Long)
    (Signed   Long)

val min_implementation_unsigned_char: implementation
let min_implementation_unsigned_char =
  make_implementation
    SignPlusMagnitude
    ( function
        | Signed   _ -> true
        | Char       -> false
	| Bool       -> false
	| Unsigned _ -> false
        | IBuiltin str -> error ("WIP min_implementation_unsigned_char 1:" ^ str)
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> true
      end
    )
    ( function
        | Char              -> 8
        | Bool              -> 1
        | Signed   Ichar    -> 7
        | Unsigned Ichar    -> 8
        | Signed   Short    -> 15
        | Unsigned Short    -> 16
        | Signed   Int_     -> 15
        | Unsigned Int_     -> 16
        | Signed   Long     -> 31
        | Unsigned Long     -> 32
        | Signed   LongLong -> 63
        | Unsigned LongLong -> 64
        
        | Signed (IntN_t n) -> n-1

        | Unsigned (IntN_t n) -> n

        | IBuiltin str -> error ("WIP: min_implementation_unsigned_char 4" ^ str)
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> 15
      end
    )
    (Unsigned Long)
    (Signed   Long)

