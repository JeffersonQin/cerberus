(* Symbols table with stacked scopes *)
open Global

type t 'a 'b = list (map 'a 'b)

(* Return a empty association table (with an opened scope). *)
let empty = []

(* Add a symbol  *)
(* val add: forall 'a 'b. 'a -> 'b -> ('a, 'b) t -> ('a, 'b) t *)
let add a b t =
  match t with
    | t::ts -> Pmap.add a b t :: ts
    | _     -> Boot.outOfHomeomorphism "`Symbol_table.add' called on a table without any opened scope"
  end

(* Return the value associated to a symbol, if it exists (look over all the opened scopes). *)
(* val     find: forall 'a 'b. 'a -> ('a, 'b) t -> 'b option *)
let rec find a t =
  match t with
    | m::ms -> match Pmap.mem a m with
        | true  -> Some (Pmap.find a m)
        | false -> find a ms
        end
    | []    -> None
  end

(* val mem: forall 'a 'b. 'a -> ('a, 'b) t -> bool *)
let mem a t = Option.is_some (find a t)

let symbols t =
  match t with
    | m::_ -> Ocaml.Pmap.fold (fun _ b l -> b::l) m []
  end

let create_scope t = Pmap.empty::t

let destroy_scope t =
  match t with
    | _::ms -> ms
  end

let return_scope t =
  match t with
    | m::_ -> [m]
  end

let push_table t1 t2 = t1 @ t2
