(* generated by Ott 0.25 from: core.ott *)
open import Pervasives

open import Core_ctype Thread
import Symbol Implementation_ Undefined Loc Cmm_csem
import Mem Mem_common

type core_object_type =  (* types for C objects *)
 | OTy_integer
 | OTy_floating
 | OTy_pointer
 | OTy_cfunction
 | OTy_array of core_object_type
 | OTy_struct of Symbol.sym
 | OTy_union of Symbol.sym


type core_base_type =  (* Core base types *)
 | BTy_unit (* unit *)
 | BTy_boolean (* boolean *)
 | BTy_ctype (* Core type of C type exprs *)
 | BTy_list of core_base_type (* list *)
 | BTy_tuple of list core_base_type (* tuple *)
 | BTy_object of core_object_type (* C object value *)
 | BTy_loaded of core_object_type (* core_object_type or unspecified value *)


type core_type =  (* Core types *)
 | TyBase of core_base_type (* pure base type *)
 | TyEffect of core_base_type (* effectful base type *)


type binop = 
 | OpAdd
 | OpSub
 | OpMul
 | OpDiv
 | OpRem_t
 | OpRem_f
 | OpExp
 | OpEq
 | OpGt
 | OpLt
 | OpGe
 | OpLe
 | OpAnd
 | OpOr

 
 instance (Eq binop)
   let (=)  = unsafe_structural_equality
   let (<>) = unsafe_structural_inequality
 end
 
 instance (Show binop)
   let show op = 
     match op with
     | OpAdd -> "OpAdd"
     | OpSub -> "OpSub"
     | OpMul -> "OpMul"
     | OpDiv -> "OpDiv"
     | OpRem_t -> "OpRem_t"
     | OpRem_f -> "OpRem_f"
     | OpExp -> "OpExp"
     | OpEq  -> "OpEq"
     | OpGt  -> "OpGt"
     | OpLt  -> "OpLt"
     | OpGe  -> "OpGe"
     | OpLe  -> "OpLe"
     | OpAnd -> "OpAnd"
     | OpOr  -> "OpOr"
     end
 end


type polarity =  (* memory action polarities *)
 | Pos (* sequenced by \ottkw{let\ weak} and \ottkw{let\ strong} *)
 | Neg (* only sequenced by \ottkw{let\ strong} *)


type generic_name 'sym = 
 | Sym of 'sym (* Core identifier *)
 | Impl of Implementation_.implementation_constant (* implementation-defined constant *)


type generic_object_value 'sym =  (* C object values *)
 | OVinteger of Mem.integer_value (* integer value *)
 | OVfloating of Mem.floating_value (* floating-point value *)
 | OVpointer of Mem.pointer_value (* pointer value *)
 | OVcfunction of (generic_name 'sym) (* C function pointer *)
 | OVarray of list (generic_object_value 'sym) (* C array value *)
 | OVstruct of Symbol.sym * list (Cabs.cabs_identifier * Mem.mem_value) (* C struct value *)
 | OVunion of Symbol.sym * Cabs.cabs_identifier * Mem.mem_value (* C union value *)


type generic_value 'sym =  (* Core values *)
 | Vconstrained of list (list Mem.mem_constraint2 * (generic_value 'sym))
 | Vobject of (generic_object_value 'sym) (* C object value *)
 | Vspecified of (generic_object_value 'sym) (* non-unspecified loaded value *)
 | Vunspecified of ctype (* unspecified loaded value *)
 | Vunit (* unit *)
 | Vtrue (* true *)
 | Vfalse (* false *)
 | Vctype of ctype (* C type expr as value *)
 | Vlist of core_base_type * list (generic_value 'sym) (* list *)
 | Vtuple of list (generic_value 'sym) (* tuple *)


type generic_ctor 'bty = 
 | Cnil of 'bty (* empty list *)
 | Ccons (* cons *)
 | Ctuple (* tuple *)
 | Carray (* C array *)
 | Civmax (* max integer value *)
 | Civmin (* min integer value *)
 | Civsizeof (* sizeof value *)
 | Civalignof (* alignof value *)
 | Cspecified (* non-unspecified loaded value *)
 | Cunspecified (* unspecified value *)


type generic_pattern 'bty 'sym = 
 | CaseBase of maybe ('sym * core_base_type)
 | CaseCtor of (generic_ctor 'bty) * list (generic_pattern 'bty 'sym) (* constructor pattern *)

type sym = Symbol.sym
type ksym = Symbol.sym


type pexpr_ 'bty 'sym =  (* Core pure expressions *)
 | PEsym of 'sym (* Core identifier *)
 | PEimpl of Implementation_.implementation_constant (* implementation-defined constant *)
 | PEval of (generic_value 'sym) (* value *)
 | PEconstrained of list (list Mem.mem_constraint2 * (generic_pexpr 'bty 'sym)) (* constrained value *)
 | PEundef of Undefined.undefined_behaviour (* undefined behaviour *)
 | PEerror of string * (generic_pexpr 'bty 'sym) (* impl-defined static error *)
 | PEctor of (generic_ctor 'bty) * list (generic_pexpr 'bty 'sym) (* constructor application *)
 | PEcase of (generic_pexpr 'bty 'sym) * list ((generic_pattern 'bty 'sym) * (generic_pexpr 'bty 'sym)) (* pattern matching *)
 | PEarray_shift of (generic_pexpr 'bty 'sym) * ctype * (generic_pexpr 'bty 'sym) (* pointer array shift *)
 | PEmember_shift of (generic_pexpr 'bty 'sym) * Symbol.sym * Cabs.cabs_identifier (* pointer struct/union member shift *)
 | PEnot of (generic_pexpr 'bty 'sym) (* boolean not *)
 | PEop of binop * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* binary operators *)
 | PEstruct of Symbol.sym * list (Cabs.cabs_identifier * (generic_pexpr 'bty 'sym)) (* C struct expression *)
 | PEunion of Symbol.sym * Cabs.cabs_identifier * (generic_pexpr 'bty 'sym) (* C union expression *)
 | PEcall of (generic_name 'sym) * list (generic_pexpr 'bty 'sym) (* pure Core function call *)
 | PElet of (generic_pattern 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* pure Core let *)
 | PEif of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* pure Core if *)
 | PEis_scalar of (generic_pexpr 'bty 'sym)
 | PEis_integer of (generic_pexpr 'bty 'sym)
 | PEis_signed of (generic_pexpr 'bty 'sym)
 | PEis_unsigned of (generic_pexpr 'bty 'sym)

and generic_pexpr 'bty 'sym = 
 | Pexpr of 'bty * (pexpr_ 'bty 'sym)


type generic_action_ 'bty 'sym =  (* memory actions *)
 | Create of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * Symbol.prefix
 | Alloc of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * Symbol.prefix
 | Kill of (generic_pexpr 'bty 'sym)
 | Store of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * Cmm_csem.memory_order
 | Load of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * Cmm_csem.memory_order
 | RMW of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * Cmm_csem.memory_order * Cmm_csem.memory_order
 | Fence of Cmm_csem.memory_order


type generic_action 'a 'bty 'sym =  (* memory actions *)
 | Action of Loc.t * 'a * (generic_action_ 'bty 'sym)


type generic_paction 'a 'bty 'sym =  (* memory actions with polarity *)
 | Paction of polarity * (generic_action 'a 'bty 'sym)


type generic_expr 'a 'bty 'sym =  (* Core expressions *)
 | Epure of (generic_pexpr 'bty 'sym) (* pure expression *)
 | Ememop of Mem_common.memop * list (generic_pexpr 'bty 'sym) (* pointer op involving memory *)
 | Eaction of (generic_paction 'a 'bty 'sym) (* memory action *)
 | Ecase of (generic_pexpr 'bty 'sym) * list ((generic_pattern 'bty 'sym) * (generic_expr 'a 'bty 'sym)) (* pattern matching *)
 | Elet of (generic_pattern 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_expr 'a 'bty 'sym) (* Core let *)
 | Eif of (generic_pexpr 'bty 'sym) * (generic_expr 'a 'bty 'sym) * (generic_expr 'a 'bty 'sym) (* Core if *)
 | Eskip (* skip *)
 | Eproc of 'a * (generic_pexpr 'bty 'sym) * list (generic_pexpr 'bty 'sym) (* Core procedure call *)
 | Ereturn of (generic_pexpr 'bty 'sym) (* Core procedure return *)
 | Eunseq of list (generic_expr 'a 'bty 'sym) (* unsequenced expressions *)
 | Ewseq of (generic_pattern 'bty 'sym) * (generic_expr 'a 'bty 'sym) * (generic_expr 'a 'bty 'sym) (* weak sequencing *)
 | Esseq of (generic_pattern 'bty 'sym) * (generic_expr 'a 'bty 'sym) * (generic_expr 'a 'bty 'sym) (* strong sequencing *)
 | Easeq of maybe ('sym * core_base_type) * (generic_action 'a 'bty 'sym) * (generic_paction 'a 'bty 'sym) (* atomic sequencing *)
 | Eindet of nat * (generic_expr 'a 'bty 'sym) (* indeterminately sequenced expr *)
 | Ebound of nat * (generic_expr 'a 'bty 'sym) (* $\ldots$and boundary *)
 | End of list (generic_expr 'a 'bty 'sym) (* nondeterministic sequencing *)
 | Esave of Symbol.sym * list (Symbol.sym * ctype) * (generic_expr 'a 'bty 'sym) (* save label *)
 | Erun of 'a * Symbol.sym * list (Symbol.sym * (generic_pexpr 'bty 'sym)) (* run from label *)
 | Epar of list (generic_expr 'a 'bty 'sym) (* cppmem thread creation *)
 | Ewait of Thread.thread_id (* wait for thread termination *)
 | Eloc of Loc.t * (generic_expr 'a 'bty 'sym)

(* TODO: don't we need any impl proc? *)
type generic_impl_decl 'bty =
  | Def of core_base_type * generic_pexpr 'bty Symbol.sym
  | IFun of core_base_type * list (Symbol.sym * core_base_type) * generic_pexpr 'bty Symbol.sym
type generic_impl 'bty = map Implementation_.implementation_constant (generic_impl_decl 'bty)

type generic_fun_map_decl 'bty 'a =
  | Fun of core_base_type * list (Symbol.sym * core_base_type) * generic_pexpr 'bty Symbol.sym
  | Proc of core_base_type * list (Symbol.sym * core_base_type) * generic_expr 'a 'bty Symbol.sym

type generic_fun_map 'bty 'a = map Symbol.sym (generic_fun_map_decl 'bty 'a)


(* a Core file is just a set of named functions *)
type generic_file 'bty 'a = <|
  main   : Symbol.sym;
  stdlib : generic_fun_map 'bty 'a;
  impl   : generic_impl 'bty;
  globs  : list (Symbol.sym * core_base_type * generic_expr 'a 'bty Symbol.sym);
  funs   : generic_fun_map 'bty 'a;
|>


type name            = generic_name Symbol.sym
type object_value    = generic_object_value Symbol.sym
type value           = generic_value Symbol.sym
type ctor            = generic_ctor unit
type pattern         = generic_pattern unit Symbol.sym
type pexpr           = generic_pexpr unit Symbol.sym
type expr 'a         = generic_expr 'a unit Symbol.sym
type paction 'a      = generic_paction 'a unit Symbol.sym
type impl_decl       = generic_impl_decl unit
type impl            = generic_impl unit
type fun_map_decl 'a = generic_fun_map_decl unit 'a
type fun_map 'a      = generic_fun_map unit 'a
type file 'a         = generic_file unit 'a

type typed_ctor            = generic_ctor core_base_type
type typed_pattern         = generic_pattern core_base_type Symbol.sym
type typed_pexpr           = generic_pexpr core_base_type Symbol.sym
type typed_expr 'a         = generic_expr 'a core_base_type Symbol.sym
type typed_impl_decl       = generic_impl_decl core_base_type
type typed_impl            = generic_impl core_base_type
type typed_fun_map_decl 'a = generic_fun_map_decl core_base_type 'a
type typed_fun_map 'a      = generic_fun_map core_base_type 'a
type typed_file 'a         = generic_file core_base_type 'a



declare {coq} rename type impl = impl_ (* workaround for Lem issue #74 *)






 
 
 
 
 
 (* runtime stuff *)
type continuation_element 'a =
  | Kunseq of list (expr 'a) * list (expr 'a)
  | Kwseq  of pattern * expr 'a
  | Ksseq  of pattern * expr 'a
 (*  | Ktry   list (string * expr 'a) *)

type continuation 'a = list (continuation_element 'a)
type labeled_continuation 'a = list (Symbol.sym * ctype) * expr 'a

type stack 'a =
  | Stack_empty
  | Stack_cons of continuation 'a * stack 'a
 
 
 
 
 
 
 (* basic class instanciations *)
 instance (SetType polarity)
   let setElemCompare = defaultCompare
 end



