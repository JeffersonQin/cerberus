open import Pervasives

import State_exception_undefined
import Symbol Symbolic Core_ctype Thread

module SEU = State_exception_undefined


type memory_state =
  | MEMORY_STATE

type memory_error =
  | MEMORY_ERROR

type memM 'a = SEU.t 'a memory_state memory_error


(* val runMem: forall 'a. memM 'a ->  *)


type pointer_value =
  | Pointer_null of Core_ctype.ctype
  | Pointer_nonnull of natural
  | Pointer_function of Symbol.t

and mem_value =
  | MV_pointer of pointer_value
  | MV_integer of Symbolic.symbolic   (* possibly-symbolic integer value *)
(*
  | MV_array of list mem_value
  | MV_struct of list (Symbol.t * mem_value)
  | MV_union of Symbol.t * mem_value
  | MV_pointer_byte of nat * nat * pointer_value 
  | MV_unspecified of Core_ctype.ctype
*)



val null_pointer: Core_ctype.ctype -> pointer_value
let null_pointer ty =
  Pointer_null ty












open SEU.Operators

val allocate_object:    Thread.thread_id  (* the allocating thread *)
                     -> Core_ctype.ctype  (* type of the allocation *)
(*
                     -> Symbolic.symbolic (* size of that type *)
                     -> Symbolic.symbolic (* alignment of that type *)
*)
                     -> memM pointer_value
let allocate_object (* tid ty size_symb align_symb *) _ ty =
  SEU.return (Pointer_null ty)
