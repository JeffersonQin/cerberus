open import Pervasives
import AilTypes

(* C types (this is a simplication of what is need for typechecking) *)
(* TODO: what about Ail.ATOMIC_Q ? *)
type ctype =
 | Void
 | Basic of AilTypes.basicType
 | Array of ctype * integer
 | Function of ctype * list ctype * bool
 | Pointer of ctype
 | Atomic of ctype
(*  | Struct of  *)


(*
  | STRUCT of Ail.id * list (Ail.id * member)
  | UNION  of Ail.id * list (Ail.id * member)
  | ENUM of Ail.id
  | Atomic of ctype
  | SIZE_T
  | INTPTR_T
  | WCHAR_T
  | CHAR16_T
  | CHAR32_T

and member =
  | MEMBER of (* alignment_specifier * *) ctype
  | BITFIELD of ctype * integer * (maybe bool)
*)

let rec ctypeEquality ty1 ty2 =
  match (ty1, ty2) with
    | (Void, Void) ->
        true
    | (Basic bty1, Basic bty2) ->
        bty1 = bty2
    | (Array ty1 n1, Array ty2 n2) ->
        ctypeEquality ty1 ty2 && n1 = n2
    | (Function ty1 tys1 b1, Function ty2 tys2 b2) ->
        ctypeEquality ty1 ty2 &&
        List.all (fun (x, y) -> ctypeEquality x y) (zip tys1 tys2) &&
        b1 = b2
    | (Pointer ty1, Pointer ty2) ->
        ctypeEquality ty1 ty2
    | (Atomic ty1, Atomic ty2) ->
        ctypeEquality ty1 ty2

(*
    | (SIZE_T, SIZE_T) -> true
    | (INTPTR_T, INTPTR_T) -> true
    | (WCHAR_T, WCHAR_T) -> true
    | (CHAR16_T, CHAR16_T) -> true
    | (CHAR32_T, CHAR32_T) -> true
 *)
    | _ -> false
  end

instance (Eq ctype)
  let (=) = ctypeEquality
  let (<>) x y = not (ctypeEquality x y)
end


val ctype_to_nat : ctype -> nat
let ctype_to_nat = function
 | Void           -> 0
 | Basic _        -> 1
 | Array _ _      -> 2
 | Function _ _ _ -> 3
 | Pointer _      -> 4
 | Atomic _       -> 5
end

let rec setElemCompare_ctype ty1 ty2 =
  match (ty1, ty2) with
    | (Void, Void) ->
        EQ
    | (Basic bty1, Basic bty2) ->
        setElemCompare bty1 bty2
    | (Array ty1 n1, Array ty2 n2) ->
        pairCompare setElemCompare_ctype setElemCompare (ty1, n1) (ty2, n2)
    | (Function ty1 tys1 b1, Function ty2 tys2 b2) ->
        pairCompare setElemCompare_ctype (pairCompare (lexicographicCompareBy setElemCompare_ctype) setElemCompare)
          (ty1, (tys1, b1)) (ty2, (tys2, b2))
    | (Pointer ty1, Pointer ty2) ->
        setElemCompare_ctype ty1 ty2
    | (Atomic ty1, Atomic ty2) ->
         setElemCompare_ctype ty1 ty2
    | (_, _) ->
        setElemCompare (ctype_to_nat ty1) (ctype_to_nat ty2)
  end


instance (SetType ctype)
  let setElemCompare = setElemCompare_ctype
end
