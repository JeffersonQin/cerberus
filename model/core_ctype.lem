open import Pervasives
import AilTypes

(* C types (this is a simplication of what is need for typechecking) *)
(* TODO: what about Ail.ATOMIC_Q ? *)
type ctype =
 | Void
 | Basic of AilTypes.basicType
 | Array of ctype * integer
 | Function of ctype * list ctype * bool
 | Pointer of ctype
 | Atomic of ctype
(*
  | STRUCT of Ail.id * list (Ail.id * member)
  | UNION  of Ail.id * list (Ail.id * member)
  | ENUM of Ail.id
  | Atomic of ctype
  | SIZE_T
  | INTPTR_T
  | WCHAR_T
  | CHAR16_T
  | CHAR32_T

and member =
  | MEMBER of (* alignment_specifier * *) ctype
  | BITFIELD of ctype * integer * (maybe bool)
*)

let rec ctype_eq t1 t2 =
  match (t1, t2) with
    | (Void, Void) -> true
    | (Basic bt1, Basic bt2) -> bt1 = bt2
    | (Array a1 i1, Array a2 i2) -> (a1 = a2) && (i1 = i2)
    | (Function ct1 ts1 b1, Function ct2 ts2 b2) -> (ct1 = ct2) && (ts1 = ts2) && (b1 = b2)
    | (Pointer ct1, Pointer ct2) -> (ct1 = ct2)
    | (Atomic ct1, Atomic ct2) -> (ct1 = ct2)
(*
    | (SIZE_T, SIZE_T) -> true
    | (INTPTR_T, INTPTR_T) -> true
    | (WCHAR_T, WCHAR_T) -> true
    | (CHAR16_T, CHAR16_T) -> true
    | (CHAR32_T, CHAR32_T) -> true
 *)
    | _ -> false
  end

instance (Eq ctype)
  let (=) = ctype_eq
  let (<>) x y = not (ctype_eq x y)
end
