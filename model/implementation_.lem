open import Pervasives

type implementation_constant =
  | Environment__startup_name
  | Environment__startup_type
  | Characters__bits_in_byte
  | Characters__execution_character_set_values
  | Characters__TODO1
  | Characters__TODO2
  | Characters__plain_char_is_signed
  | Characters__TODO3
  | Characters__TODO4
  | Characters__TODO5
  | Characters__TODO6
  | Characters__TODO7
  | Characters__TODO8
  | Characters__TODO9
  | Characters__TODO10
  | Integer__encode
  | Integer__decode
  | Integer__conv_nonrepresentable_signed_integer
  | Sizeof
  | Alignof
  | SHR_signed_negative
  | Bitwise_complement
  | Plain_bitfield_sign
  | Bitfield_other_types
  | Atomic_bitfield_permitted
  | Ctype_min
  | Ctype_max
  | StdFunction of string

val implementation_constant_to_nat : implementation_constant -> nat
let implementation_constant_to_nat x =
  match x with
    | Environment__startup_name -> 0
    | Environment__startup_type -> 1
    | Characters__bits_in_byte -> 2
    | Characters__execution_character_set_values -> 3
    | Characters__TODO1 -> 4
    | Characters__TODO2 -> 5
    | Characters__plain_char_is_signed -> 6
    | Characters__TODO3 -> 7
    | Characters__TODO4 -> 8
    | Characters__TODO5 -> 9
    | Characters__TODO6 -> 10
    | Characters__TODO7 -> 11
    | Characters__TODO8 -> 12
    | Characters__TODO9 -> 13
    | Characters__TODO10 -> 14
    | Integer__encode -> 15
    | Integer__decode -> 16
    | Integer__conv_nonrepresentable_signed_integer -> 17
    | Sizeof -> 18
    | Alignof -> 19
    | SHR_signed_negative -> 20
    | Bitwise_complement -> 21
    | Plain_bitfield_sign -> 22
    | Bitfield_other_types -> 23
    | Atomic_bitfield_permitted -> 24
    | Ctype_min -> 25
    | Ctype_max -> 26
    | StdFunction _ -> 27
  end

let implementation_constant_equal x y =
  match (x, y) with
    | (StdFunction name1, StdFunction name2) -> (name1 = name2)
    | _ -> (implementation_constant_to_nat x = implementation_constant_to_nat y)
  end

instance (Eq implementation_constant)
  let (=) = implementation_constant_equal
  let (<>) x y = not (implementation_constant_equal x y)
end

let implementation_constant_compare x y =
  match (x, y) with
    | (StdFunction name1, StdFunction name2) -> setElemCompare name1 name2
    | _ -> setElemCompare (implementation_constant_to_nat x) (implementation_constant_to_nat y)
  end 

instance (SetType implementation_constant)
  let setElemCompare = implementation_constant_compare
end

(* TODO: this is for the parsing (a bit disgusting to do it that way *)
let impl_map =
  foldl (fun acc (k, v) -> Map.insert k v acc) Map.empty
  [
    ("<Environment.startup_name>"                     , Environment__startup_name);
    ("<Environment.startup_type>"                     , Environment__startup_type);
    ("<Characters.bits_in_byte>"                      , Characters__bits_in_byte);
    ("<Characters.execution_character_set_values>"    , Characters__execution_character_set_values);
    ("<Characters.TODO1>"                             , Characters__TODO1);
    ("<Characters.TODO2>"                             , Characters__TODO2);
    ("<Characters.plain_char_is_signed>"              , Characters__plain_char_is_signed);
    ("<Characters.TODO3>"                             , Characters__TODO3);
    ("<Characters.TODO4>"                             , Characters__TODO4);
    ("<Characters.TODO5>"                             , Characters__TODO5);
    ("<Characters.TODO6>"                             , Characters__TODO5);
    ("<Characters.TODO7>"                             , Characters__TODO6);
    ("<Characters.TODO8>"                             , Characters__TODO8);
    ("<Characters.TODO9>"                             , Characters__TODO9);
    ("<Characters.TODO10>"                            , Characters__TODO10);
    ("<Integer.encode>"                               , Integer__encode);
    ("<Integer.decode>"                               , Integer__decode);
    ("<Integer.conv_nonrepresentable_signed_integer>" , Integer__conv_nonrepresentable_signed_integer);
    ("<sizeof>"                                       , Sizeof);
    ("<alignof>"                                      , Alignof);
    ("<bits_in_byte>"                                 , Characters__bits_in_byte);
    ("<SHR_signed_negative>"                          , SHR_signed_negative);
    ("<Bitwise_complement>"                           , Bitwise_complement);
    ("<Plain_bitfield_sign>"                          , Plain_bitfield_sign);
    ("<Bitfield_other_types>"                         , Bitfield_other_types);
    ("<Atomic_bitfield_permitted>"                    , Atomic_bitfield_permitted);
    ("<ctype_min>"                                    , Ctype_min);
    ("<ctype_max>"                                    , Ctype_max);
  ]


let string_of_implementation_constant = function
  | Environment__startup_name ->
      "Environment.startup_name"
  | Environment__startup_type ->
      "Environment.startup_type"
  | Characters__bits_in_byte ->
      "Characters.bits_in_byte"
  | Characters__execution_character_set_values ->
      "Characters.execution_character_set_values"
  | Characters__TODO1 ->
      "Characters.TODO1"
  | Characters__TODO2 ->
      "Characters.TODO2"
  | Characters__plain_char_is_signed ->
      "Characters.plain_char_is_signed"
  | Characters__TODO3 ->
      "Characters.TODO3"
  | Characters__TODO4 ->
      "Characters.TODO4"
  | Characters__TODO5 ->
      "Characters.TODO5"
  | Characters__TODO6 ->
      "Characters.TODO6"
  | Characters__TODO7 ->
      "Characters.TODO7"
  | Characters__TODO8 ->
      "Characters.TODO8"
  | Characters__TODO9 ->
      "Characters.TODO9"
  | Characters__TODO10 ->
      "Characters.TODO10"
  | Integer__encode ->
      "Integer.encode"
  | Integer__decode ->
      "Integer.decode"
  | Integer__conv_nonrepresentable_signed_integer ->
      "Integer.conv_nonrepresentable_signed_integer"
  | Sizeof ->
      "sizeof"
  | Alignof ->
      "alignof"
  | SHR_signed_negative ->
      "SHR_signed_negative"
  | Bitwise_complement ->
      "Bitwise_complement"
  | Plain_bitfield_sign ->
      "Plain_bitfield_sign"
  | Bitfield_other_types ->
      "Bitfield_other_types"
  |  Atomic_bitfield_permitted ->
      "Atomic_bitfield_permitted"
  | Ctype_min ->
      "ctype_min"
  | Ctype_max ->
      "ctype_max"
  | StdFunction fname ->
       "std_function_" ^ fname
end

