open import Pervasives
import Map

type t 'k =
  Multiset of Map.map 'k nat

val emp: forall 'k. MapKeyType 'k => t 'k
let emp = Multiset $ Map.empty

val count: forall 'k. MapKeyType 'k => 'k -> t 'k -> nat
let count e (Multiset m) =
  Map.findWithDefault e 0 m

val mem: forall 'k. MapKeyType 'k => 'k -> t 'k -> bool
let multiset_mem e m = (count e m > 0)
let inline mem = multiset_mem

val add: forall 'k. MapKeyType 'k => 'k -> t 'k -> t 'k
let multiset_add e (Multiset m) = Multiset $ Map.insert e (1 + count e (Multiset m)) m
let inline add = multiset_add

val from_list: forall 'k. MapKeyType 'k => list 'k -> t 'k
let from_list ls = foldl (fun m e -> add e m) emp ls


val equal_multiset: forall 'a. SetType 'a, MapKeyType 'a => t 'a -> t 'a -> bool
let equal_multiset ms1 ms2 =
  let Multiset ms1' = ms1 in
  let Multiset ms2' = ms2 in
  Set.all (fun z -> count z ms1 = count z ms2) $ (domain ms1') union (domain ms2')


instance forall 'a. SetType 'a, MapKeyType 'a => (Eq (t 'a))
  let (=)  ms1 ms2 = equal_multiset ms1 ms2
  let (<>) ms1 ms2 = not (equal_multiset ms1 ms2)
end
