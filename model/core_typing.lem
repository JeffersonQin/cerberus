open import Pervasives
import Exception Loc Errors

open import Core Core_aux



(*
val     typeof_value: Core.value -> maybe core_base_type
let rec typeof_value cval =
  match cval with
    | Vunit ->
        BTy_unit
    | Vtrue ->
        BTy_boolean
    | Vfalse ->
        BTy_boolean
    | Vlist cvals' ->
        
    | Vtuple of list value
    | Vctype of ctype
    | Vunspecified of ctype
    | Vinteger of Mem.integer_value
    | Vfloating of string
    | Vpointer of Mem.pointer_value
    | Varray of list value (* Mem.mem_value *)
    | Vstruct tag_sym _ ->
        BTy_object
    | Vunion tag_sym _ ->
        BTy_object
    | Vcfunction _ ->
        BTy_object OTy_cfunction
  end
*)




(* TODO: add a check for the existence of main *)
val typecheck_program: Core.file unit -> Exception.t unit Errors.t
let typecheck_program file =
(*  Exception.fail (Loc.unknown, Errors.Core_typing) *)
  Exception.return ()
