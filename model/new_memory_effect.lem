open import Pervasives
import Exception Undefined


type memory_error



type t 's 'a = 's -> Exception.t (Undefined.t 'a * 's) memory_error



(* monadic operations *)
val return: forall 's 'a. 'a -> t 's 'a
let return x =
  fun st -> Exception.return (Undefined.return x, st)



(* TODO: rewrite *)
val bind: forall 's 'a 'b. t 's 'a -> ('a -> t 's 'b) -> t 's 'b
let bind m f = fun st ->
  match m st with
    | Exception.Result (Undefined.Defined x, st') ->
        f x st'
    | Exception.Result (Undefined.Undef ub, st') ->
        Exception.Result (Undefined.Undef ub, st')
    | Exception.Result (Undefined.Error, st') ->
        Exception.Result (Undefined.Error, st')
    | Exception.Exception err ->
        Exception.Exception err
  end
