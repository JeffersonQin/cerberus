open import Pervasives

type execution_mode =
  | Interactive
  | Exhaustive
  | Random

instance (Eq execution_mode)
  let (=) = unsafe_structural_equality
  let (<>) = unsafe_structural_inequality
end

declare ocaml target_rep type     execution_mode = `Smt2.execution_mode`
declare ocaml target_rep function Interactive    = `Smt2.Interactive`
declare ocaml target_rep function Exhaustive     = `Smt2.Exhaustive`
declare ocaml target_rep function Random         = `Smt2.Random`

declare hol target_rep type     execution_mode = `util$execution_mode`
declare hol target_rep function Interactive    = `util$Interactive`
declare hol target_rep function Exhaustive     = `util$Exhaustive`
declare hol target_rep function Random         = `util$Random`

val current_execution_mode: unit -> maybe execution_mode
declare ocaml target_rep function current_execution_mode = `Global_ocaml.current_execution_mode`
declare hol   target_rep function current_execution_mode = `util$current_execution_mode`


val using_concurrency: unit -> bool
declare ocaml target_rep function using_concurrency = `Global_ocaml.concurrency_mode`
declare hol  target_rep function using_concurrency u = false


val isDefacto: unit -> bool
declare ocaml target_rep function isDefacto = `Global_ocaml.isDefacto`


type cerb_switch =
  | SW_strict_pointer_arith
  | SW_strict_reads
  | SW_forbid_nullptr_free
  | SW_zap_dead_pointers
  | SW_no_integer_provenance

declare ocaml target_rep function SW_strict_pointer_arith = `Switches.SW_strict_pointer_arith`
declare ocaml target_rep function SW_strict_reads = `Switches.SW_strict_reads`
declare ocaml target_rep function SW_forbid_nullptr_free = `Switches.SW_forbid_nullptr_free`
declare ocaml target_rep function SW_zap_dead_pointers = `Switches.SW_zap_dead_pointers`
declare ocaml target_rep function SW_no_integer_provenance = `Switches.SW_no_integer_provenance`

val has_switch: cerb_switch -> bool
declare ocaml target_rep function has_switch = `Switches.has_switch`








