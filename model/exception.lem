open import Pervasives Utils

(* HACK: most of the inlines are only added to prevent Lem's renaming *)


type exceptM 'a 'msg =
  | Result of 'a
  | Exception of 'msg

let except_return a = Result a
let except_bind m k =
  match m with
    | Result a    -> k a
    | Exception s -> Exception s
  end

let rbind k m = except_bind m k

let throw m = Exception m
let fail = throw
let inline join m = except_bind m (fun x -> x)

val fmap: forall 'a 'b 'msg. ('a -> 'b) -> exceptM 'a 'msg -> exceptM 'b 'msg
let except_fmap f m = except_bind m (except_return -| f)


val app: forall 'a 'b 'msg. exceptM ('a -> 'b) 'msg -> exceptM 'a 'msg -> exceptM 'b 'msg
let inline app mf m = except_bind mf (fun f -> except_fmap f m)

let of_maybe m = function
  | Just a  -> except_return a
  | Nothing -> throw  m
  end

let to_bool = function
  | Result    _ -> true
  | Exception _ -> false
  end

module Operators = struct
  let inline (>>=)      = except_bind
  let inline (>>) m1 m2 = except_bind m1 (fun () -> m2)
  let inline (=<<)      = rbind
end

open Operators

(*
let inline map2 f mx my    = app (fmap f mx) my
let map3 f mx my mz = app (map2 f mx my) mz
*)

val sequence: forall 'a 'msg. list (exceptM 'a 'msg) -> exceptM (list 'a) 'msg
let inline sequence ms =
  foldr
    (fun m ms' ->
      m   >>= fun x  ->
      ms' >>= fun xs ->
      except_return (x::xs)
    ) (except_return []) ms

val listM: forall 'a 'b 'msg. ('a -> list (exceptM 'b 'msg)) -> 'a -> exceptM (list 'b) 'msg
let inline listM t xs = sequence (t xs)

val mapM: forall 'a 'b 'msg. ('a -> exceptM 'b 'msg) -> list 'a -> exceptM (list 'b) 'msg
let inline mapM f = listM (List.map f)


val     foldlM: forall 'a 'b 'msg. ('a -> 'b -> exceptM 'a 'msg) -> 'a -> list 'b -> exceptM 'a 'msg
let rec foldlM f a = function
  | [] ->
      except_return a
  | x::xs ->
      except_bind (f a x) (fun z -> foldlM f z xs)
end





(*
TODO[not used anymore]

let sequence_map mmap =
  Ocaml.Pmap.fold (fun k m mm->
    m  >>= fun x   ->
    mm >>= fun map ->
    return (Pmap.add k x map)
  ) mmap (return Pmap.empty)

let map_map f m = sequence_map (Ocaml.Pmap.map f m)
*)

let inj_right f (a, b) = f b >>= fun b' -> except_return (a, b')


(*
TODO[newLem] should use the Ord class instead

==> Seems unused

*)
let compare cmp cmp_msg a1 a2 =
  match (a1, a2) with
  | (Result r1, Result r2) -> cmp r1 r2
  | (Exception e1, Exception e2) -> cmp_msg e1 e2
  | (Result _, _) -> LT
  | (_, Result _) -> GT
  end

let bind_exception m k =
  match m with
    | Result a -> Result a
    | Exception s -> k s
  end

let rbind_exception k m = bind_exception m k




val guard: forall 'msg. bool -> 'msg -> exceptM unit 'msg
let guard pred err =
  if pred then
    except_return ()
  else
    fail err



val onException: forall 'a 'msg. exceptM 'a 'msg -> exceptM 'a 'msg -> exceptM 'a 'msg
let onException m1 m2 =
  match m1 with
    | Result z    -> Result z
    | Exception _ -> m2
  end


val     trysM: forall 'a 'b 'msg. 'msg -> ('a -> exceptM 'b 'msg) -> list 'a -> exceptM 'b 'msg
let rec trysM err f = function
  | [] ->
      throw err
  | [x] ->
      f x
  | x::xs ->
      match f x with
        | Result b ->
            Result b
        | Exception _ ->
            trysM err f xs
      end
end


(* HACK: the indirection is for the hand-written OCaml code *)
let inline return = except_return
let inline bind = except_bind
let inline fmap = except_fmap
