(* Concrete types and functions common to all memory layout models *)
open import Pervasives
import Symbolic

type mem_error =
  | MerrUnitialised of string (* mem_read_request *)
  | MerrInternal of string
  | MerrOther of string
  | MerrReadFromDead (* of string *)
  
  | MerrWIP of string

instance (Show mem_error)
  let show = function
    | MerrUnitialised str ->
        "MerrUnitialised \"" ^  str ^ "\""
    | MerrInternal str ->
        "MerrInternal \"" ^  str ^ "\""
    | MerrOther str ->
        "MerrOther \"" ^  str ^ "\""
    | MerrReadFromDead ->
        "MerrReadFromDead"
    | MerrWIP str ->
        "Memory WIP: " ^ str
  end
end



type integer_operator =
  | IntAdd
  | IntSub
  | IntMul
  | IntDiv
  | IntRem_t (* truncating remainder (this is % of C) *)
  | IntRem_f (* flooring remainder *)
  | IntExp


type pure_memop =
  | PURE_MEMOP_TODO

type memop =
  | PtrEq
  | PtrNe
  | PtrLt
  | PtrGt
  | PtrLe
  | PtrGe
(*  | PtrIsNull *)
  
  | Ptrdiff     (* (address, address) -> integer *)
  | IntFromPtr  (* (ctype, ctype, address) -> integer *) (* first type is that of the referenced type, second on is type of integer *)
  | PtrFromInt  (* (ctype, ctype, integer) -> address *) (* first type is that of integer, second on is type of reference *)
  | PtrValidForDeref (* address -> boolean *)


instance (Show memop)
  let show = function
    | PtrEq ->
        "ptreq"
    | PtrNe ->
        "ptrne"
    | PtrLt ->
        "ptrlt"
    | PtrGt ->
        "ptrgt"
    | PtrLe ->
        "ptrle"
    | PtrGe ->
        "ptrge"
    | Ptrdiff ->
        "ptrdiff"
    | IntFromPtr ->
        "intfromptr"
    | PtrFromInt ->
        "ptrfromint"
    | PtrValidForDeref ->
        "ptrvalidforderef"
  end
end



let stringFromInteger_operator = function
  | IntAdd ->
      "IntAdd"
  | IntSub ->
      "IntSub"
  | IntMul ->
      "IntMul"
  | IntDiv ->
      "IntDiv"
  | IntRem_t ->
      "IntRem_t"
  | IntRem_f ->
      "IntRem_f"
  | IntExp ->
      "IntExp"
end



(*


type pointer_shift =
(* TODO: bring back symbols *)
(*  list (Core_ctype.ctype * Symbolic.symbolic) *)
  list (Core_ctype.ctype * integer)


type pointer_value =
  | PVnull of Core_ctype.ctype
  | PVobject of object_id * pointer_shift
  | PVfunction of Symbol.t


type integer_value_operator =
  | IntAdd
  | IntSub
  | IntMul
  | IntDiv
  | IntMod
  | IntExp

type integer_value =
  | IVinteger of integer
  | IVsymbolic of Symbolic.symbolic (* possibly-symbolic integer value *)
  | IVptrdiff of pointer_value * pointer_value
  | IVintptr of pointer_value
  | IVop of integer_value_operator * integer_value * integer_value


type mem_value =
  | MVunspecified of Core_ctype.ctype (* this should only be used for base and union types *)
  | MVinteger of integer_value
  | MVfloating of string
  | MVpointer of pointer_value
  | MVarray of list mem_value (* TODO: list (maybe mem_value) *)
  | MVstruct of Symbol.t * list (Cabs.cabs_identifier * mem_value)
  | MVunion of Symbol.t * Cabs.cabs_identifier * mem_value (* the symbols are respectively the tag and the member *)


*)


type memory_flags = <|
  allow_multi_provenance: bool; (* allow Prov_some aids, where aids is not a singleton *)
  
|>


type memory_flag =
  | Allow_disjoint_alloc_tests (* allow (for example) pointer equality between different objects *)
