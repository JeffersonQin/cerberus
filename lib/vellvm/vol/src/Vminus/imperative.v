(* generated by Ott 0.20.1 from: syntax.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.

Require Import Metatheory.
Require Import syntax.
Require Import infrastructure.
Require Import ListSet.

Module VMitypings.
Import VMsyntax.
Import VMinfra.



(** definitions *)

(* defns Jwfi_insn *)
Inductive wfi_insn : fdef -> insn -> Prop :=    (* defn wfi_insn *)
 | wfi_insn_return : forall (fdef5:fdef) (id5:id) (value5:value),
     wfi_insn fdef5 (insn_terminator (insn_return id5 value5))
 | wfi_insn_br : forall (fdef5:fdef) (id5:id) (value5:value) (l1 l2:l) (block1 block2:block),
      lookupBlockViaLabelFromFdef  fdef5   l1  =   (Some  block1 )   ->
      lookupBlockViaLabelFromFdef  fdef5   l2  =   (Some  block2 )   ->
      (not (  (  l1  =  l2  )  ))  ->
     wfi_insn fdef5 (insn_terminator (insn_br id5 value5 l1 l2))
 | wfi_insn_uncond : forall (fdef5:fdef) (id5:id) (l5:l) (block5:block),
      lookupBlockViaLabelFromFdef  fdef5   l5  =   (Some  block5 )   ->
     wfi_insn fdef5 (insn_terminator (insn_br_uncond id5 l5))
 | wfi_insn_bop : forall (fdef5:fdef) (id5:id) (bop5:bop) (value1 value2:value),
     wfi_insn fdef5 (insn_cmd (insn_bop id5 bop5 value1 value2))
 | wfi_insn_icmp : forall (fdef5:fdef) (id5:id) (cond5:cond) (value1 value2:value),
     wfi_insn fdef5 (insn_cmd (insn_icmp id5 cond5 value1 value2)).
(** definitions *)

(* defns Jwfi_cmds *)
Inductive wfi_cmds : fdef -> cmds -> Prop :=    (* defn wfi_cmds *)
 | wfi_cmds_nil : forall (fdef5:fdef),
     wfi_cmds fdef5  nil 
 | wfi_cmds_cons : forall (fdef5:fdef) (cmd5:cmd) (cmds5:cmds),
     wfi_insn fdef5 (insn_cmd cmd5) ->
     wfi_cmds fdef5 cmds5 ->
     wfi_cmds fdef5  ( cmd5 :: cmds5 ) .
(** definitions *)

(* defns Jwfi_block *)
Inductive wfi_block : fdef -> block -> Prop :=    (* defn wfi_block *)
 | wfi_block_intro : forall (fdef5:fdef) (l5:l) (cmds5:cmds) (terminator5:terminator),
      blockInFdefB   (block_intro l5  nil  cmds5 terminator5)    fdef5  = true  ->
     wfi_cmds fdef5 cmds5 ->
     wfi_insn fdef5 (insn_terminator terminator5) ->
     wfi_block fdef5 (block_intro l5  nil  cmds5 terminator5).
(** definitions *)

(* defns Jwfi_blocks *)
Inductive wfi_blocks : fdef -> blocks -> Prop :=    (* defn wfi_blocks *)
 | wfi_blocks_nil : forall (fdef5:fdef),
     wfi_blocks fdef5  nil 
 | wfi_blocks_cons : forall (fdef5:fdef) (block5:block) (blocks5:blocks),
     wfi_block fdef5 block5 ->
     wfi_blocks fdef5 blocks5 ->
     wfi_blocks fdef5  ( block5 :: blocks5 ) .
(** definitions *)

(* defns Jwfi_fdef *)
Inductive wfi_fdef : fdef -> Prop :=    (* defn wfi_fdef *)
 | wfi_fdef_intro : forall (blocks5:blocks) (block5:block) (usedef_block5:usedef_block),
      getEntryBlock   (fdef_intro blocks5)   =   (Some  block5 )   ->
     genBlockUseDef_fdef (fdef_intro blocks5) = usedef_block5  ->
     hasNonePredecessor block5 usedef_block5 = true  ->
     wfi_blocks (fdef_intro blocks5) blocks5 ->
     wfi_fdef (fdef_intro blocks5).

End VMitypings.



(*
*** Local Variables: ***
*** coq-prog-name: "coqtop" ***
*** coq-prog-args: ("-emacs-U" "-I" "~/SVN/sol/vol/src/Vellvm/monads" "-I" "~/SVN/sol/vol/src/Vellvm/ott" "-I" "~/SVN/sol/vol/src/Vellvm/compcert" "-I" "~/SVN/sol/theory/metatheory_8.3") ***
*** End: ***
*)



