(* generated by Ott 0.20.1 from: syntax.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.

Require Import Metatheory.
Require Import syntax.
Require Import infrastructure.
Require Import ListSet.
Require Import analysis.
Require Import targetdata.

Module LLVMtypings.
Import LLVMsyntax.
Import LLVMinfra.




(* auxiliary list types for defns *)
Inductive
list_system_typ : Set :=
   Nil_list_system_typ : list_system_typ
 | Cons_list_system_typ : system -> typ -> list_system_typ -> list_system_typ.

Fixpoint map_list_system_typ (A:Set) (f:system->typ->A) (l0:list_system_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_system_typ => nil
  | Cons_list_system_typ h0 h1 tl_ => cons (f h0 h1) (map_list_system_typ A f tl_)
  end.
Implicit Arguments map_list_system_typ.

Fixpoint make_list_system_typ (l0:list (system*typ)) : list_system_typ :=
  match l0 with
  | nil  => Nil_list_system_typ
  | cons (h0,h1) tl_ => Cons_list_system_typ h0 h1 (make_list_system_typ tl_)
  end.

Fixpoint unmake_list_system_typ (l0:list_system_typ) :  list (system*typ) :=
  match l0 with
  | Nil_list_system_typ => nil
  | Cons_list_system_typ h0 h1 tl_ =>  cons (h0,h1) (unmake_list_system_typ tl_)
  end.

Fixpoint nth_list_system_typ (n:nat) (l0:list_system_typ) {struct n} : option (system*typ) :=
  match n,l0 with
  | O, Cons_list_system_typ h0 h1 tl_ => Some (h0,h1) 
  | O, other => None
  | S m, Nil_list_system_typ => None
  | S m, Cons_list_system_typ h0 h1 tl_ => nth_list_system_typ m tl_
  end.
Implicit Arguments nth_list_system_typ.

Fixpoint app_list_system_typ (l0 m:list_system_typ) {struct l0} : list_system_typ :=
  match l0 with
  | Nil_list_system_typ => m
  | Cons_list_system_typ h0 h1 tl_ => Cons_list_system_typ h0 h1 (app_list_system_typ tl_ m)
  end.


(** definitions *)

(* defns Jwf_typ *)
Inductive wf_typ : system -> typ -> Prop :=    (* defn wf_typ *)
 | wf_typ_int : forall (system5:system) (sz5:sz),
      (Size.gt  sz5  Size.Zero)  ->
     wf_typ system5 (typ_int sz5)
 | wf_typ_float : forall (system5:system),
     wf_typ system5 (typ_floatpoint fp_float)
 | wf_typ_double : forall (system5:system),
     wf_typ system5 (typ_floatpoint fp_double)
 | wf_typ_void : forall (system5:system),
     wf_typ system5 typ_void
 | wf_typ_label : forall (system5:system),
     wf_typ system5 typ_label
 | wf_typ_metadate : forall (system5:system),
     wf_typ system5 typ_metadata
 | wf_typ_opaque : forall (system5:system),
     wf_typ system5 typ_opaque
 | wf_typ_function : forall (typ_list:list_typ) (system5:system) (typ_5:typ) (varg5:varg),
      isValidReturnTyp  typ_5  ->
     wf_typ system5 typ_5 ->
     (isValidArgumentTyp_list typ_list) ->
     (wf_typ_list (make_list_system_typ (map_list_typ (fun (typ_:typ) => (system5,typ_)) typ_list))) ->
     wf_typ system5 (typ_function typ_5 typ_list varg5)
 | wf_typ_structure : forall (typ_list:list_typ) (system5:system),
     (isValidElementTyp_list typ_list) ->
     (wf_typ_list (make_list_system_typ (map_list_typ (fun (typ_:typ) => (system5,typ_)) typ_list))) ->
     wf_typ system5 (typ_struct typ_list)
 | wf_typ_array : forall (system5:system) (sz5:sz) (typ5:typ),
     wf_typ system5 typ5 ->
      isValidElementTyp  typ5  ->
     wf_typ system5 (typ_array sz5 typ5)
 | wf_typ_pointer : forall (system5:system) (typ5:typ),
     wf_typ system5 typ5 ->
      isValidElementTyp  typ5  ->
     wf_typ system5 (typ_pointer typ5)
 | wf_typ_namedt : forall (system5:system) (id5:id) (opt_typ5:opt_typ),
      lookupTypViaTIDFromSystem  system5   id5  =  opt_typ5  ->
     wf_typ system5 (typ_namedt id5)
with isValidArgumentTyp_list : list_typ -> Prop :=
 | Nil_isValidArgumentTyp_list : isValidArgumentTyp_list Nil_list_typ
 | Cons_isValidArgumentTyp_list : forall (typ_:typ) (l':list_typ),
      ( isValidArgumentTyp  typ_ ) -> isValidArgumentTyp_list l' ->
      isValidArgumentTyp_list (Cons_list_typ typ_ l')
with wf_typ_list : list_system_typ -> Prop :=
 | Nil_wf_typ_list : wf_typ_list Nil_list_system_typ
 | Cons_wf_typ_list : forall (system5:system) (typ_:typ) (l':list_system_typ),
      ((wf_typ system5 typ_)) -> wf_typ_list l' ->
      wf_typ_list (Cons_list_system_typ system5 typ_ l')
with isValidElementTyp_list : list_typ -> Prop :=
 | Nil_isValidElementTyp_list : isValidElementTyp_list Nil_list_typ
 | Cons_isValidElementTyp_list : forall (typ_:typ) (l':list_typ),
      ( isValidElementTyp  typ_ ) -> isValidElementTyp_list l' ->
      isValidElementTyp_list (Cons_list_typ typ_ l').
(** definitions *)

(* defns Jfeasible_typ *)
Inductive feasible_typ : targetdata -> typ -> Prop :=    (* defn feasible_typ *)
 | feasible_typ_intro : forall (targetdata5:targetdata) (typ5:typ),
     LLVMtd.feasible_typ targetdata5 typ5  ->
     feasible_typ targetdata5 typ5.

(* auxiliary list types for defns *)
Inductive
list_const_typ : Set :=
   Nil_list_const_typ : list_const_typ
 | Cons_list_const_typ : const -> typ -> list_const_typ -> list_const_typ.

Fixpoint map_list_const_typ (A:Set) (f:const->typ->A) (l0:list_const_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_const_typ => nil
  | Cons_list_const_typ h0 h1 tl_ => cons (f h0 h1) (map_list_const_typ A f tl_)
  end.
Implicit Arguments map_list_const_typ.

Fixpoint make_list_const_typ (l0:list (const*typ)) : list_const_typ :=
  match l0 with
  | nil  => Nil_list_const_typ
  | cons (h0,h1) tl_ => Cons_list_const_typ h0 h1 (make_list_const_typ tl_)
  end.

Fixpoint unmake_list_const_typ (l0:list_const_typ) :  list (const*typ) :=
  match l0 with
  | Nil_list_const_typ => nil
  | Cons_list_const_typ h0 h1 tl_ =>  cons (h0,h1) (unmake_list_const_typ tl_)
  end.

Fixpoint nth_list_const_typ (n:nat) (l0:list_const_typ) {struct n} : option (const*typ) :=
  match n,l0 with
  | O, Cons_list_const_typ h0 h1 tl_ => Some (h0,h1) 
  | O, other => None
  | S m, Nil_list_const_typ => None
  | S m, Cons_list_const_typ h0 h1 tl_ => nth_list_const_typ m tl_
  end.
Implicit Arguments nth_list_const_typ.

Fixpoint app_list_const_typ (l0 m:list_const_typ) {struct l0} : list_const_typ :=
  match l0 with
  | Nil_list_const_typ => m
  | Cons_list_const_typ h0 h1 tl_ => Cons_list_const_typ h0 h1 (app_list_const_typ tl_ m)
  end.


Inductive
list_targetdata_typ : Set :=
   Nil_list_targetdata_typ : list_targetdata_typ
 | Cons_list_targetdata_typ : targetdata -> typ -> list_targetdata_typ -> list_targetdata_typ.

Fixpoint map_list_targetdata_typ (A:Set) (f:targetdata->typ->A) (l0:list_targetdata_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_targetdata_typ => nil
  | Cons_list_targetdata_typ h0 h1 tl_ => cons (f h0 h1) (map_list_targetdata_typ A f tl_)
  end.
Implicit Arguments map_list_targetdata_typ.

Fixpoint make_list_targetdata_typ (l0:list (targetdata*typ)) : list_targetdata_typ :=
  match l0 with
  | nil  => Nil_list_targetdata_typ
  | cons (h0,h1) tl_ => Cons_list_targetdata_typ h0 h1 (make_list_targetdata_typ tl_)
  end.

Fixpoint unmake_list_targetdata_typ (l0:list_targetdata_typ) :  list (targetdata*typ) :=
  match l0 with
  | Nil_list_targetdata_typ => nil
  | Cons_list_targetdata_typ h0 h1 tl_ =>  cons (h0,h1) (unmake_list_targetdata_typ tl_)
  end.

Fixpoint nth_list_targetdata_typ (n:nat) (l0:list_targetdata_typ) {struct n} : option (targetdata*typ) :=
  match n,l0 with
  | O, Cons_list_targetdata_typ h0 h1 tl_ => Some (h0,h1) 
  | O, other => None
  | S m, Nil_list_targetdata_typ => None
  | S m, Cons_list_targetdata_typ h0 h1 tl_ => nth_list_targetdata_typ m tl_
  end.
Implicit Arguments nth_list_targetdata_typ.

Fixpoint app_list_targetdata_typ (l0 m:list_targetdata_typ) {struct l0} : list_targetdata_typ :=
  match l0 with
  | Nil_list_targetdata_typ => m
  | Cons_list_targetdata_typ h0 h1 tl_ => Cons_list_targetdata_typ h0 h1 (app_list_targetdata_typ tl_ m)
  end.


Inductive
list_system_targetdata_const_typ : Set :=
   Nil_list_system_targetdata_const_typ : list_system_targetdata_const_typ
 | Cons_list_system_targetdata_const_typ : system -> targetdata -> const -> typ -> list_system_targetdata_const_typ -> list_system_targetdata_const_typ.

Fixpoint map_list_system_targetdata_const_typ (A:Set) (f:system->targetdata->const->typ->A) (l0:list_system_targetdata_const_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_system_targetdata_const_typ => nil
  | Cons_list_system_targetdata_const_typ h0 h1 h2 h3 tl_ => cons (f h0 h1 h2 h3) (map_list_system_targetdata_const_typ A f tl_)
  end.
Implicit Arguments map_list_system_targetdata_const_typ.

Fixpoint make_list_system_targetdata_const_typ (l0:list (system*targetdata*const*typ)) : list_system_targetdata_const_typ :=
  match l0 with
  | nil  => Nil_list_system_targetdata_const_typ
  | cons (h0,h1,h2,h3) tl_ => Cons_list_system_targetdata_const_typ h0 h1 h2 h3 (make_list_system_targetdata_const_typ tl_)
  end.

Fixpoint unmake_list_system_targetdata_const_typ (l0:list_system_targetdata_const_typ) :  list (system*targetdata*const*typ) :=
  match l0 with
  | Nil_list_system_targetdata_const_typ => nil
  | Cons_list_system_targetdata_const_typ h0 h1 h2 h3 tl_ =>  cons (h0,h1,h2,h3) (unmake_list_system_targetdata_const_typ tl_)
  end.

Fixpoint nth_list_system_targetdata_const_typ (n:nat) (l0:list_system_targetdata_const_typ) {struct n} : option (system*targetdata*const*typ) :=
  match n,l0 with
  | O, Cons_list_system_targetdata_const_typ h0 h1 h2 h3 tl_ => Some (h0,h1,h2,h3) 
  | O, other => None
  | S m, Nil_list_system_targetdata_const_typ => None
  | S m, Cons_list_system_targetdata_const_typ h0 h1 h2 h3 tl_ => nth_list_system_targetdata_const_typ m tl_
  end.
Implicit Arguments nth_list_system_targetdata_const_typ.

Fixpoint app_list_system_targetdata_const_typ (l0 m:list_system_targetdata_const_typ) {struct l0} : list_system_targetdata_const_typ :=
  match l0 with
  | Nil_list_system_targetdata_const_typ => m
  | Cons_list_system_targetdata_const_typ h0 h1 h2 h3 tl_ => Cons_list_system_targetdata_const_typ h0 h1 h2 h3 (app_list_system_targetdata_const_typ tl_ m)
  end.


(** definitions *)

(* defns Jwf_const *)
Inductive wf_const : system -> targetdata -> const -> typ -> Prop :=    (* defn wf_const *)
 | wf_const_zeroinitializer : forall (system5:system) (targetdata5:targetdata) (typ5:typ),
     wf_typ system5 typ5 ->
     Constant.wf_zeroconst_typ typ5  ->
     wf_const system5 targetdata5 (const_zeroinitializer typ5) typ5
 | wf_const_int : forall (system5:system) (targetdata5:targetdata) (sz5:sz) (Int5:Int),
     wf_typ system5 (typ_int sz5) ->
      (Size.gt  sz5  Size.Zero)  ->
     feasible_typ targetdata5 (typ_int sz5) ->
     wf_const system5 targetdata5 (const_int sz5 Int5) (typ_int sz5)
 | wf_const_floatpoint : forall (system5:system) (targetdata5:targetdata) (floating_point5:floating_point) (Float5:Float) (typ5:typ),
     wf_typ system5 (typ_floatpoint floating_point5) ->
     feasible_typ targetdata5 typ5 ->
     wf_const system5 targetdata5 (const_floatpoint floating_point5 Float5) (typ_floatpoint floating_point5)
 | wf_const_undef : forall (system5:system) (targetdata5:targetdata) (typ5:typ),
     wf_typ system5 typ5 ->
     wf_const system5 targetdata5 (const_undef typ5) typ5
 | wf_const_null : forall (system5:system) (targetdata5:targetdata) (typ5:typ),
     wf_typ system5 (typ_pointer typ5) ->
     wf_const system5 targetdata5 (const_null typ5) (typ_pointer typ5)
 | wf_const_arr : forall (const_list:list_const) (system5:system) (targetdata5:targetdata) (typ5:typ) (sz5:sz),
     (wf_const_list (make_list_system_targetdata_const_typ (map_list_const (fun (const_:const) => (system5,targetdata5,const_,typ5)) const_list))) ->
      length (unmake_list_const  const_list ) = Size.to_nat sz5  ->
     wf_const system5 targetdata5 (const_arr typ5 const_list) (typ_array sz5 typ5)
 | wf_const_struct : forall (const_typ_list:list_const_typ) (system5:system) (targetdata5:targetdata),
     (wf_const_list (make_list_system_targetdata_const_typ (map_list_const_typ (fun (const_:const) (typ_:typ) => (system5,targetdata5,const_,typ_)) const_typ_list))) ->
     (feasible_typ_list (make_list_targetdata_typ (map_list_const_typ (fun (const_:const) (typ_:typ) => (targetdata5,typ_)) const_typ_list))) ->
     wf_const system5 targetdata5 (const_struct (make_list_const (map_list_const_typ (fun (const_:const) (typ_:typ) => const_) const_typ_list))) (typ_struct (make_list_typ (map_list_const_typ (fun (const_:const) (typ_:typ) => typ_) const_typ_list)))
 | wf_const_gid : forall (system5:system) (targetdata5:targetdata) (typ5:typ) (id5:id),
     wf_typ system5 (typ_pointer typ5) ->
      lookupTypViaGIDFromSystem  system5   id5  =   (Some  (typ_pointer typ5) )   ->
     Constant.unifiable_typ targetdata5 typ5  ->
     wf_const system5 targetdata5 (const_gid typ5 id5) (typ_pointer typ5)
 | wf_const_trunc_int : forall (system5:system) (targetdata5:targetdata) (const5:const) (sz2 sz1:sz),
     wf_const system5 targetdata5 const5 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
      (Size.lt  sz2   sz1 )  ->
     feasible_typ targetdata5 (typ_int sz1) ->
     wf_const system5 targetdata5 (const_truncop truncop_int const5  (typ_int sz2) ) (typ_int sz2)
 | wf_const_trunc_fp : forall (system5:system) (targetdata5:targetdata) (const5:const) (floating_point2 floating_point1:floating_point),
     wf_const system5 targetdata5 const5 (typ_floatpoint floating_point1) ->
      floating_point_order  floating_point2   floating_point1  = true  ->
     feasible_typ targetdata5 (typ_floatpoint floating_point1) ->
     wf_typ system5 (typ_floatpoint floating_point2) ->
     wf_const system5 targetdata5 (const_truncop truncop_int const5 (typ_floatpoint floating_point2)) (typ_floatpoint floating_point2)
 | wf_const_zext : forall (system5:system) (targetdata5:targetdata) (const5:const) (sz2 sz1:sz),
     wf_const system5 targetdata5 const5 (typ_int sz1) ->
     feasible_typ targetdata5 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
      (Size.lt  sz1   sz2 )  ->
     wf_const system5 targetdata5 (const_extop extop_z const5  (typ_int sz2) ) (typ_int sz2)
 | wf_const_sext : forall (system5:system) (targetdata5:targetdata) (const5:const) (sz2 sz1:sz),
     wf_const system5 targetdata5 const5 (typ_int sz1) ->
     feasible_typ targetdata5 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
      (Size.lt  sz1   sz2 )  ->
     wf_const system5 targetdata5 (const_extop extop_s const5  (typ_int sz2) ) (typ_int sz2)
 | wf_const_fpext : forall (system5:system) (targetdata5:targetdata) (const5:const) (floating_point2 floating_point1:floating_point),
     wf_const system5 targetdata5 const5 (typ_floatpoint floating_point1) ->
      floating_point_order  floating_point1   floating_point2  = true  ->
     feasible_typ targetdata5 (typ_floatpoint floating_point1) ->
     wf_typ system5 (typ_floatpoint floating_point2) ->
     wf_const system5 targetdata5 (const_extop extop_fp const5 (typ_floatpoint floating_point2)) (typ_floatpoint floating_point2)
 | wf_const_ptrtoint : forall (system5:system) (targetdata5:targetdata) (const5:const) (sz5:sz) (typ5:typ),
     wf_const system5 targetdata5 const5 (typ_pointer typ5) ->
     feasible_typ targetdata5 (typ_pointer typ5) ->
     wf_typ system5 (typ_int sz5) ->
     wf_const system5 targetdata5 (const_castop castop_ptrtoint const5  (typ_int sz5) ) (typ_int sz5)
 | wf_const_inttoptr : forall (system5:system) (targetdata5:targetdata) (const5:const) (typ5:typ) (sz5:sz),
     wf_const system5 targetdata5 const5 (typ_int sz5) ->
     feasible_typ targetdata5 (typ_int sz5) ->
     wf_typ system5 (typ_pointer typ5) ->
     wf_const system5 targetdata5 (const_castop castop_inttoptr const5  (typ_pointer typ5) ) (typ_pointer typ5)
 | wf_const_bitcast : forall (system5:system) (targetdata5:targetdata) (const5:const) (typ2 typ1:typ),
     wf_const system5 targetdata5 const5 (typ_pointer typ1) ->
     feasible_typ targetdata5 (typ_pointer typ1) ->
     wf_typ system5 (typ_pointer typ2) ->
     wf_const system5 targetdata5 (const_castop castop_bitcast const5 (typ_pointer typ2)) (typ_pointer typ2)
 | wf_const_gep : forall (const_list:list_const) (system5:system) (targetdata5:targetdata) (inbounds5:inbounds) (const_5:const) (typ' typ5 typ'':typ),
     wf_const system5 targetdata5 const_5 (typ_pointer typ5) ->
     feasible_typ targetdata5 (typ_pointer typ5) ->
     (wf_const_list (make_list_system_targetdata_const_typ (map_list_const (fun (const_:const) => (system5,targetdata5,const_,typ'')) const_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
      getConstGEPTyp  const_list    (typ_pointer typ5)   =   (Some  typ' )   ->
     wf_typ system5 typ' ->
     wf_const system5 targetdata5 (const_gep inbounds5 const_5 const_list) typ'
 | wf_const_select : forall (system5:system) (targetdata5:targetdata) (const0 const1 const2:const) (typ5:typ) (sz5:sz),
     wf_const system5 targetdata5 const0 (typ_int sz5) ->
      sz5  = Size.One  ->
     wf_const system5 targetdata5 const1 typ5 ->
     wf_const system5 targetdata5 const2 typ5 ->
     feasible_typ targetdata5 (typ_int sz5) ->
     wf_const system5 targetdata5 (const_select const0 const1 const2) typ5
 | wf_const_icmp : forall (system5:system) (targetdata5:targetdata) (cond5:cond) (const1 const2:const) (sz5:sz) (typ5:typ),
     wf_const system5 targetdata5 const1 typ5 ->
     wf_const system5 targetdata5 const2 typ5 ->
     feasible_typ targetdata5 typ5 ->
       Typ.isIntOrIntVector  typ5   \/   isPointerTyp  typ5   ->
     feasible_typ targetdata5 (typ_int sz5) ->
      sz5  = Size.One  ->
     wf_const system5 targetdata5 (const_icmp cond5 const1 const2) (typ_int sz5)
 | wf_const_fcmp : forall (system5:system) (targetdata5:targetdata) (fcond5:fcond) (const1 const2:const) (sz5:sz) (floating_point5:floating_point),
     wf_fcond fcond5 = true  ->
     wf_const system5 targetdata5 const1 (typ_floatpoint floating_point5) ->
     wf_const system5 targetdata5 const2 (typ_floatpoint floating_point5) ->
     feasible_typ targetdata5 (typ_floatpoint floating_point5) ->
     feasible_typ targetdata5 (typ_int sz5) ->
      sz5  = Size.One  ->
     wf_typ system5 (typ_floatpoint floating_point5) ->
     wf_const system5 targetdata5 (const_fcmp fcond5 const1 const2) (typ_int sz5)
 | wf_const_extractvalue : forall (const_list:list_const) (system5:system) (targetdata5:targetdata) (const_5:const) (typ' typ5 typ'':typ),
     wf_const system5 targetdata5 const_5 typ5 ->
     feasible_typ targetdata5 typ5 ->
     (wf_const_list (make_list_system_targetdata_const_typ (map_list_const (fun (const_:const) => (system5,targetdata5,const_,typ'')) const_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
     feasible_typ targetdata5 typ'' ->
      (exists idxs, exists o, intConsts2Nats  targetdata5   const_list  = Some idxs /\ mgetoffset  targetdata5   typ5  idxs = Some (o,  typ' ))  ->
     wf_typ system5 typ' ->
     wf_const system5 targetdata5 (const_extractvalue const_5 const_list) typ'
 | wf_const_insertvalue : forall (const_list:list_const) (system5:system) (targetdata5:targetdata) (const_5 const':const) (typ5 typ' typ'':typ),
     wf_const system5 targetdata5 const_5 typ5 ->
     wf_const system5 targetdata5 const' typ' ->
     feasible_typ targetdata5 typ' ->
     (wf_const_list (make_list_system_targetdata_const_typ (map_list_const (fun (const_:const) => (system5,targetdata5,const_,typ'')) const_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
     feasible_typ targetdata5 typ'' ->
      (exists idxs, exists o, intConsts2Nats  targetdata5   const_list  = Some idxs /\ mgetoffset  targetdata5   typ5  idxs = Some (o,  typ' ))  ->
     wf_typ system5 typ5 ->
     wf_const system5 targetdata5 (const_insertvalue const_5 const' const_list) typ5
 | wf_const_bop : forall (system5:system) (targetdata5:targetdata) (bop5:bop) (const1 const2:const) (sz5:sz),
     wf_const system5 targetdata5 const1 (typ_int sz5) ->
     wf_const system5 targetdata5 const2 (typ_int sz5) ->
     wf_typ system5 (typ_int sz5) ->
     wf_const system5 targetdata5 (const_bop bop5 const1 const2) (typ_int sz5)
 | wf_const_fbop : forall (system5:system) (targetdata5:targetdata) (fbop5:fbop) (const1 const2:const) (floating_point5:floating_point),
     wf_const system5 targetdata5 const1 (typ_floatpoint floating_point5) ->
     wf_const system5 targetdata5 const2 (typ_floatpoint floating_point5) ->
     wf_typ system5 (typ_floatpoint floating_point5) ->
     wf_const system5 targetdata5 (const_fbop fbop5 const1 const2) (typ_floatpoint floating_point5)
with wf_const_list : list_system_targetdata_const_typ -> Prop :=
 | Nil_wf_const_list : wf_const_list Nil_list_system_targetdata_const_typ
 | Cons_wf_const_list : forall (system5:system) (targetdata5:targetdata) (const_:const) (typ5:typ) (l':list_system_targetdata_const_typ),
      ((wf_const system5 targetdata5 const_ typ5)) -> wf_const_list l' ->
      wf_const_list (Cons_list_system_targetdata_const_typ system5 targetdata5 const_ typ5 l')
with feasible_typ_list : list_targetdata_typ -> Prop :=
 | Nil_feasible_typ_list : feasible_typ_list Nil_list_targetdata_typ
 | Cons_feasible_typ_list : forall (targetdata5:targetdata) (typ_:typ) (l':list_targetdata_typ),
      ((feasible_typ targetdata5 typ_)) -> feasible_typ_list l' ->
      feasible_typ_list (Cons_list_targetdata_typ targetdata5 typ_ l').
(** definitions *)

(* defns Jwf_value *)
Inductive wf_value : system -> module -> fdef -> value -> typ -> Prop :=    (* defn wf_value *)
 | wf_value_const : forall (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (const5:const) (typ5:typ),
     wf_const system5   ( layouts5 , namedts5 )   const5 typ5 ->
     feasible_typ   ( layouts5 , namedts5 )   typ5 ->
     wf_typ system5 typ5 ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 (value_const const5) typ5
 | wf_value_id : forall (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (id5:id) (typ5:typ),
     wf_typ system5 typ5 ->
     feasible_typ   ( layouts5 , namedts5 )   typ5 ->
      lookupTypViaIDFromFdef  fdef5   id5  =   (Some  typ5 )   ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 (value_id id5) typ5.
(** definitions *)

(* defns Jwf_operand *)
Inductive wf_operand : fdef -> block -> insn -> id -> Prop :=    (* defn wf_operand *)
 | wf_operand_intro : forall (fdef5:fdef) (block5:block) (insn5:insn) (id':id) (ids5:ids) (block':block),
      insnInFdefBlockB  insn5   fdef5   block5  = true  ->
      getInsnOperands  insn5  =  ids5  ->
      ( set_In  id'   ids5 )  ->
      lookupBlockViaIDFromFdef  fdef5   id'  =   (Some  block' )   ->
      (notT (  isPhiNode  insn5  ))  ->
      (    insnDominates  id'   insn5   block5   \/   blockStrictDominates  fdef5   block'   block5    \/   (  (not (  (  isReachableFromEntry  fdef5   block5  )  ))  )   )  ->
     wf_operand fdef5 block5 insn5 id'.

(* auxiliary list types for defns *)
Inductive
list_id : Set :=
   Nil_list_id : list_id
 | Cons_list_id : id -> list_id -> list_id.

Fixpoint map_list_id (A:Set) (f:id->A) (l0:list_id) {struct l0} : list A :=
  match l0 with
  | Nil_list_id => nil
  | Cons_list_id h tl_ => cons (f h) (map_list_id A f tl_)
  end.
Implicit Arguments map_list_id.

Fixpoint make_list_id (l0:list id) : list_id :=
  match l0 with
  | nil  => Nil_list_id
  | cons h tl_ => Cons_list_id h (make_list_id tl_)
  end.

Fixpoint unmake_list_id (l0:list_id) :  list id :=
  match l0 with
  | Nil_list_id => nil
  | Cons_list_id h tl_ =>  cons h (unmake_list_id tl_)
  end.

Fixpoint nth_list_id (n:nat) (l0:list_id) {struct n} : option id :=
  match n,l0 with
  | O, Cons_list_id h tl_ => Some h 
  | O, other => None
  | S m, Nil_list_id => None
  | S m, Cons_list_id h tl_ => nth_list_id m tl_
  end.
Implicit Arguments nth_list_id.

Fixpoint app_list_id (l0 m:list_id) {struct l0} : list_id :=
  match l0 with
  | Nil_list_id => m
  | Cons_list_id h tl_ => Cons_list_id h (app_list_id tl_ m)
  end.


Inductive
list_fdef_block_insn_id : Set :=
   Nil_list_fdef_block_insn_id : list_fdef_block_insn_id
 | Cons_list_fdef_block_insn_id : fdef -> block -> insn -> id -> list_fdef_block_insn_id -> list_fdef_block_insn_id.

Fixpoint map_list_fdef_block_insn_id (A:Set) (f:fdef->block->insn->id->A) (l0:list_fdef_block_insn_id) {struct l0} : list A :=
  match l0 with
  | Nil_list_fdef_block_insn_id => nil
  | Cons_list_fdef_block_insn_id h0 h1 h2 h3 tl_ => cons (f h0 h1 h2 h3) (map_list_fdef_block_insn_id A f tl_)
  end.
Implicit Arguments map_list_fdef_block_insn_id.

Fixpoint make_list_fdef_block_insn_id (l0:list (fdef*block*insn*id)) : list_fdef_block_insn_id :=
  match l0 with
  | nil  => Nil_list_fdef_block_insn_id
  | cons (h0,h1,h2,h3) tl_ => Cons_list_fdef_block_insn_id h0 h1 h2 h3 (make_list_fdef_block_insn_id tl_)
  end.

Fixpoint unmake_list_fdef_block_insn_id (l0:list_fdef_block_insn_id) :  list (fdef*block*insn*id) :=
  match l0 with
  | Nil_list_fdef_block_insn_id => nil
  | Cons_list_fdef_block_insn_id h0 h1 h2 h3 tl_ =>  cons (h0,h1,h2,h3) (unmake_list_fdef_block_insn_id tl_)
  end.

Fixpoint nth_list_fdef_block_insn_id (n:nat) (l0:list_fdef_block_insn_id) {struct n} : option (fdef*block*insn*id) :=
  match n,l0 with
  | O, Cons_list_fdef_block_insn_id h0 h1 h2 h3 tl_ => Some (h0,h1,h2,h3) 
  | O, other => None
  | S m, Nil_list_fdef_block_insn_id => None
  | S m, Cons_list_fdef_block_insn_id h0 h1 h2 h3 tl_ => nth_list_fdef_block_insn_id m tl_
  end.
Implicit Arguments nth_list_fdef_block_insn_id.

Fixpoint app_list_fdef_block_insn_id (l0 m:list_fdef_block_insn_id) {struct l0} : list_fdef_block_insn_id :=
  match l0 with
  | Nil_list_fdef_block_insn_id => m
  | Cons_list_fdef_block_insn_id h0 h1 h2 h3 tl_ => Cons_list_fdef_block_insn_id h0 h1 h2 h3 (app_list_fdef_block_insn_id tl_ m)
  end.


(** definitions *)

(* defns Jwf_insn_base *)
Inductive wf_insn_base : fdef -> block -> insn -> Prop :=    (* defn wf_insn_base *)
 | wf_insn_base_intro : forall (id_list:list_id) (fdef5:fdef) (block5:block) (insn5:insn) (typ5 typ':typ) (ids5:ids),
      insnInFdefBlockB  insn5   fdef5   block5  = true  ->
      getInsnTyp  insn5  =   (Some  typ5 )   ->
       typEqB  typ5   typ_void  = true   \/   isFirstClassTyp  typ5   ->
       (  (not (  typEqB  typ5   typ_metadata  = true  ))  )   \/   isCallInsnB  insn5  = true   ->
      (  (  isPointerTyp  typ5  )   ->   (   getPointerEltTyp  typ5  =   (Some  typ' )    /\   (  (not (  typEqB  typ'   typ_metadata  = true  ))  )   )  )  ->
      getInsnOperands  insn5  =  ids5  ->
      ids5  = unmake_list_id  id_list  ->
     (wf_operand_list (make_list_fdef_block_insn_id (map_list_id (fun (id_:id) => (fdef5,block5,insn5,id_)) id_list))) ->
     wf_insn_base fdef5 block5 insn5
with wf_operand_list : list_fdef_block_insn_id -> Prop :=
 | Nil_wf_operand_list : wf_operand_list Nil_list_fdef_block_insn_id
 | Cons_wf_operand_list : forall (fdef5:fdef) (block5:block) (insn5:insn) (id_:id) (l':list_fdef_block_insn_id),
      ((wf_operand fdef5 block5 insn5 id_)) -> wf_operand_list l' ->
      wf_operand_list (Cons_list_fdef_block_insn_id fdef5 block5 insn5 id_ l').
(** definitions *)

(* defns Jwf_cast *)
Inductive wf_cast : intrinsic_funs -> system -> module -> fdef -> block -> insn -> Prop :=    (* defn wf_cast *)
 | wf_cast_ptrtoint : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value1:value) (sz5:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_pointer typ5) ->
     wf_typ system5 (typ_int sz5) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_int sz5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_cast id5 castop_ptrtoint  (typ_pointer typ5)  value1  (typ_int sz5) )) ->
     wf_cast intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_cast id5 castop_ptrtoint  (typ_pointer typ5)  value1  (typ_int sz5) ))
 | wf_cast_inttoptr : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (sz5:sz) (value1:value) (typ5:typ),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_int sz5) ->
     wf_typ system5 (typ_pointer typ5) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_pointer typ5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_cast id5 castop_inttoptr  (typ_int sz5)  value1  (typ_pointer typ5) )) ->
     wf_cast intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_cast id5 castop_inttoptr  (typ_int sz5)  value1  (typ_pointer typ5) ))
 | wf_cast_bitcast : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ1:typ) (value1:value) (typ2:typ),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_pointer typ1) ->
     wf_typ system5 (typ_pointer typ2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_pointer typ2) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_cast id5 castop_bitcast (typ_pointer typ1) value1 (typ_pointer typ2))) ->
     wf_typ system5 (typ_pointer typ2) ->
     wf_cast intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_cast id5 castop_bitcast (typ_pointer typ1) value1 (typ_pointer typ2))).
(** definitions *)

(* defns Jwf_trunc *)
Inductive wf_trunc : intrinsic_funs -> system -> module -> fdef -> block -> insn -> Prop :=    (* defn wf_trunc *)
 | wf_trunc_int : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (sz1:sz) (value1:value) (sz2:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_int sz2) ->
      (Size.lt  sz2   sz1 )  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_trunc id5 truncop_int  (typ_int sz1)  value1  (typ_int sz2) )) ->
     wf_trunc intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_trunc id5 truncop_int  (typ_int sz1)  value1  (typ_int sz2) ))
 | wf_trunc_fp : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (floating_point1:floating_point) (value1:value) (floating_point2:floating_point),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_floatpoint floating_point1) ->
     wf_typ system5 (typ_floatpoint floating_point2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_floatpoint floating_point2) ->
      floating_point_order  floating_point2   floating_point1  = true  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_trunc id5 truncop_fp (typ_floatpoint floating_point1) value1 (typ_floatpoint floating_point2))) ->
     wf_typ system5 (typ_floatpoint floating_point2) ->
     wf_trunc intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_trunc id5 truncop_fp (typ_floatpoint floating_point1) value1 (typ_floatpoint floating_point2))).
(** definitions *)

(* defns Jwf_ext *)
Inductive wf_ext : intrinsic_funs -> system -> module -> fdef -> block -> insn -> Prop :=    (* defn wf_ext *)
 | wf_ext_z : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (sz1:sz) (value1:value) (sz2:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_int sz2) ->
      (Size.lt  sz1   sz2 )  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_ext id5 extop_z  (typ_int sz1)  value1  (typ_int sz2) )) ->
     wf_ext intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_ext id5 extop_z  (typ_int sz1)  value1  (typ_int sz2) ))
 | wf_ext_s : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (sz1:sz) (value1:value) (sz2:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_int sz1) ->
     wf_typ system5 (typ_int sz2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_int sz2) ->
      (Size.lt  sz1   sz2 )  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_ext id5 extop_s  (typ_int sz1)  value1  (typ_int sz2) )) ->
     wf_ext intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_ext id5 extop_s  (typ_int sz1)  value1  (typ_int sz2) ))
 | wf_ext_fp : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (floating_point1:floating_point) (value1:value) (floating_point2:floating_point),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_floatpoint floating_point1) ->
     wf_typ system5 (typ_floatpoint floating_point2) ->
     feasible_typ   ( layouts5 , namedts5 )   (typ_floatpoint floating_point2) ->
      floating_point_order  floating_point1   floating_point2  = true  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_ext id5 extop_fp (typ_floatpoint floating_point1) value1 (typ_floatpoint floating_point2))) ->
     wf_ext intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_ext id5 extop_fp (typ_floatpoint floating_point1) value1 (typ_floatpoint floating_point2))).

(* auxiliary list types for defns *)
Inductive
list_typ_attributes_value : Set :=
   Nil_list_typ_attributes_value : list_typ_attributes_value
 | Cons_list_typ_attributes_value : typ -> attributes -> value -> list_typ_attributes_value -> list_typ_attributes_value.

Fixpoint map_list_typ_attributes_value (A:Set) (f:typ->attributes->value->A) (l0:list_typ_attributes_value) {struct l0} : list A :=
  match l0 with
  | Nil_list_typ_attributes_value => nil
  | Cons_list_typ_attributes_value h0 h1 h2 tl_ => cons (f h0 h1 h2) (map_list_typ_attributes_value A f tl_)
  end.
Implicit Arguments map_list_typ_attributes_value.

Fixpoint make_list_typ_attributes_value (l0:list (typ*attributes*value)) : list_typ_attributes_value :=
  match l0 with
  | nil  => Nil_list_typ_attributes_value
  | cons (h0,h1,h2) tl_ => Cons_list_typ_attributes_value h0 h1 h2 (make_list_typ_attributes_value tl_)
  end.

Fixpoint unmake_list_typ_attributes_value (l0:list_typ_attributes_value) :  list (typ*attributes*value) :=
  match l0 with
  | Nil_list_typ_attributes_value => nil
  | Cons_list_typ_attributes_value h0 h1 h2 tl_ =>  cons (h0,h1,h2) (unmake_list_typ_attributes_value tl_)
  end.

Fixpoint nth_list_typ_attributes_value (n:nat) (l0:list_typ_attributes_value) {struct n} : option (typ*attributes*value) :=
  match n,l0 with
  | O, Cons_list_typ_attributes_value h0 h1 h2 tl_ => Some (h0,h1,h2) 
  | O, other => None
  | S m, Nil_list_typ_attributes_value => None
  | S m, Cons_list_typ_attributes_value h0 h1 h2 tl_ => nth_list_typ_attributes_value m tl_
  end.
Implicit Arguments nth_list_typ_attributes_value.

Fixpoint app_list_typ_attributes_value (l0 m:list_typ_attributes_value) {struct l0} : list_typ_attributes_value :=
  match l0 with
  | Nil_list_typ_attributes_value => m
  | Cons_list_typ_attributes_value h0 h1 h2 tl_ => Cons_list_typ_attributes_value h0 h1 h2 (app_list_typ_attributes_value tl_ m)
  end.


Inductive
list_system_module_fdef_value_typ : Set :=
   Nil_list_system_module_fdef_value_typ : list_system_module_fdef_value_typ
 | Cons_list_system_module_fdef_value_typ : system -> module -> fdef -> value -> typ -> list_system_module_fdef_value_typ -> list_system_module_fdef_value_typ.

Fixpoint map_list_system_module_fdef_value_typ (A:Set) (f:system->module->fdef->value->typ->A) (l0:list_system_module_fdef_value_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_system_module_fdef_value_typ => nil
  | Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 tl_ => cons (f h0 h1 h2 h3 h4) (map_list_system_module_fdef_value_typ A f tl_)
  end.
Implicit Arguments map_list_system_module_fdef_value_typ.

Fixpoint make_list_system_module_fdef_value_typ (l0:list (system*module*fdef*value*typ)) : list_system_module_fdef_value_typ :=
  match l0 with
  | nil  => Nil_list_system_module_fdef_value_typ
  | cons (h0,h1,h2,h3,h4) tl_ => Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 (make_list_system_module_fdef_value_typ tl_)
  end.

Fixpoint unmake_list_system_module_fdef_value_typ (l0:list_system_module_fdef_value_typ) :  list (system*module*fdef*value*typ) :=
  match l0 with
  | Nil_list_system_module_fdef_value_typ => nil
  | Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 tl_ =>  cons (h0,h1,h2,h3,h4) (unmake_list_system_module_fdef_value_typ tl_)
  end.

Fixpoint nth_list_system_module_fdef_value_typ (n:nat) (l0:list_system_module_fdef_value_typ) {struct n} : option (system*module*fdef*value*typ) :=
  match n,l0 with
  | O, Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 tl_ => Some (h0,h1,h2,h3,h4) 
  | O, other => None
  | S m, Nil_list_system_module_fdef_value_typ => None
  | S m, Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 tl_ => nth_list_system_module_fdef_value_typ m tl_
  end.
Implicit Arguments nth_list_system_module_fdef_value_typ.

Fixpoint app_list_system_module_fdef_value_typ (l0 m:list_system_module_fdef_value_typ) {struct l0} : list_system_module_fdef_value_typ :=
  match l0 with
  | Nil_list_system_module_fdef_value_typ => m
  | Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 tl_ => Cons_list_system_module_fdef_value_typ h0 h1 h2 h3 h4 (app_list_system_module_fdef_value_typ tl_ m)
  end.


Inductive
list_system_layouts_namedts_const_typ : Set :=
   Nil_list_system_layouts_namedts_const_typ : list_system_layouts_namedts_const_typ
 | Cons_list_system_layouts_namedts_const_typ : system -> layouts -> namedts -> const -> typ -> list_system_layouts_namedts_const_typ -> list_system_layouts_namedts_const_typ.

Fixpoint map_list_system_layouts_namedts_const_typ (A:Set) (f:system->layouts->namedts->const->typ->A) (l0:list_system_layouts_namedts_const_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_system_layouts_namedts_const_typ => nil
  | Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 tl_ => cons (f h0 h1 h2 h3 h4) (map_list_system_layouts_namedts_const_typ A f tl_)
  end.
Implicit Arguments map_list_system_layouts_namedts_const_typ.

Fixpoint make_list_system_layouts_namedts_const_typ (l0:list (system*layouts*namedts*const*typ)) : list_system_layouts_namedts_const_typ :=
  match l0 with
  | nil  => Nil_list_system_layouts_namedts_const_typ
  | cons (h0,h1,h2,h3,h4) tl_ => Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 (make_list_system_layouts_namedts_const_typ tl_)
  end.

Fixpoint unmake_list_system_layouts_namedts_const_typ (l0:list_system_layouts_namedts_const_typ) :  list (system*layouts*namedts*const*typ) :=
  match l0 with
  | Nil_list_system_layouts_namedts_const_typ => nil
  | Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 tl_ =>  cons (h0,h1,h2,h3,h4) (unmake_list_system_layouts_namedts_const_typ tl_)
  end.

Fixpoint nth_list_system_layouts_namedts_const_typ (n:nat) (l0:list_system_layouts_namedts_const_typ) {struct n} : option (system*layouts*namedts*const*typ) :=
  match n,l0 with
  | O, Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 tl_ => Some (h0,h1,h2,h3,h4) 
  | O, other => None
  | S m, Nil_list_system_layouts_namedts_const_typ => None
  | S m, Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 tl_ => nth_list_system_layouts_namedts_const_typ m tl_
  end.
Implicit Arguments nth_list_system_layouts_namedts_const_typ.

Fixpoint app_list_system_layouts_namedts_const_typ (l0 m:list_system_layouts_namedts_const_typ) {struct l0} : list_system_layouts_namedts_const_typ :=
  match l0 with
  | Nil_list_system_layouts_namedts_const_typ => m
  | Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 tl_ => Cons_list_system_layouts_namedts_const_typ h0 h1 h2 h3 h4 (app_list_system_layouts_namedts_const_typ tl_ m)
  end.


(** definitions *)

(* defns Jwf_insn *)
Inductive wf_insn : intrinsic_funs -> system -> module -> fdef -> block -> insn -> Prop :=    (* defn wf_insn *)
 | wf_insn_return : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value),
     wf_value system5 module5 fdef5 value5 typ5 ->
      Function.getDefReturnType  fdef5  =  typ5  ->
     wf_insn_base fdef5 block5 (insn_terminator (insn_return id5 typ5 value5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_terminator (insn_return id5 typ5 value5))
 | wf_insn_return_void : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id),
      Function.getDefReturnType  fdef5  =  typ_void  ->
     wf_insn_base fdef5 block5 (insn_terminator (insn_return_void id5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_terminator (insn_return_void id5))
 | wf_insn_br : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block_5:block) (id5:id) (value5:value) (l1 l2:l) (sz5:sz) (block1 block2:block),
     wf_value system5 module5 fdef5 value5 (typ_int sz5) ->
      sz5  = Size.One  ->
      lookupBlockViaLabelFromFdef  fdef5   l1  =   (Some  block1 )   ->
      lookupBlockViaLabelFromFdef  fdef5   l2  =   (Some  block2 )   ->
      (not (  (  l1  =  l2  )  ))  ->
     wf_insn_base fdef5 block_5 (insn_terminator (insn_br id5 value5 l1 l2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block_5 (insn_terminator (insn_br id5 value5 l1 l2))
 | wf_insn_br_uncond : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (l5:l),
      lookupBlockViaLabelFromFdef  fdef5   l5  =   (Some  block5 )   ->
     wf_insn_base fdef5 block5 (insn_terminator (insn_br_uncond id5 l5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_terminator (insn_br_uncond id5 l5))
 | wf_insn_unreachable : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id),
     wf_insn_base fdef5 block5 (insn_terminator (insn_unreachable id5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_terminator (insn_unreachable id5))
 | wf_insn_bop : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (bop5:bop) (sz5:sz) (value1 value2:value),
     wf_value system5 module5 fdef5 value1 (typ_int sz5) ->
     wf_value system5 module5 fdef5 value2 (typ_int sz5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_bop id5 bop5 sz5 value1 value2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_bop id5 bop5 sz5 value1 value2))
 | wf_insn_fbop : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (fbop5:fbop) (floating_point5:floating_point) (value1 value2:value),
     wf_value system5 module5 fdef5 value1 (typ_floatpoint floating_point5) ->
     wf_value system5 module5 fdef5 value2 (typ_floatpoint floating_point5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_fbop id5 fbop5 floating_point5 value1 value2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_fbop id5 fbop5 floating_point5 value1 value2))
 | wf_insn_extractvalue : forall (const_list:list_const) (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value) (typ'' typ':typ),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value5 typ5 ->
     (wf_const_targetdata_paren_targetdata_def_list (make_list_system_layouts_namedts_const_typ (map_list_const (fun (const_:const) => (system5,layouts5,namedts5,const_,typ'')) const_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
      (exists idxs, exists o, intConsts2Nats    ( layouts5 , namedts5 )     const_list  = Some idxs /\ mgetoffset    ( layouts5 , namedts5 )     typ5  idxs = Some (o,  typ' ))  ->
     wf_typ system5 typ' ->
     feasible_typ   ( layouts5 , namedts5 )   typ' ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_extractvalue id5 typ5 value5 const_list)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_extractvalue id5 typ5 value5 const_list))
 | wf_insn_insertvalue : forall (const_list:list_const) (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value) (typ':typ) (value':value) (typ'':typ),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value5 typ5 ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value' typ' ->
     (wf_const_targetdata_paren_targetdata_def_list (make_list_system_layouts_namedts_const_typ (map_list_const (fun (const_:const) => (system5,layouts5,namedts5,const_,typ'')) const_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
      (exists idxs, exists o, intConsts2Nats    ( layouts5 , namedts5 )     const_list  = Some idxs /\ mgetoffset    ( layouts5 , namedts5 )     typ5  idxs = Some (o,  typ' ))  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_insertvalue id5 typ5 value5 typ' value' const_list)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_insertvalue id5 typ5 value5 typ' value' const_list))
 | wf_insn_malloc : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value) (align5:align) (sz5:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value5 (typ_int sz5) ->
      sz5  = Size.ThirtyTwo  ->
     feasible_typ   ( layouts5 , namedts5 )   typ5 ->
     wf_typ system5 typ5 ->
     Constant.unifiable_typ   ( layouts5 , namedts5 )   typ5  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_malloc id5 typ5 value5 align5)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_malloc id5 typ5 value5 align5))
 | wf_insn_free : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value),
     wf_value system5 module5 fdef5 value5 (typ_pointer typ5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_free id5 typ5 value5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_free id5 typ5 value5))
 | wf_insn_alloca : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value5:value) (align5:align) (sz5:sz),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value5 (typ_int sz5) ->
      sz5  = Size.ThirtyTwo  ->
     feasible_typ   ( layouts5 , namedts5 )   typ5 ->
     wf_typ system5 typ5 ->
     Constant.unifiable_typ   ( layouts5 , namedts5 )   typ5  ->
     Constant.wf_zeroconst_typ typ5  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_alloca id5 typ5 value5 align5)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_alloca id5 typ5 value5 align5))
 | wf_insn_load : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ1:typ) (value1:value) (align5:align),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_pointer typ1) ->
     feasible_typ   ( layouts5 , namedts5 )   typ1 ->
     Constant.wf_zeroconst_typ typ1  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_load id5 typ1 value1 align5)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_load id5 typ1 value1 align5))
 | wf_insn_store : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (typ5:typ) (value1 value2:value) (align5:align),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 typ5 ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value2 (typ_pointer typ5) ->
     feasible_typ   ( layouts5 , namedts5 )   typ5 ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_store id5 typ5 value1 value2 align5)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_store id5 typ5 value1 value2 align5))
 | wf_insn_gep : forall (sz_value_list:list_sz_value) (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (inbounds5:inbounds) (typ5:typ) (value_5:value) (module5:module) (typ'' typ':typ),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value_5 (typ_pointer typ5) ->
      module5  =   (module_intro layouts5 namedts5 products5)   ->
     (wf_value_list (make_list_system_module_fdef_value_typ (map_list_sz_value (fun (sz_:sz) (value_:value) => (system5,module5,fdef5,value_,typ'')) sz_value_list))) ->
      typ''  = typ_int Size.ThirtyTwo  ->
      getGEPTyp  sz_value_list   typ5  =   (Some  typ' )   ->
     wf_typ system5 typ' ->
     feasible_typ   ( layouts5 , namedts5 )   typ' ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_gep id5 inbounds5 typ5 value_5 sz_value_list)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_gep id5 inbounds5 typ5 value_5 sz_value_list))
 | wf_insn_trunc : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (truncop5:truncop) (typ1:typ) (value1:value) (typ2:typ),
     wf_trunc intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_trunc id5 truncop5 typ1 value1 typ2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_trunc id5 truncop5 typ1 value1 typ2))
 | wf_insn_ext : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (extop5:extop) (typ1:typ) (value1:value) (typ2:typ),
     wf_ext intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_ext id5 extop5 typ1 value1 typ2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_ext id5 extop5 typ1 value1 typ2))
 | wf_insn_cast : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (castop5:castop) (typ1:typ) (value1:value) (typ2:typ),
     wf_cast intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_cast id5 castop5 typ1 value1 typ2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_cast id5 castop5 typ1 value1 typ2))
 | wf_insn_icmp : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (cond5:cond) (typ5:typ) (value1 value2:value),
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 typ5 ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value2 typ5 ->
       Typ.isIntOrIntVector  typ5   \/   isPointerTyp  typ5   ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_icmp id5 cond5 typ5 value1 value2)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_icmp id5 cond5 typ5 value1 value2))
 | wf_insn_fcmp : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fdef5:fdef) (block5:block) (id5:id) (fcond5:fcond) (floating_point5:floating_point) (value1 value2:value),
     wf_fcond fcond5 = true  ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value1 (typ_floatpoint floating_point5) ->
     wf_value system5  (module_intro layouts5 namedts5 products5)  fdef5 value2 (typ_floatpoint floating_point5) ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_fcmp id5 fcond5 floating_point5 value1 value2)) ->
     wf_insn intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  fdef5 block5 (insn_cmd (insn_fcmp id5 fcond5 floating_point5 value1 value2))
 | wf_insn_phi : forall (value_l_list:list_value_l) (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (typ5 typ':typ),
     (wf_value_list (make_list_system_module_fdef_value_typ (map_list_value_l (fun (value_:value) (l_:l) => (system5,module5,fdef5,value_,typ5)) value_l_list))) ->
       typEqB  typ5   typ_void  = true   \/   isFirstClassTyp  typ5   ->
      (not (  typEqB  typ5   typ_metadata  = true  ))  ->
      (  (  isPointerTyp  typ5  )   ->   (   getPointerEltTyp  typ5  =   (Some  typ' )    /\   (  (not (  typEqB  typ'   typ_metadata  = true  ))  )   )  )  ->
     insnInFdefBlockB (insn_phinode (insn_phi id5 typ5 value_l_list)) fdef5 block5 = true  ->
     wf_phinode fdef5 block5 (insn_phi id5 typ5 value_l_list)  ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_phinode (insn_phi id5 typ5 value_l_list))
 | wf_insn_select : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (value0:value) (typ5:typ) (value1 value2:value) (sz5:sz),
     wf_value system5 module5 fdef5 value0 (typ_int sz5) ->
      sz5  = Size.One  ->
     wf_value system5 module5 fdef5 value1 typ5 ->
     wf_value system5 module5 fdef5 value2 typ5 ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_select id5 value0 typ5 value1 value2)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_select id5 value0 typ5 value1 value2))
 | wf_insn_call : forall (typ'_attributes'_value''_list:list_typ_attributes_value) (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (id5:id) (noret5:noret) (clattrs5:clattrs) (typ0:typ) (value0:value) (params5:params) (layouts5:layouts) (namedts5:namedts) (products5:products) (typ1:typ) (varg5:varg),
      module5  =   (module_intro layouts5 namedts5 products5)   ->
     wf_value system5 module5 fdef5 value0 (typ_pointer typ0) ->
     FunctionType.getNumParams typ1 = Some (length params5)  ->
      params5  =  (map_list_typ_attributes_value (fun (typ_':typ) (attributes_':attributes) (value_'':value) =>   (( typ_' ,  attributes_' ),  value_'' )  ) typ'_attributes'_value''_list)  ->
      typ0  =  (typ_function typ1 (make_list_typ (map_list_typ_attributes_value (fun (typ_':typ) (attributes_':attributes) (value_'':value) => typ_') typ'_attributes'_value''_list)) varg5)  ->
     wf_typ system5 typ1 ->
     feasible_typ   ( layouts5 , namedts5 )   typ1 ->
     (wf_value_list (make_list_system_module_fdef_value_typ (map_list_typ_attributes_value (fun (typ_':typ) (attributes_':attributes) (value_'':value) => (system5,module5,fdef5,value_'',typ_')) typ'_attributes'_value''_list))) ->
      (  typEqB  typ1   typ_void  = true   ->   noret5  = true  )  ->
     wf_insn_base fdef5 block5 (insn_cmd (insn_call id5 noret5 clattrs5 typ0 value0 params5)) ->
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd (insn_call id5 noret5 clattrs5 typ0 value0 params5))
with wf_const_targetdata_paren_targetdata_def_list : list_system_layouts_namedts_const_typ -> Prop :=
 | Nil_wf_const_targetdata_paren_targetdata_def_list : wf_const_targetdata_paren_targetdata_def_list Nil_list_system_layouts_namedts_const_typ
 | Cons_wf_const_targetdata_paren_targetdata_def_list : forall (system5:system) (layouts5:layouts) (namedts5:namedts) (const_:const) (typ'':typ) (l':list_system_layouts_namedts_const_typ),
      ((wf_const system5   ( layouts5 , namedts5 )   const_ typ'')) -> wf_const_targetdata_paren_targetdata_def_list l' ->
      wf_const_targetdata_paren_targetdata_def_list (Cons_list_system_layouts_namedts_const_typ system5 layouts5 namedts5 const_ typ'' l')
with wf_value_list : list_system_module_fdef_value_typ -> Prop :=
 | Nil_wf_value_list : wf_value_list Nil_list_system_module_fdef_value_typ
 | Cons_wf_value_list : forall (system5:system) (module5:module) (fdef5:fdef) (value_:value) (typ'':typ) (l':list_system_module_fdef_value_typ),
      ((wf_value system5 module5 fdef5 value_ typ'')) -> wf_value_list l' ->
      wf_value_list (Cons_list_system_module_fdef_value_typ system5 module5 fdef5 value_ typ'' l').
(** definitions *)

(* defns Jwf_cmds *)
Inductive wf_cmds : intrinsic_funs -> system -> module -> fdef -> block -> cmds -> Prop :=    (* defn wf_cmds *)
 | wf_cmds_nil : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block),
     wf_cmds intrinsic_funs5 system5 module5 fdef5 block5  nil 
 | wf_cmds_cons : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (cmd5:cmd) (cmds5:cmds),
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_cmd cmd5) ->
     wf_cmds intrinsic_funs5 system5 module5 fdef5 block5 cmds5 ->
     wf_cmds intrinsic_funs5 system5 module5 fdef5 block5  ( cmd5 :: cmds5 ) .
(** definitions *)

(* defns Jwf_phinodes *)
Inductive wf_phinodes : intrinsic_funs -> system -> module -> fdef -> block -> phinodes -> Prop :=    (* defn wf_phinodes *)
 | wf_phinodes_nil : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block),
     wf_phinodes intrinsic_funs5 system5 module5 fdef5 block5  nil 
 | wf_phinodes_cons : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (phinode5:phinode) (phinodes5:phinodes),
     wf_insn intrinsic_funs5 system5 module5 fdef5 block5 (insn_phinode phinode5) ->
     wf_phinodes intrinsic_funs5 system5 module5 fdef5 block5 phinodes5 ->
     wf_phinodes intrinsic_funs5 system5 module5 fdef5 block5  ( phinode5 :: phinodes5 ) .
(** definitions *)

(* defns Jwf_block *)
Inductive wf_block : intrinsic_funs -> system -> module -> fdef -> block -> Prop :=    (* defn wf_block *)
 | wf_block_intro : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (l5:l) (phinodes5:phinodes) (cmds5:cmds) (terminator5:terminator),
      blockInSystemModuleFdefB   (block_intro l5 phinodes5 cmds5 terminator5)    system5   module5   fdef5  = true  ->
     wf_phinodes intrinsic_funs5 system5 module5 fdef5  (block_intro l5 phinodes5 cmds5 terminator5)  phinodes5 ->
     wf_cmds intrinsic_funs5 system5 module5 fdef5  (block_intro l5 phinodes5 cmds5 terminator5)  cmds5 ->
     wf_insn intrinsic_funs5 system5 module5 fdef5  (block_intro l5 phinodes5 cmds5 terminator5)  (insn_terminator terminator5) ->
     wf_block intrinsic_funs5 system5 module5 fdef5 (block_intro l5 phinodes5 cmds5 terminator5).
(** definitions *)

(* defns Jwf_blocks *)
Inductive wf_blocks : intrinsic_funs -> system -> module -> fdef -> blocks -> Prop :=    (* defn wf_blocks *)
 | wf_blocks_nil : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef),
     wf_blocks intrinsic_funs5 system5 module5 fdef5  nil 
 | wf_blocks_cons : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef) (block5:block) (blocks5:blocks),
     wf_block intrinsic_funs5 system5 module5 fdef5 block5 ->
     wf_blocks intrinsic_funs5 system5 module5 fdef5 blocks5 ->
     wf_blocks intrinsic_funs5 system5 module5 fdef5  ( block5 :: blocks5 ) .

(* auxiliary list types for defns *)
Inductive
list_typ_attributes_id : Set :=
   Nil_list_typ_attributes_id : list_typ_attributes_id
 | Cons_list_typ_attributes_id : typ -> attributes -> id -> list_typ_attributes_id -> list_typ_attributes_id.

Fixpoint map_list_typ_attributes_id (A:Set) (f:typ->attributes->id->A) (l0:list_typ_attributes_id) {struct l0} : list A :=
  match l0 with
  | Nil_list_typ_attributes_id => nil
  | Cons_list_typ_attributes_id h0 h1 h2 tl_ => cons (f h0 h1 h2) (map_list_typ_attributes_id A f tl_)
  end.
Implicit Arguments map_list_typ_attributes_id.

Fixpoint make_list_typ_attributes_id (l0:list (typ*attributes*id)) : list_typ_attributes_id :=
  match l0 with
  | nil  => Nil_list_typ_attributes_id
  | cons (h0,h1,h2) tl_ => Cons_list_typ_attributes_id h0 h1 h2 (make_list_typ_attributes_id tl_)
  end.

Fixpoint unmake_list_typ_attributes_id (l0:list_typ_attributes_id) :  list (typ*attributes*id) :=
  match l0 with
  | Nil_list_typ_attributes_id => nil
  | Cons_list_typ_attributes_id h0 h1 h2 tl_ =>  cons (h0,h1,h2) (unmake_list_typ_attributes_id tl_)
  end.

Fixpoint nth_list_typ_attributes_id (n:nat) (l0:list_typ_attributes_id) {struct n} : option (typ*attributes*id) :=
  match n,l0 with
  | O, Cons_list_typ_attributes_id h0 h1 h2 tl_ => Some (h0,h1,h2) 
  | O, other => None
  | S m, Nil_list_typ_attributes_id => None
  | S m, Cons_list_typ_attributes_id h0 h1 h2 tl_ => nth_list_typ_attributes_id m tl_
  end.
Implicit Arguments nth_list_typ_attributes_id.

Fixpoint app_list_typ_attributes_id (l0 m:list_typ_attributes_id) {struct l0} : list_typ_attributes_id :=
  match l0 with
  | Nil_list_typ_attributes_id => m
  | Cons_list_typ_attributes_id h0 h1 h2 tl_ => Cons_list_typ_attributes_id h0 h1 h2 (app_list_typ_attributes_id tl_ m)
  end.


Inductive
list_layouts_namedts_typ : Set :=
   Nil_list_layouts_namedts_typ : list_layouts_namedts_typ
 | Cons_list_layouts_namedts_typ : layouts -> namedts -> typ -> list_layouts_namedts_typ -> list_layouts_namedts_typ.

Fixpoint map_list_layouts_namedts_typ (A:Set) (f:layouts->namedts->typ->A) (l0:list_layouts_namedts_typ) {struct l0} : list A :=
  match l0 with
  | Nil_list_layouts_namedts_typ => nil
  | Cons_list_layouts_namedts_typ h0 h1 h2 tl_ => cons (f h0 h1 h2) (map_list_layouts_namedts_typ A f tl_)
  end.
Implicit Arguments map_list_layouts_namedts_typ.

Fixpoint make_list_layouts_namedts_typ (l0:list (layouts*namedts*typ)) : list_layouts_namedts_typ :=
  match l0 with
  | nil  => Nil_list_layouts_namedts_typ
  | cons (h0,h1,h2) tl_ => Cons_list_layouts_namedts_typ h0 h1 h2 (make_list_layouts_namedts_typ tl_)
  end.

Fixpoint unmake_list_layouts_namedts_typ (l0:list_layouts_namedts_typ) :  list (layouts*namedts*typ) :=
  match l0 with
  | Nil_list_layouts_namedts_typ => nil
  | Cons_list_layouts_namedts_typ h0 h1 h2 tl_ =>  cons (h0,h1,h2) (unmake_list_layouts_namedts_typ tl_)
  end.

Fixpoint nth_list_layouts_namedts_typ (n:nat) (l0:list_layouts_namedts_typ) {struct n} : option (layouts*namedts*typ) :=
  match n,l0 with
  | O, Cons_list_layouts_namedts_typ h0 h1 h2 tl_ => Some (h0,h1,h2) 
  | O, other => None
  | S m, Nil_list_layouts_namedts_typ => None
  | S m, Cons_list_layouts_namedts_typ h0 h1 h2 tl_ => nth_list_layouts_namedts_typ m tl_
  end.
Implicit Arguments nth_list_layouts_namedts_typ.

Fixpoint app_list_layouts_namedts_typ (l0 m:list_layouts_namedts_typ) {struct l0} : list_layouts_namedts_typ :=
  match l0 with
  | Nil_list_layouts_namedts_typ => m
  | Cons_list_layouts_namedts_typ h0 h1 h2 tl_ => Cons_list_layouts_namedts_typ h0 h1 h2 (app_list_layouts_namedts_typ tl_ m)
  end.


(** definitions *)

(* defns Jwf_fdec *)
Inductive wf_fdec : intrinsic_funs -> system -> module -> fdec -> Prop :=    (* defn wf_fdec *)
 | wf_fdec_intro : forall (typ_attributes_id_list:list_typ_attributes_id) (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fnattrs5:fnattrs) (typ_5:typ) (id_5:id) (args5:args) (varg5:varg),
      productInSystemModuleB  (product_fdec  (fdec_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5) ) )   system5    (module_intro layouts5 namedts5 products5)   = true  ->
      args5  =  (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) =>   (( typ_ ,  attributes_ ),  id_ )  ) typ_attributes_id_list)  ->
     (wf_typ_list (make_list_system_typ (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) => (system5,typ_)) typ_attributes_id_list))) ->
     (feasible_typ_targetdata_paren_targetdata_def_list (make_list_layouts_namedts_typ (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) => (layouts5,namedts5,typ_)) typ_attributes_id_list))) ->
       isFirstClassTyp  typ_5   \/   typEqB  typ_5   typ_void  = true   ->
     wf_fdec intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  (fdec_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5) )
with feasible_typ_targetdata_paren_targetdata_def_list : list_layouts_namedts_typ -> Prop :=
 | Nil_feasible_typ_targetdata_paren_targetdata_def_list : feasible_typ_targetdata_paren_targetdata_def_list Nil_list_layouts_namedts_typ
 | Cons_feasible_typ_targetdata_paren_targetdata_def_list : forall (layouts5:layouts) (namedts5:namedts) (typ_:typ) (l':list_layouts_namedts_typ),
      ((feasible_typ   ( layouts5 , namedts5 )   typ_)) -> feasible_typ_targetdata_paren_targetdata_def_list l' ->
      feasible_typ_targetdata_paren_targetdata_def_list (Cons_list_layouts_namedts_typ layouts5 namedts5 typ_ l').
(** definitions *)

(* defns Jwf_fdef *)
Inductive wf_fdef : intrinsic_funs -> system -> module -> fdef -> Prop :=    (* defn wf_fdef *)
 | wf_fdef_intro : forall (typ_attributes_id_list:list_typ_attributes_id) (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products) (fnattrs5:fnattrs) (typ_5:typ) (id_5:id) (args5:args) (varg5:varg) (blocks5:blocks) (block5:block) (fheader5:fheader) (usedef_block5:usedef_block),
      productInSystemModuleB  (product_fdef  (fdef_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5)  blocks5) )   system5    (module_intro layouts5 namedts5 products5)   = true  ->
      args5  =  (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) =>   (( typ_ ,  attributes_ ),  id_ )  ) typ_attributes_id_list)  ->
     (wf_typ_list (make_list_system_typ (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) => (system5,typ_)) typ_attributes_id_list))) ->
     (feasible_typ_targetdata_paren_targetdata_def_list (make_list_layouts_namedts_typ (map_list_typ_attributes_id (fun (typ_:typ) (attributes_:attributes) (id_:id) => (layouts5,namedts5,typ_)) typ_attributes_id_list))) ->
       isFirstClassTyp  typ_5   \/   typEqB  typ_5   typ_void  = true   ->
      getEntryBlock   (fdef_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5)  blocks5)   =   (Some  block5 )   ->
     genBlockUseDef_fdef (fdef_intro fheader5 blocks5) = usedef_block5  ->
     hasNonePredecessor block5 usedef_block5 = true  ->
     wf_blocks intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  (fdef_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5)  blocks5) blocks5 ->
     wf_fdef intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  (fdef_intro  (fheader_intro fnattrs5 typ_5 id_5 args5 varg5)  blocks5).
(** definitions *)

(* defns Jwf_g *)
Inductive wf_g : intrinsic_funs -> system -> module -> product -> Prop :=    (* defn wf_g *)
 | wf_g_intro : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (product5:product),
     wf_g intrinsic_funs5 system5 module5 product5.
(** definitions *)

(* defns Jwf_gvar *)
Inductive wf_gvar : intrinsic_funs -> system -> module -> gvar -> Prop :=    (* defn wf_gvar *)
 | wf_gv_intro : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (id5:id) (linkage5:linkage) (gvar_spec5:gvar_spec) (typ5:typ) (const5:const) (align5:align) (targetdata5:targetdata),
     wf_const system5 targetdata5 const5 typ5 ->
     wf_gvar intrinsic_funs5 system5 module5 (gvar_intro id5 linkage5 gvar_spec5 typ5 const5 align5).
(** definitions *)

(* defns Jwf_prod *)
Inductive wf_prod : intrinsic_funs -> system -> module -> product -> Prop :=    (* defn wf_prod *)
 | wf_prod_global_var : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (gvar5:gvar),
     wf_g intrinsic_funs5 system5 module5 (product_gvar gvar5) ->
     wf_gvar intrinsic_funs5 system5 module5 gvar5 ->
     wf_prod intrinsic_funs5 system5 module5 (product_gvar gvar5)
 | wf_prod_function_dec : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdec5:fdec),
     wf_g intrinsic_funs5 system5 module5 (product_fdec fdec5) ->
     wf_fdec intrinsic_funs5 system5 module5 fdec5 ->
     wf_prod intrinsic_funs5 system5 module5 (product_fdec fdec5)
 | wf_prod_function_def : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (fdef5:fdef),
     wf_g intrinsic_funs5 system5 module5 (product_fdef fdef5) ->
     wf_fdef intrinsic_funs5 system5 module5 fdef5 ->
     wf_prod intrinsic_funs5 system5 module5 (product_fdef fdef5).
(** definitions *)

(* defns Jwf_prods *)
Inductive wf_prods : intrinsic_funs -> system -> module -> products -> Prop :=    (* defn wf_prods *)
 | wf_prods_nil : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module),
     wf_prods intrinsic_funs5 system5 module5  nil 
 | wf_prods_cons : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (product5:product) (products5:products),
     wf_prods intrinsic_funs5 system5 module5 products5 ->
     wf_prod intrinsic_funs5 system5 module5 product5 ->
     wf_prods intrinsic_funs5 system5 module5  ( product5 :: products5 ) .
(** definitions *)

(* defns Jwf_namedts *)
Inductive wf_namedts : namedts -> Prop :=    (* defn wf_namedts *)
 | wf_namedts_intro : forall (namedts5:namedts),
     wf_namedts namedts5.
(** definitions *)

(* defns Jwf_module *)
Inductive wf_module : intrinsic_funs -> system -> module -> Prop :=    (* defn wf_module *)
 | wf_module_intro : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (layouts5:layouts) (namedts5:namedts) (products5:products),
     wf_namedts namedts5 ->
      In   (module_intro layouts5 namedts5 products5)    system5  ->
     wf_prods intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5)  products5 ->
     wf_module intrinsic_funs5 system5  (module_intro layouts5 namedts5 products5) .
(** definitions *)

(* defns Jwf_modules *)
Inductive wf_modules : intrinsic_funs -> system -> modules -> Prop :=    (* defn wf_modules *)
 | wf_modules_nil : forall (intrinsic_funs5:intrinsic_funs) (system5:system),
     wf_modules intrinsic_funs5 system5  nil 
 | wf_modules_cons : forall (intrinsic_funs5:intrinsic_funs) (system5:system) (module5:module) (modules5:modules),
     wf_module intrinsic_funs5 system5 module5 ->
     wf_modules intrinsic_funs5 system5 modules5 ->
     wf_modules intrinsic_funs5 system5  ( module5 :: modules5 ) .
(** definitions *)

(* defns Jwf_system *)
Inductive wf_system : intrinsic_funs -> system -> Prop :=    (* defn wf_system *)
 | wf_system_intro : forall (intrinsic_funs5:intrinsic_funs) (modules5:modules),
     wf_modules intrinsic_funs5  modules5  modules5 ->
      uniqSystem   modules5   ->
     wf_system intrinsic_funs5  modules5 .

Tactic Notation "wfconst_cases" tactic(first) tactic(c) :=
  first;
  [ c "wfconst_zero" | c "wfconst_int" | c "wfconst_floatingpoint" |
    c "wfconst_undef" | c "wfconst_null" | c "wfconst_array" |
    c "wfconst_struct" | c "wfconst_gid" | c "wfconst_trunc_int" |
    c "wfconst_trunc_fp" | c "wfconst_zext" | c "wfconst_sext" |
    c "wfconst_fpext" | c "wfconst_ptrtoint" | c "wfconst_inttoptr" |
    c "wfconst_bitcast" | c "wfconst_gep" | c "wfconst_select" |
    c "wfconst_icmp" | c "wfconst_fcmp" | c "wfconst_extractvalue" | 
    c "wfconst_insertvalue" | c "wfconst_bop" | c "wfconst_fbop" | 
    c "wfconst_nil" | c "wfconst_cons" ].

Scheme wf_const_ind2 := Induction for wf_const Sort Prop
  with wf_const_list_ind2 := Induction for wf_const_list Sort Prop.

Combined Scheme wf_const_mutind from wf_const_ind2, wf_const_list_ind2.

End LLVMtypings.



(*
*** Local Variables: ***
*** coq-prog-name: "coqtop" ***
*** coq-prog-args: ("-emacs-U" "-I" "./monads" "-I" "./ott" "-I" "./compcert" "-I" "/home/jianzhou/SVN/provers/metalib/branches/metatheory_8.3/") ***
*** End: ***
*)



