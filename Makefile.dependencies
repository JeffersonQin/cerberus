CMDLINER_SOURCE=http://erratique.ch/software/cmdliner/releases/cmdliner-0.9.7.tbz
PPRINT_SOURCE=http://gallium.inria.fr/~fpottier/pprint/pprint-20140424.tar.gz
ZARITH_SOURCE=http://forge.ocamlcore.org/frs/download.php/1471/zarith-1.3.tgz
Z3_SOURCE=https://github.com/Z3Prover/z3.git

CMDLINER_PATH=$(shell basename $(CMDLINER_SOURCE) .tbz)
PPRINT_PATH=$(shell basename $(PPRINT_SOURCE) .tar.gz)/src
ZARITH_PATH=$(shell basename $(ZARITH_SOURCE) .tgz)

Z3_SOURCE_PATH=z3-source
Z3_PATH=$(shell pwd)/z3

ifeq ($(shell uname -s),Darwin)
  CMD=curl -O
else
  CMD=wget --no-check-certificate
endif


default:
	@if (command -v opam >/dev/null 2>&1); then \
	  echo "Please install the following packages with opam: cmdliner, pprint"; \
	else \
	  make -f ../Makefile.dependencies cmdliner pprint z3; \
	fi
#  make cmdliner pprint zarith

cmdliner:
	@if ! (ocamlfind query cmdliner >/dev/null 2>&1); then \
	  echo "INSTALLING cmdliner"; \
	  if [ ! -d $(CMDLINER_PATH) ] ; then \
	    echo DOWNLOADING $(CMDLINER_SOURCE) ; \
	    $(CMD) $(CMDLINER_SOURCE) && tar -jxf $(shell basename $(CMDLINER_SOURCE)) && rm -f $(shell basename $(CMDLINER_SOURCE)) ; \
	  fi; \
	  cd $(CMDLINER_PATH); \
	  ocaml pkg/build.ml native=true native-dynlink=true; \
	  ocamlfind install cmdliner pkg/META _build/src/cmdliner.a _build/src/cmdliner.cma \
	  _build/src/cmdliner.cmi _build/src/cmdliner.cmx _build/src/cmdliner.cmxa _build/src/cmdliner.cmxs _build/src/cmdliner.mli; \
        fi

pprint:
	@if ! (ocamlfind query pprint >/dev/null 2>&1); then \
	  echo "INSTALLING pprint"; \
	  if [ ! -d $(PPRINT_PATH) ] ; then \
	    echo DOWNLOADING $(PPRINT_SOURCE) ; \
	    $(CMD) $(PPRINT_SOURCE) && tar -zxf $(shell basename $(PPRINT_SOURCE)) && rm -f $(shell basename $(PPRINT_SOURCE)) ; \
	  fi; \
	  if [ ! `command -v ocamlfind` ]; then \
	    mv $(PPRINT_PATH)/Makefile $(PPRINT_PATH)/Makefile_ ; \
	    sed s/-use-ocamlfind// $(PPRINT_PATH)/Makefile_ > $(PPRINT_PATH)/Makefile ; \
	    make -C $(PPRINT_PATH) ; \
	    mv  $(PPRINT_PATH)/Makefile_ $(PPRINT_PATH)/Makefile ; \
          else \
            make -C $(PPRINT_PATH) install; \
          fi; \
        fi

#zarith:
#	@if ! (ocamlfind query zarith >/dev/null 2>&1); then \
#	  echo "INSTALLING pprint"; \
#	  if [ ! -d $(ZARITH_PATH) ] ; then \
#	    echo DOWNLOADING $(ZARITH_SOURCE) ; \
#	    $(CMD) $(ZARITH_SOURCE) && tar -zxf $(shell basename $(ZARITH_SOURCE)) && rm -f $(shell basename $(ZARITH_SOURCE)) ; \
#	  fi; \
#	  cd $(ZARITH_PATH); if [ ! -f Makefile ]; then ./configure ; fi && make && make install; \
#	fi

z3:
	@if ! (ocamlfind query z3 >/dev/null 2>&1); then \
	  echo "INSTALLING z3"; \
	  if [ ! -d $(Z3_SOURCE_PATH) ] ; then \
	    echo DOWNLOADING $(Z3_SOURCE) ; \
	    git clone $(Z3_SOURCE) $(Z3_SOURCE_PATH); \
	  fi; \
	  mkdir -p ${Z3_PATH}; \
	  cd $(Z3_SOURCE_PATH); \
	  python scripts/mk_make.py --ml --prefix=${Z3_PATH}; \
	  cd build; \
	  make && make install; \
	fi

.PHONY: z3 pprint cmdliner

clean:
	rm -rf $(shell basename $(CMDLINER_SOURCE) .tbz) $(shell basename $(PPRINT_SOURCE) .tar.gz) $(shell basename $(ZARITH_SOURCE) .tgz) ${Z3_SOURCE_PATH}
