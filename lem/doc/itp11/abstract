* Lightweight Tools for Heavyweight Semantics 


Owens Boehm Zappa Nardelli Sewell 



Many ITP developments exist in the context of a single prover, and are
dominated by proof effort.  In contrast, when applying rigorous
semantic techniques to realistic computer systems, engineering the
right definitions becomes a major activity in its own right.  Proof is
then only one task among many: testing, simulation, communication,
community review, etc.  Moreover, the effort invested in establishing
such definitions should be re-usable and, where possible, irrespective
of the local proof-assistant culture.  For example, in recent work on
processor and programming language concurrency (x86, Power, ARM,
C++0x, CompCertTSO), we have used Coq, HOL4, Isabelle/HOL, and Ott ---
often with multiple provers simultaneously, to exploit existing
definitions or local expertise.   

In this paper we describe a prototype system specifically designed to
support pragmatic engineering of such definitions.  It has a carefully
designed source language, of a familiar higher-order logic with
datatype definitions, inductively defined relations, and so on.  Such
input is typechecked (with good error messages) and then translated to
a variety of programming languages and proof assistants, taking care
to follow the original input (preserving comments and indentation) so
that the result is readable and usable.  We have already found this
invaluable in our work on Power/ARM multiprocessor semantics.


************************************************************


  Readable Mathematics

  Inter-prover working

  Everything Except Proof

  Prover Pragmatics

  Definition Engineering



  Translatable Definitions

  Portable Definitions

  Metalanguage for Portable Semantics

  Portable Semantics

  lambdas and newlines:  xxxxx

  Designing a Logic as if it was a Programming Language

  Logic - as - Programming Language

  Designing a Prover Input Language As If You Really Cared


  Lightweight Tools for Heavyweight Definitions

* Lightweight Tools for Heavyweight Semantics 

* Pragmatic Portable Semantics







that supports 





%TCP, OCaml_light, x86, Power, ARM, C++0x, Java Modules, CompCertTSO, 



one may have to use multiple tools 



neither of these is necessarily
the case.   




In our experience 













For most ITP applications, good definitions are critical; for some,
definitions are significantly more important than even mechanized proof.
Many proof assistants support definition-oriented tasks with, e.g.,
typechecking, production typesetting, generating executable code, and
automatic testing.  This paper presents a new language designed solely
for writing definitions, and thus improves on existing prover
infrastructure for such tasks.  The advantages of our approach are not
primarily in the design of the language, but in building tools that
treat definitions as the primary object of interest.

The language's design is essentially conservative, aiming for broad
similarity with popular higher-order logics; its syntax is based on
OCaml, and it supports simple types, inductively defined relations,
recursive functions, set comprehensions, and the like.  Our tools aims
to 

- quickly typecheck definitions, and provide good error messages

- translate definitions to a variety of programming languages and proof
  assistants, taking care to maintain similarity with the original input
  (e.g., tracking comments and white space)
