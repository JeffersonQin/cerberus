(* TODO : This is not the right type *)
type map 'key 'a = Hol.Finite_map.fmap 'key 'a
val empty: forall 'key 'a.  ('key -> 'key -> int) -> map 'key 'a
val is_empty: forall 'key 'a.  map 'key 'a -> bool
val mem: forall 'key 'a.  'key -> map 'key 'a -> bool
val add: forall 'key 'a.  'key -> 'a -> map 'key 'a -> map 'key 'a
val singleton: forall 'key 'a.  ('key -> 'key -> int) -> 'key -> 'a -> map 'key 'a
val remove: forall 'key 'a.  'key -> map 'key 'a -> map 'key 'a
(*
val merge: forall 'key 'a 'b. 
    ('key -> 'a option -> 'b option -> 'c option) -> map 'key 'a -> ('key,'b) map -> ('key,'c) map
*)
val compare: forall 'key 'a.  ('a -> 'a -> int) -> map 'key 'a -> map 'key 'a -> int
val equal: forall 'key 'a.  ('a -> 'a -> bool) -> map 'key 'a -> map 'key 'a -> bool
(*val iter: forall 'key 'a.  ('key -> 'a -> unit) -> map 'key 'a -> unit*)
val fold: forall 'key 'a 'b.  ('key -> 'a -> 'b -> 'b) -> map 'key 'a -> 'b -> 'b
val for_all: forall 'key 'a.  ('key -> 'a -> bool) -> map 'key 'a -> bool
val \\exists : forall 'key 'a.  ('key -> 'a -> bool) -> map 'key 'a -> bool
val filter: forall 'key 'a.  ('key -> 'a -> bool) -> map 'key 'a -> map 'key 'a
val partition: forall 'key 'a.  ('key -> 'a -> bool) -> map 'key 'a -> map 'key 'a * map 'key 'a
val cardinal: forall 'key 'a.  map 'key 'a -> int
val bindings: forall 'key 'a.  map 'key 'a -> list ('key * 'a)
val min_binding: forall 'key 'a.  map 'key 'a -> ('key * 'a)
val max_binding: forall 'key 'a.  map 'key 'a -> ('key * 'a)
val choose: forall 'key 'a.  map 'key 'a -> ('key * 'a)
(*val split: forall 'key 'a.  'key -> map 'key 'a -> map 'key 'a * 'a option * map 'key 'a*)
val find: forall 'key 'a.  'key -> map 'key 'a -> 'a
val map: forall 'key 'a 'b.  ('a -> 'b) -> map 'key 'a -> map 'key 'b
val mapi: forall 'key 'a 'b.  ('key -> 'a -> 'b) -> map 'key 'a -> map 'key 'b

val concat: forall 'key 'a. map 'key 'a -> map 'key 'a -> map 'key 'a
