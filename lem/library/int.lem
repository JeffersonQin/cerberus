(* TODO: This is not the right type *)
type int = Hol.Integer.int

val (+) : int -> int -> int
let inline {hol} (+) = Hol.int_add
let inline {ocaml} (+) = Ocaml.(+)

val (-) : int -> int -> int
let inline {hol} (-) = Hol.int_sub
let inline {ocaml} (-) = Ocaml.(-)

val ( * ) : int -> int -> int
let inline {hol} ( * ) = Hol.int_mul
let inline {ocaml} ( * ) = Ocaml.( * )

val (/) : int -> int -> int
let inline {hol} (/) = Hol.int_div
let inline {ocaml} (/) = Ocaml.(/)

val (%) : int -> int -> int
let inline {hol} (%) = Hol.int_mod
let inline {ocaml} (%) = Ocaml.(mod)

val (<) : int -> int -> bool
let inline {hol} (<) = Hol.int_lt
let inline {ocaml} (<) = Ocaml.(<)

val (<=) : int -> int -> bool
let inline {hol} (<=) = Hol.int_le
let inline {ocaml} (<=) = Ocaml.(<=)

val (>) : int -> int -> bool
let inline {hol} (>) = Hol.int_gt
let inline {ocaml} (>) = Ocaml.(>)

val (>=) : int -> int -> bool
let inline {hol} (>=) = Hol.int_ge
let inline {ocaml} (>=) = Ocaml.(>=)

