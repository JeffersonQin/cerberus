open Int

open Common
open AilTypes
open AilTypesAux
open AilSyntax

let rec null_pointer_constant' (e : expression' 'A) : bool =
  match e with
  | Constant (ConstantInteger (0 , None)) -> true
  | Cast q (Pointer q' Void) e            -> null_pointer_constant e && unqualified q && unqualified q'
  | _                                     -> false
  end
and null_pointer_constant e : bool =
  match e with
  | AnnotatedExpression _ e -> null_pointer_constant' e
  end

let rec fv_arguments_aux (fv : identifier -> expression 'A -> bool) (v : identifier) a : bool =
  match a with
  | []     -> false
  | e :: a -> fv v e || fv_arguments_aux fv v a
  end

let rec fv' v (e : expression' 'A) : bool =
  let fv_arguments = fv_arguments_aux fv in
  match e with
  | Unary _ e -> fv v e
  | Binary e1 _ e2 -> fv v e1 || fv v e2
  | Assign e1 e2 -> fv v e1 || fv v e2
  | CompoundAssign e1 _ e2 -> fv v e1 || fv v e2
  | Conditional e1 e2 e3 -> fv v e1 || fv v e2 || fv v e3
  | Cast _ _ e -> fv v e
  | Call e ls -> fv v e || fv_arguments v ls
  | Var v' -> eq_identifier v v'
  | _ -> false
  end
and fv v e : bool =
  match e with
  | AnnotatedExpression _ e -> fv' v e
  end

let fv_arguments : identifier -> list (expression 'A) -> bool = fv_arguments_aux fv
