open import Pervasives Common AilTypes AilTypesAux AilSyntax

let rec null_pointer_constant' (e : expression' 'A) : bool =
  match e with
  | AilEconst (ConstantInteger (n , _, Nothing)) -> n = 0
  | AilEcast q (Pointer q' Void) e               -> null_pointer_constant e && is_unqualified q && is_unqualified q'
  | _                                            -> false
  end
and null_pointer_constant e : bool =
  match e with
  | AnnotatedExpression _ e -> null_pointer_constant' e
  end

let rec fv_arguments_aux (fv : identifier -> expression 'A -> bool) (v : identifier) a : bool =
  match a with
  | []     -> false
  | e :: a -> fv v e || fv_arguments_aux fv v a
  end

let rec fv' v (e : expression' 'A) : bool =
  let fv_arguments = fv_arguments_aux fv in
  match e with
  | AilEunary _ e -> fv v e
  | AilEbinary e1 _ e2 -> fv v e1 || fv v e2
  | AilEassign e1 e2 -> fv v e1 || fv v e2
  | AilEcompoundAssign e1 _ e2 -> fv v e1 || fv v e2
  | AilEcond e1 e2 e3 -> fv v e1 || fv v e2 || fv v e3
  | AilEcast _ _ e -> fv v e
  | AilEcall e ls -> fv v e || fv_arguments v ls
  | AilEident v' -> eq_identifier v v'
  | _ -> false
  end
and fv v e : bool =
  match e with
  | AnnotatedExpression _ e -> fv' v e
  end

let fv_arguments (v : identifier) (a: list (expression 'A)) : bool = fv_arguments_aux fv v a
