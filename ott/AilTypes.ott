grammar
terminals :: 'terminals_' ::=
  | static :: :: Static
  | thread :: :: Thread
  | automatic :: :: Automatic
  | allocated :: :: Allocated % TODO: look at (ยง7.22.3)
  | char :: :: Char
  | short :: :: Short
  | int :: :: Int
  | long :: :: Long
  | bool :: :: Bool
  | unsigned :: :: Unsigned
  | signed :: :: Signed
  | const :: :: Const
  | restrict :: :: Restrict
  | volatile :: :: Volatile
  | [ :: :: Rbracket
  | ] :: :: Lbracket
  | ( :: :: Lparen
  | ) :: :: Rparen
  | promote :: :: Promote
  | usualArithmetic
  | lvalueT :: :: LvalueT
  | expressionT :: :: ExpressionT

formula :: 'formula_' ::=
  | ty1 = ty2 :: M :: TyEq
      {{ coq [[ty1]] = [[ty2]] }}
  | qualifier1 = qualifier2 :: M :: QualifierEq
      {{ coq [[qualifier1]] = [[qualifier2]] }}
  | qualifier in qualifiers :: M :: InQualifiers
      {{ coq (MSets.mem [[qualifier]] [[qualifiers]])}}

storageDuration :: '' ::=
  {{ com storage duration (\S6.2.4\#1) }}
  | static :: :: Static
  | thread :: :: Thread
  | automatic :: :: Automatic
  | allocated :: :: Allocated % TODO: look at (ยง7.22.3)

integerBaseType :: '' ::=
  {{ com standard signed integer types (\S6.2.5\#4) }}
  | char :: :: IChar
      {{ com corresponds to \textbf{signed/unsigned char} }}
  | short :: :: Short
      {{ com corresponds to \textbf{short int}            }}
  | int :: :: Int
  | long :: :: Long
      {{ com corresponds to \textbf{long int}             }}
  | long long :: :: LongLong
      {{ com corresponds to \textbf{long long int}        }}

integerType :: '' ::=
  {{ com integer types (\S6.2.5\#17) }}
  % TODO: add enumerated types
  | bool :: :: Bool
      {{ com corresponds to \textbf{\_Bool} }}
  | signed integerBaseType :: :: Signed
  | unsigned integerBaseType :: :: Unsigned

basicType :: '' ::=
  {{ com basic types (\S6.2.5\#14) }}
  | char :: :: Char
  | integerType :: :: Integer

qualifier :: '' ::=
  {{ com type qualifiers (\S6.7.3) }}
  | const :: :: Const
  | restrict :: :: Restrict
  | volatile :: :: Volatile

qualifiers :: 'Qualifiers' ::=
  | qualifier1 .. qualifierk :: :: Def
  | [] :: M :: Empty
      {{ tex \emptyset }}
      {{ coq empty }}
  | qualifiers1 @ qualifiers2 :: M :: App
      {{ tex [[qualifiers1]] \cup [[qualifiers2]] }}
      {{ coq union [[qualifiers1]] [[qualifiers2]] }}
  | ( qualifiers ) :: S :: Parens
      {{ coq [[qualifiers]] }}

ty {{ tex \tau }} :: '' ::=
  {{ com $\texttt{Ail}_\tau$ types }}
  | ( ty ) :: S :: TyParens
      {{ icho [[ty]] }}
  | qualifiers void :: :: Void
      {{ com \texttt{void} type (\S6.2.5\#19) }}
  | qualifiers basicType :: :: Basic
      {{ com basic types (\S6.2.5\#14) }}
% TODO:
%  | enum id                         ::   :: Enum
%      {{ com enumerate types (\S6.2.5\#16) }}
     % TODO: add names to an env + MOVE TO INTEGER_TYPE
  | ty [ n ]                        ::   :: Array
      {{ com array types (\S6.2.5\#20) }}
% TODO:
%  | struct 
% TODO:
%  | union
  | ty ( ty1 , .. , tyk )           ::   :: Function
      {{ com function types }}
  | qualifiers ty *                 ::   :: Pointer
      {{ com pointer types }}
% TODO:
% atomic types 
%  | promote ty :: :: Promote
%      {{ com integer promotion }}
%  | usualArithmetic ty1 ty2 :: :: UsualArithmetic
%      {{ tex \texttt{usual\_arithmetic}([[ty1]],[[ty2]]) }}

typeCategory :: '' ::=
  | lvalueT ty :: :: LvalueT
  | expressionT ty :: :: ExpressionT
