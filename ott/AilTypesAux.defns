funs
TypeTransformation ::=

fun pointerConvert ty' :: ty :: pointerConvert by
pointerConvert void === void
pointerConvert bt === bt
pointerConvert (qs ty *) === qs ty *
pointerConvert (ty [n]) === ty *
pointerConvert (ty (qs1 ty1, .., qsk tyk)) === ty (qs1 ty1, .., qsk tyk) *

defns
JisInteger :: '' ::=
  {{ coq-universe Set }}

defn
isInteger ty :: :: isInteger :: '' by

------------ :: IsInteger
isInteger it

defns
JisVoid :: '' ::=

defn
isVoid ty :: :: isVoid :: '' by

----------- :: IsVoid
isVoid void

defns
JisPointer :: '' ::=

defn
isPointer ty :: :: isPointer :: '' by

----------------- :: IsPointer
isPointer qs ty *

defns
JisBool :: '' ::=

defn
isBool ty :: :: isBool :: '' by

----------- :: IsBool
isBool bool

embed {{ coq
Definition typeRange P it :=
  let prec := Implementation.precision P it in
  match it with
  | Bool
  | Unsigned _ => mkRange 0 (2^prec - 1)
  | Char       => mkRange 0 (2^prec - 1)
  | Signed _ =>
      match Implementation.binMode P with
      | Implementation.TwosComplement    => mkRange (-2^(prec - 1))     (2^(prec - 1) - 1)
      | Implementation.OnesComplement    => mkRange (-2^(prec - 1) + 1) (2^(prec - 1) - 1)
      | Implementation.SignPlusMagnitude => mkRange (-2^(prec - 1) + 1) (2^(prec - 1) - 1)
      end
  end.

(*
Section TypeRanges.
Definition rangeSignedInt := {|min := -32767; max:= 32767|}.
Definition rangeUnsignedInt := {|min := 0; max:= 65535|}.
Definition rangeSignedLong := {|min := -2147483647; max:= 2147483647|}.
Definition rangeUnsignedLong := {|min := 0; max:=  4294967295|}.
Definition rangeSignedLongLong := {|min := -9223372036854775807; max:= 9223372036854775807|}.
Definition rangeUnsignedLongLong := {|min := 0; max:= 18446744073709551615|}.
End TypeRanges.

Section Properties.
Axiom precisionPos: forall P t (H : isInteger t), (precision P H > 0)%Z.
Axiom sizeTUnsigned: forall P, isUnsigned P (size_t P).
Axiom ptrdiffTInteger: forall P, isInteger (ptrdiff_t P).
End Properties.
*)
}}

defns
JinTypeRange :: '' ::=

defn P |= n in typeRange ty :: :: inTypeRange :: '' by

(Z n) in typeRange P it
----------------------- :: InTypeRange
P |= n in typeRange it

defns
JleTypeRange :: '' ::=

defn P |= ty1 <=range ty2 :: :: leTypeRange :: '' by

typeRange P it1 <= typeRange P it2
---------------------------------- :: LeTypeRange
P |= it1 <=range it2

defns
JisSigned :: '' ::=

defn
P |= isSigned ty :: :: isSigned :: IsSigned by

-------------------------- :: Int
P |= isSigned (signed ibt)

P |= isCharSigned
------------------ :: Char
P |= isSigned char

defns
JisUnsigned :: '' ::=

defn
P |= isUnsigned ty :: :: isUnsigned :: IsUnsigned by

---------------------------- :: Int
P |= isUnsigned unsigned ibt

-------------------- :: Bool
P |= isUnsigned bool

not (P |= isCharSigned)
----------------------- :: Char
P |= isUnsigned char

defns
JeqRank :: '' ::=

defn
ty1 =rank ty2 :: :: eqRank :: EqRank by

----------------------------- :: Unsigned
signed ibt =rank unsigned ibt

------------------------ :: UnsignedChar
char =rank unsigned char

---------------------- :: SignedChar
char =rank signed char

isInteger ty
------------ :: Eq
ty =rank ty

defns
JltRank :: '' ::=

defn
P |= ty1 <rank ty2 :: :: ltRank :: LtRank by

% redundant without extended integer types 
P |= isSigned it1
P |= isSigned it2
P |= it1 <precision it2
----------------------- :: Precision
P |= it1 <rank it2

isInteger ty
not (isBool ty)
------------------ :: Bool
P |= bool <rank ty

--------------------------------------- :: LongLong
P |= signed long <rank signed long long

--------------------------------- :: Long
P |= signed int <rank signed long

---------------------------------- :: Int
P |= signed short <rank signed int

----------------------------------- :: Short
P |= signed char <rank signed short

P |= ty1 <rank ty
P |= ty  <rank ty2
------------------ :: Transitive
P |= ty1 <rank ty2

ty1 =rank ty1'
P |= ty1' <rank ty2
-------------------- :: Congruence1
P |= ty1 <rank ty2

ty2 =rank ty2'
P |= ty1 <rank ty2'
-------------------- :: Congruence2
P |= ty1 <rank ty2

defns
JleRank :: '' ::=

defn
P |= ty1 <=rank ty2 :: :: leRank :: LeRank by

ty1 =rank ty2
------------------- :: Eq
P |= ty1 <=rank ty2

P |= ty1 <rank ty2
------------------- :: Lt
P |= ty1 <=rank ty2

defns
JisArithmetic :: '' ::=

defn
isArithmetic ty :: :: isArithmetic :: IsArithmetic
{{ com TODO floats }}
by

isInteger ty
--------------- :: Integer
isArithmetic ty

defns
JisScalar :: '' ::=

defn
isScalar ty :: :: isScalar :: IsScalar by

isPointer ty
------------ :: Pointer
isScalar ty

isArithmetic ty
--------------- :: Arithmetic
isScalar ty

defns
JisArray :: '' ::=

defn
isArray ty :: :: isArray :: '' by

-------------- :: IsArray
isArray ty [n]

defns
JisFunction :: '' ::=

defn
isFunction ty :: :: isFunction :: '' by

-------------------------------------- :: IsFunction
isFunction (ty (qs1 ty1, .., qsk tyk))

defns
JisUnsignedOf :: '' ::=

defn
isUnsignedOf ty1 ty2 :: :: isCorrespondingUnsigned :: '' by

---------------------------------------- :: IsCorrespondingUnsigned
isUnsignedOf (signed ibt) (unsigned ibt)

defns
JisPromotion :: '' ::=

defn
P |= isPromotion ty1 ty2 :: :: isPromotion :: IsPromotion by

not (it = unsigned int)
not (it = signed int)
P |= it <=rank signed int
P |= it <=range signed int
----------------------------------------- :: ToSignedInt
P |= isPromotion it (signed int)

not (it = unsigned int)
not (it = signed int)
P |= it <=rank signed int
not (P |= it <=range signed int)
---------------------------------- :: ToUnsignedInt
P |= isPromotion it (unsigned int)

---------------------------------------------- :: UnsignedInt
P |= isPromotion (unsigned int) (unsigned int)

------------------------------------------ :: SignedInt
P |= isPromotion (signed int) (signed int)

not (P |= it <=rank signed int)
------------------------------- :: Rank
P |= isPromotion it it

defns
JisUsualArithmetic :: '' ::=

defn
P |= isUsualArithmetic ty1 ty2 ty :: :: isUsualArithmetic :: IsUsualArithmetic
{{ com TODO floats }}
by

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty
P |= isPromotion ty2 ty
--------------------------------- :: Eq
P |= isUsualArithmetic ty1 ty2 ty

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isSigned ty1'
P |= isSigned ty2'
P |= ty2' <rank ty1'
----------------------------------- :: GtSameSigned
P |= isUsualArithmetic ty1 ty2 ty1'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isUnsigned ty1'
P |= isUnsigned ty2'
P |= ty2' <rank ty1'
----------------------------------- :: GtSameUnsigned
P |= isUsualArithmetic ty1 ty2 ty1'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isSigned ty1'
P |= isSigned ty2'
P |= ty1' <rank ty2'
----------------------------------- :: LtSameSigned
P |= isUsualArithmetic ty1 ty2 ty2'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isUnsigned ty1'
P |= isUnsigned ty2'
P |= ty1' <rank ty2'
----------------------------------- :: LtSameUnsigned
P |= isUsualArithmetic ty1 ty2 ty2'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isSigned ty1'
P |= isUnsigned ty2'
P |= ty1' <=rank ty2'
----------------------------------- :: LtUnsigned
P |= isUsualArithmetic ty1 ty2 ty2'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isUnsigned ty1'
P |= isSigned ty2'
P |= ty2' <=rank ty1'
----------------------------------- :: GtUnsigned
P |= isUsualArithmetic ty1 ty2 ty1'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isUnsigned ty1'
P |= isSigned ty2'
P |= ty1' <=rank ty2'
P |= ty1' <=range ty2'
----------------------------------- :: LtSigned
P |= isUsualArithmetic ty1 ty2 ty2'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isSigned ty1'
P |= isUnsigned ty2'
P |= ty2' <=rank ty1'
P |= ty2' <=range ty1'
----------------------------------- :: GtSigned
P |= isUsualArithmetic ty1 ty2 ty1'

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isUnsigned ty1'
P |= isSigned ty2'
P |= ty1' <=rank ty2'
not (P |= ty1' <=range ty2')
isUnsignedOf ty2' ty2''
------------------------------------ :: LtSigned'
P |= isUsualArithmetic ty1 ty2 ty2''

isInteger ty1
isInteger ty2
P |= isPromotion ty1 ty1'
P |= isPromotion ty2 ty2'
not (ty1' = ty2')
P |= isSigned ty1'
P |= isUnsigned ty2'
P |= ty2' <=rank ty1'
not (P |= ty2' <=range ty1')
isUnsignedOf ty1' ty1''
------------------------------------ :: GtSigned'
P |= isUsualArithmetic ty1 ty2 ty1''

defns
JisObject :: '' ::=

defn
isObject ty :: :: isObject :: IsObject
{{ com TODO struct/enum }}
by

----------- :: BasicType
isObject bt

------------- :: Void
isObject void

------------------ :: Pointer
isObject (qs ty *)

----------------- :: Array
isObject (ty [n])

defns
JisComplete :: '' ::=

defn
isComplete ty :: :: isComplete :: IsComplete
% No VLA implies that arrays are always complete.
% Note: Completeness is a property of object types, i.e
%   isComplete ty -> isObject ty
by

------------- :: BasicType
isComplete bt

-------------------- :: Pointer
isComplete (qs ty *)

------------------- :: Array
isComplete (ty [n])

defns
JisIncomplete :: '' ::=

defn
isIncomplete ty :: :: isIncomplete :: IsIncomplete by

----------------- :: Void
isIncomplete void

defns
JisModifiable :: '' ::=

defn
isModifiable qualifiers type :: :: isModifiable :: ''
{{ com TODO struct/enum types }}
by

isObject ty
not (isArray ty)
not (isIncomplete ty)
not (const in qs)
--------------------- :: IsModifiable
isModifiable qs ty

defns
JisReal :: '' ::=

defn
isReal ty :: :: isReal :: IsReal
{{ com TODO floating }}
by

isInteger ty
------------:: Integer
isReal ty

defns
JisLvalueConvertable :: '' ::=

defn
isLvalueConvertable ty :: :: isLvalueConvertable :: ''
{{ com TODO incomplete non-array type results in undefined behaviour }}by

not (isArray ty)
isComplete ty
---------------------- :: IsLvalueConvertable
isLvalueConvertable ty

defns
JisCompatible :: '' ::=

defn
isCompatible ty1 ty2 :: :: isCompatible :: IsCompatible by

------------------ :: Eq
isCompatible ty ty

isCompatible ty ty'
isCompatible ty1 ty'1 .. isCompatible tyk ty'k
------------------------------------------------------------------------- :: Function
isCompatible (ty (qs1 ty1, .., qsk tyk)) (ty' (qs'1 ty'1, .., qs'k ty'k))

defns
JisComposite :: '' ::=

defn
isComposite ty1 ty2 ty :: :: isComposite :: IsComposite
  {{ com Currently, only first rule is relevant (missing function prototypes, VLAs, arrays of unknown size).}}
by
% lemma: isComposite ty1 ty2 ty ->
%          isCompatible ty1 ty2 /\isCompatible ty1 ty /\ isCompatible ty2 ty

-------------------- :: Eq
isComposite ty ty ty

isComposite ty1 ty2 ty
---------------------------------------- :: Array
isComposite (ty1 [n]) (ty2 [n]) (ty [n])

isComposite ty' ty'' ty
isComposite ty'1 ty''1 ty1 .. isComposite ty'k ty''k tyk
------------------------------------------------------------------------------------------------------ :: Function
isComposite (ty' (qs'1 ty'1, .., qs'k ty'k)) (ty'' (qs''1 ty''1, .., qs''k ty''k)) (ty (ty1, .., tyk))

% embed {{ coq
% (* defns JisCompatible *)
% Inductive isCompatible : type -> type -> Prop :=    (* defn isCompatible *)
%  | IsCompatibleEq : forall (ty:type),
%      isCompatible ty ty
%  | IsCompatibleFunction : forall (args1 args2 : list (qualifiers*type)) (res1 res2 : type),
%      isCompatible res1 res2 ->
%      List.Forall2 isCompatible (List.map (@snd _ type) args1) (List.map (@snd _ type) args2) ->
%      isCompatible (Function res1 args1) (Function res2 args2).

% Inductive Forall3 {A B C : Type} (R : A -> B -> C -> Type) : list A -> list B -> list C -> Type :=
%   | Forall3_nil  : Forall3 R nil nil nil
%   | Forall3_cons : forall {a : A} {b : B} {c : C} {lA : list A} {lB : list B} {lC : list C},
%                    R a b c -> Forall3 R lA lB lC -> Forall3 R (a :: lA) (b :: lB) (c :: lC).

% (* defns JisComposite *)
% Inductive isComposite : type -> type -> type -> Prop :=    (* defn isComposite *)
%  | IsCompositeEq : forall (ty:type),
%      isComposite ty ty ty
%  | IsCompositeArray : forall (ty1:type) (n:nat) (ty2 ty:type),
%      isComposite ty1 ty2 ty ->
%      isComposite  (Array ty1 n)   (Array ty2 n)   (Array ty n) 
%  | IsCompositeFunction : forall (args1 args2 args : list (qualifiers*type)) (res1 res2 res : type),
%      isComposite res1 res2 res ->
%      List.Forall (fun qs => qs = nil) (List.map (@fst qualifiers _) args) ->
%      Forall3 isComposite
%              (List.map (@snd _ type) args1)
%              (List.map (@snd _ type) args2)
%              (List.map (@snd _ type) args ) ->
%      isComposite (Function res1 args1) (Function res2 args2) (Function res args).
% }}
