(* generated by Ott 0.21.2 from: AilAux_.ott *)

Require Import Bool.

Require Import Common.
Require Import AilTypes.
Require Import AilTypesAux.
Require Import AilSyntax. 

(** definitions *)

(* defns Jfv *)
Inductive fv : identifier -> expression -> Prop :=    (* defn fv *)
 | FvUnary : forall (id:identifier) (uop:unaryOperator) (e:expression),
     fv id e ->
     fv id (Unary uop e)
 | FvBinary1 : forall (id:identifier) (e1:expression) (bop:binaryOperator) (e2:expression),
     fv id e1 ->
     fv id (Binary e1 bop e2)
 | FvBinary2 : forall (id:identifier) (e1:expression) (bop:binaryOperator) (e2:expression),
     fv id e2 ->
     fv id (Binary e1 bop e2)
 | FvAssign1 : forall (id:identifier) (e1 e2:expression),
     fv id e1 ->
     fv id (Assign e1 e2)
 | FvAssign2 : forall (id:identifier) (e1 e2:expression),
     fv id e2 ->
     fv id (Assign e1 e2)
 | FvCompoundAssign1 : forall (id:identifier) (e1:expression) (aop:arithmeticOperator) (e2:expression),
     fv id e1 ->
     fv id (CompoundAssign e1 aop e2)
 | FvCompoundAssign2 : forall (id:identifier) (e1:expression) (aop:arithmeticOperator) (e2:expression),
     fv id e2 ->
     fv id (CompoundAssign e1 aop e2)
 | FvConditional1 : forall (id:identifier) (e1 e2 e3:expression),
     fv id e1 ->
     fv id (Conditional e1 e2 e3)
 | FvConditional2 : forall (id:identifier) (e1 e2 e3:expression),
     fv id e2 ->
     fv id (Conditional e1 e2 e3)
 | FvConditional3 : forall (id:identifier) (e1 e2 e3:expression),
     fv id e3 ->
     fv id (Conditional e1 e2 e3)
 | FvCast : forall (id:identifier) (qs:qualifiers) (ty:type) (e:expression),
     fv id e ->
     fv id (Cast qs  ty e)
 | FvCall : forall (ls:arguments) (id:identifier) (e:expression),
     fv id e ->
     fv id (Call e ls)
 | FvCallArgument : forall (ls:arguments) (id:identifier) (e:expression),
     fv_arguments id ls ->
     fv id (Call e ls)
 | FvVariable : forall (id:identifier),
     fv id (Var id)
with fv_arguments : identifier -> arguments -> Prop :=
 | FvConsHead : forall id e l,
     fv id e ->
     fv_arguments id (ArgumentsCons e l)
 | FvConsTail: forall id e l,
     fv_arguments id l ->
     fv_arguments id (ArgumentsCons e l).
(** definitions *)

(* defns JisNullPointerConstant *)
Inductive isNullPointerConstant : expression -> Set :=    (* defn isNullPointerConstant *)
 | IsNullPointerConstantZero : 
     isNullPointerConstant (Constant (ConstantInteger  ( 0 , None) ))
 | IsNullPointerConstantPointer : forall qs qs' (e:expression),
     isNullPointerConstant e ->
     isUnqualified qs ->
     isUnqualified qs' ->
     isNullPointerConstant (Cast qs (Pointer qs' Void) e).
