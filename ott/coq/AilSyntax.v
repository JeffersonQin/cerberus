(* generated by Ott 0.21.2 from: AilSyntax_.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.

Require Import Nat.
Require Import Common.
Require Import AilTypes.

Open Scope type.

Definition identifier := nat.
Instance identifier_DecEq : DecidableEq identifier.
Proof. dec_eq. Defined.

Inductive integerSuffix : Set := 
 | UnsignedInt : integerSuffix
 | UnsignedLong : integerSuffix
 | UnsignedLongLong : integerSuffix
 | SignedLong : integerSuffix
 | SignedLongLong : integerSuffix.

Instance integerSuffix_DecEq : DecidableEq integerSuffix.
Proof. dec_eq. Defined.

Definition integerConstant : Set := nat * option integerSuffix.

Instance integerConstant_DecEq : DecidableEq integerConstant.
Proof. dec_eq. Defined.

Inductive arithmeticOperator : Set :=  (*r 6.5.5 Multiplicative operators *)
 | Mul : arithmeticOperator
 | Div : arithmeticOperator
 | Mod : arithmeticOperator (*r 6.5.6 Additive operators *)
 | Add : arithmeticOperator
 | Sub : arithmeticOperator (*r 6.5.7 Bitwise shift operators *)
 | Shl : arithmeticOperator
 | Shr : arithmeticOperator (*r 6.5.10 Bitwise AND operator *)
 | Band : arithmeticOperator (*r 6.5.11 Bitwise exclusive OR operator *)
 | Bor : arithmeticOperator (*r 6.5.12 Bitwise inclusive OR operator *)
 | Xor : arithmeticOperator (*r Binary operators from 6.5.5-14, 6.5.17 *).

Instance arithmeticOperator_DecEq : DecidableEq arithmeticOperator.
Proof. dec_eq. Defined.

Inductive constant : Set := 
 | ConstantInteger (int_const:integerConstant).

Instance constant_DecEq : DecidableEq constant.
Proof. dec_eq. Defined.

Inductive unaryOperator : Set := 
 | Plus : unaryOperator
 | Minus : unaryOperator
 | Bnot : unaryOperator
 | Address : unaryOperator
 | Indirection : unaryOperator
 | PostfixIncr : unaryOperator (*r Note: Appears prefix in concrete syntax. *)
 | PostfixDecr : unaryOperator (*r Note: Appears prefix in concrete syntax. *).

Instance unaryOperator_DecEq : DecidableEq unaryOperator.
Proof. dec_eq. Defined.

Inductive binaryOperator : Set :=  (*r Group of operators also used for assigments *)
 | Arithmetic (aop:arithmeticOperator) (*r 6.5.17 Comma operator *)
 | Comma : binaryOperator (*r 6.5.13 Logical AND operator *)
 | And : binaryOperator (*r 6.5.14 Logical OR operator *)
 | Or : binaryOperator (*r 6.5.8 Relational operators *)
 | Lt : binaryOperator
 | Gt : binaryOperator
 | Le : binaryOperator
 | Ge : binaryOperator (*r 6.5.9 Equality operators *)
 | Eq : binaryOperator
 | Ne : binaryOperator.

Instance binaryOperator_DecEq : DecidableEq binaryOperator.
Proof. dec_eq. Defined.

Inductive expression : Set := 
 | Unary (uop:unaryOperator) (e:expression)
 | Binary (e1:expression) (bop:binaryOperator) (e2:expression)
 | Assign (e1:expression) (e2:expression)
 | CompoundAssign (e1:expression) (aop:arithmeticOperator) (e2:expression)
 | Conditional (e1:expression) (e2:expression) (e3:expression)
 | Cast (qs:qualifiers) (ty:type) (e:expression)
 | Call (e:expression) (l:arguments)
 | Constant (c:constant)
 | Var (id:identifier)
 | SizeOf (qs:qualifiers) (ty:type)
 | AlignOf (qs:qualifiers) (ty:type)
with arguments : Set :=
 | ArgumentsNil
 | ArgumentsCons (e:expression) (l:arguments).

Fixpoint expression_eq_dec (e1 e2 : expression) : Decision (e1 = e2)
with     arguments_eq_dec  (l1 l2 :  arguments) : Decision (l1 = l2).
Proof.
  + dec_eq.
  + dec_eq.
Defined.

Instance expression_DecEq : DecidableEq expression := expression_eq_dec.
Instance arguments_DecEq  : DecidableEq arguments  := arguments_eq_dec.

Definition definition : Set := identifier * expression.
Instance definition_DecEq : DecidableEq definition.
Proof. dec_eq. Defined.

Definition gamma : Set := list (identifier * (AilTypes.qualifiers * AilTypes.type)).

Inductive statement : Set := 
 | Skip
 | Expression (e:expression)
 | Block (G:gamma) (block:list statement)
 | If (e:expression) (s1:statement) (s2:statement)
 | While (e:expression) (s:statement)
 | Do (s:statement) (e:expression)
 | Break : statement
 | Continue
 | ReturnVoid
 | Return (e:expression)
 | Switch (e:expression) (s:statement)
 | Case (int_const:integerConstant) (s:statement)
 | Default (s:statement)
 | Label (id:identifier) (s:statement)
 | Goto (id:identifier)
 | Declaration (ds:list definition).

Definition declaration : Set := nat * option AilTypes.storageDuration.

Definition sigma : Set := list (identifier * (AilTypes.type * statement)).

Definition program : Set := identifier * sigma.
(** induction principles *)
