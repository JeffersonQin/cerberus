(* generated by Ott 0.21.2 from: Implementation_.ott *)
Add LoadPath "../../../ott/coq".

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import ott_list_core.


Require Export ZArith.
Require Import Range AilTypes.


Open Scope Z.

Inductive binaryMode :=
  | TwosComplement : binaryMode
  | OnesComplement : binaryMode
  | SignPlusMagnitude : binaryMode.


(* From 6.3.1.1
— The rank of a signed integer type shall be greater than the rank of any signed integer
type with less precision.
— The rank of long long int shall be greater than the rank of long int, which
shall be greater than the rank of int, which shall be greater than the rank of short
int, which shall be greater than the rank of signed char.

Suppose precision P (long long int) < precision P (long int). Then ltRank P
(long long int) (long int). But the second bullet tells us that ltRank P (long
int) (long long int). So P (long int) ≤ precision P (long long int).
*)

Record impl := mkImpl {
  binMode : binaryMode;
  isCharSigned : bool;
  precision : integerType -> Z;
  size_t : type;
  ptrdiff_t : type;

  precision_Char               :  precision Char = if isCharSigned
                                                     then precision (Signed   Ichar)
                                                     else precision (Unsigned Ichar);

  minPrecision_Bool            :  1 <= precision Bool;

  minPrecision_Signed_Ichar    :  8 <= precision (Signed    Ichar);
  minPrecision_Signed_Short    : 16 <= precision (Signed    Short);
  minPrecision_Signed_Int      : 16 <= precision (Signed      Int);
  minPrecision_Signed_Long     : 32 <= precision (Signed     Long);
  minPrecision_Signed_LongLong : 64 <= precision (Signed LongLong);

  (* Follows from 6.2.6.2 #2:
       if there are M value bits in the signed type and N in the unsigned
       type, then M ≤ N
   *)
  lePrecision_Signed_Unsigned ibt   : precision (Signed   ibt) <= precision (Unsigned    ibt);

  (* unsigned char has no padding. *)
  lePrecision_Signed_Unsigned_Ichar : precision (Signed Ichar) <  precision (Unsigned  Ichar);

  lePrecision_Signed_Long_LongLong : precision (Signed  Long) <= precision (Signed LongLong);
  lePrecision_Signed_Int_Long      : precision (Signed   Int) <= precision (Signed     Long);
  lePrecision_Signed_Short_Int     : precision (Signed Short) <= precision (Signed      Int);
  lePrecision_Signed_Ichar_Short   : precision (Signed Ichar) <= precision (Signed    Short);

  (* Note: this cannot be inferred from the standard text but it is vital for
           integer conversions.
   *)
  lePrecision_Unsigned_Long_LongLong : precision (Unsigned  Long) <= precision (Unsigned LongLong);
  lePrecision_Unsigned_Int_Long      : precision (Unsigned   Int) <= precision (Unsigned     Long);
  lePrecision_Unsigned_Short_Int     : precision (Unsigned Short) <= precision (Unsigned      Int);
  lePrecision_Unsigned_Ichar_Short   : precision (Unsigned Ichar) <= precision (Unsigned    Short);
  lePrecision_Unsigned_Bool_Ichar    : precision Bool             <= precision (Unsigned    Ichar)
}.

Require Omega.

Lemma precision_ge_one P it : 1 <= precision P it.
Proof.
  destruct it.
  + set (precision_Char P) as Hchar;
    case_eq (isCharSigned P); intros Heq; rewrite Heq in Hchar; clear Heq;
    set (minPrecision_Signed_Ichar P);
    [|set (lePrecision_Signed_Unsigned P Ichar)];
    omega.
  + exact (minPrecision_Bool P).
  + set (minPrecision_Signed_Ichar    P);
    set (minPrecision_Signed_Short    P);
    set (minPrecision_Signed_Int      P);
    set (minPrecision_Signed_Long     P);
    set (minPrecision_Signed_LongLong P).
    destruct ibt; omega.
  + set (minPrecision_Signed_Ichar    P);
    set (minPrecision_Signed_Short    P);
    set (minPrecision_Signed_Int      P);
    set (minPrecision_Signed_Long     P);
    set (minPrecision_Signed_LongLong P).
    set (lePrecision_Signed_Unsigned P ibt).
    destruct ibt; omega.
Defined.
