(* generated by Ott 0.21.2 from: AilTypes_.ott *)

Require Import Common.
Require Import Arith.
Require Import Bool.
Require Import List.

Require Import Nat.

Inductive integerBaseType : Set :=  (*r standard signed integer types (\S6.2.5\#4) *)
 | Ichar : integerBaseType (*r corresponds to \textbf{signed/unsigned char} *)
 | Short : integerBaseType (*r corresponds to \textbf{short int} *)
 | Int : integerBaseType
 | Long : integerBaseType (*r corresponds to \textbf{long int} *)
 | LongLong : integerBaseType (*r corresponds to \textbf{long long int} *).

Instance integerBaseType_DecEq : DecidableEq integerBaseType.
Proof. dec_eq. Defined.

Inductive integerType : Set :=  (*r integer types (\S6.2.5\#17) *)
 | Char : integerType
 | Bool : integerType (*r corresponds to \textbf{\_Bool} *)
 | Signed (ibt:integerBaseType)
 | Unsigned (ibt:integerBaseType).

Instance integerType_DecEq : DecidableEq integerType.
Proof. dec_eq. Defined.

Ltac destruct_integerType_hyp H :=
  let ibt := fresh in
  destruct H as [| |ibt|ibt];
  try destruct ibt.

Ltac destruct_integerBaseType :=
  repeat match goal with
  | [ ibt : integerBaseType |- _] => destruct ibt
  end.

Ltac destruct_integerType :=
  repeat match goal with
  | [ it  : integerType     |- _] => destruct it
  | [ ibt : integerBaseType |- _] => destruct ibt
  end.

Ltac clear_integerType :=
  repeat match goal with
  | [ it  : integerType     |- _] => clear dependent it
  | [ ibt : integerBaseType |- _] => clear dependent ibt
end.

Inductive qualifier : Set :=  (*r type qualifiers (\S6.7.3) *)
 | Const : qualifier
 | Restrict : qualifier
 | Volatile : qualifier.

Instance qualifier_DecEq : DecidableEq qualifier.
Proof. dec_eq. Defined.

Inductive basicType : Set :=  (*r basic types (\S6.2.5\#14) *)
 | Integer (it:integerType).

Instance basicType_DecEq : DecidableEq basicType.
Proof. dec_eq. Defined.

Definition qualifiers : Set := list qualifier.

Instance qualifiers_DecEq : DecidableEq qualifiers := list_DecEq.

Inductive type : Set :=  (*r $\texttt{Ail}_\tau$ types *)
 | Void : type (*r \texttt{void} type (\S6.2.5\#19) *)
 | Basic (bt:basicType) (*r basic types (\S6.2.5\#14) *)
 | Array (ty:type) (n:nat) (*r array types (\S6.2.5\#20) *)
 | Function (ty:type) (p:params) (*r function types *)
 | Pointer (qs:qualifiers) (ty:type) (*r pointer types *)
with params : Set :=
 | ParamsNil  
 | ParamsCons (qs:qualifiers) (ty:type) (p:params).

Require Import Program.

Fixpoint type_eq_dec   (t1 t2 :   type) : Decision (t1 = t2)
with     params_eq_dec (p1 p2 : params) : Decision (p1 = p2).
Proof.
  + dec_eq.
  + dec_eq.
Defined.

Instance type_DecEq : DecidableEq type   := type_eq_dec.
Instance args_DecEq : DecidableEq params := params_eq_dec.

Inductive typeCategory : Set := 
 | LvalueType (qs:qualifiers) (ty:type)
 | ExpressionType (ty:type).

Instance typeCategory_DecEq : DecidableEq typeCategory.
Proof. dec_eq. Defined.

Inductive storageDuration : Set :=  (*r storage duration (\S6.2.4\#1) *)
 | Static : storageDuration
 | Thread : storageDuration
 | Automatic : storageDuration
 | Allocated : storageDuration.

Instance storageDuration_EqDec : DecidableEq storageDuration.
Proof. dec_eq. Defined.
