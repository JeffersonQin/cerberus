(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

(* An interface for SibylFS *)
open import Num Maybe Either

type fs_stat
declare ocaml target_rep type fs_stat = `Sibylfs.fs_stat`

val fs_dev: fs_stat -> integer
declare ocaml target_rep function fs_dev = `Sibylfs.fs_dev`

val fs_ino: fs_stat -> integer
declare ocaml target_rep function fs_ino = `Sibylfs.fs_ino`

val fs_mode: fs_stat -> integer
declare ocaml target_rep function fs_mode = `Sibylfs.fs_mode`

val fs_nlink: fs_stat -> integer
declare ocaml target_rep function fs_nlink = `Sibylfs.fs_nlink`

val fs_uid: fs_stat -> integer
declare ocaml target_rep function fs_uid = `Sibylfs.fs_uid`

val fs_gid: fs_stat -> integer
declare ocaml target_rep function fs_gid = `Sibylfs.fs_gid`

val fs_rdev: fs_stat -> integer
declare ocaml target_rep function fs_rdev = `Sibylfs.fs_rdev`

val fs_size: fs_stat -> integer
declare ocaml target_rep function fs_size = `Sibylfs.fs_size`

val fs_atime: fs_stat -> integer
declare ocaml target_rep function fs_atime = `Sibylfs.fs_atime`

val fs_mtime: fs_stat -> integer
declare ocaml target_rep function fs_mtime = `Sibylfs.fs_mtime`

val fs_ctime: fs_stat -> integer
declare ocaml target_rep function fs_ctime = `Sibylfs.fs_ctime`

type fs_error
declare ocaml target_rep type fs_error = `Sibylfs.fs_error`

val fs_string_of_error: fs_error -> string
declare ocaml target_rep function fs_string_of_error = `Sexplib.Sexp.to_string @@ Fs_spec.Fs_types.sexp_of_error`

type fs_state
declare ocaml target_rep type fs_state = `Sibylfs.fs_state`

val fs_initial_state: fs_state
declare ocaml target_rep function fs_initial_state = `Sibylfs.fs_initial_state`

val string_of_fs_state: fs_state -> string
declare ocaml target_rep function string_of_fs_state = `Sexplib.Sexp.to_string_hum @@ Sibylfs.sexp_of_fs_state`

val fs_mkdir: fs_state -> string -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_mkdir = `Sibylfs.run_mkdir`

val fs_open: fs_state -> string -> integer -> maybe integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_open = `Sibylfs.run_open`

val fs_close: fs_state -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_close = `Sibylfs.run_close`

val fs_write: fs_state -> integer -> list char -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_write = `Sibylfs.run_write`

val fs_read: fs_state -> integer -> integer -> fs_state * (either fs_error (list char))
declare ocaml target_rep function fs_read = `Sibylfs.run_read`

val fs_pwrite: fs_state -> integer -> list char -> integer -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_pwrite = `Sibylfs.run_pwrite`

val fs_pread: fs_state -> integer -> integer -> integer -> fs_state * (either fs_error (list char))
declare ocaml target_rep function fs_pread = `Sibylfs.run_pread`

val fs_rename: fs_state -> string -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_rename = `Sibylfs.run_rename`

val fs_umask: fs_state -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_umask = `Sibylfs.run_umask`

val fs_chmod: fs_state -> string -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_chmod = `Sibylfs.run_chmod`

val fs_chdir: fs_state -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_chdir = `Sibylfs.run_chdir`

val fs_chown: fs_state -> string -> integer -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_chown = `Sibylfs.run_chown`

val fs_link: fs_state -> string -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_link = `Sibylfs.run_link`

val fs_readlink: fs_state -> string -> fs_state * (either fs_error (list char))
declare ocaml target_rep function fs_readlink = `Sibylfs.run_readlink`

val fs_symlink: fs_state -> string -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_symlink = `Sibylfs.run_symlink`

val fs_rmdir: fs_state -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_rmdir = `Sibylfs.run_rmdir`

val fs_truncate: fs_state -> string -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_truncate = `Sibylfs.run_truncate`

val fs_unlink: fs_state -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_unlink = `Sibylfs.run_unlink`

val fs_lseek: fs_state -> integer -> integer -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_lseek = `Sibylfs.run_lseek`

val fs_stat: fs_state -> string -> fs_state * (either fs_error fs_stat)
declare ocaml target_rep function fs_stat = `Sibylfs.run_stat`

val fs_lstat: fs_state -> string -> fs_state * (either fs_error fs_stat)
declare ocaml target_rep function fs_lstat = `Sibylfs.run_lstat`

val fs_opendir: fs_state -> string -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_opendir = `Sibylfs.run_opendir`

val fs_readdir: fs_state -> integer -> fs_state * (either fs_error (list char))
declare ocaml target_rep function fs_readdir = `Sibylfs.run_readdir`

val fs_rewinddir: fs_state -> integer -> fs_state
declare ocaml target_rep function fs_rewinddir = `Sibylfs.run_rewinddir`

val fs_closedir: fs_state -> integer -> fs_state * (either fs_error nat)
declare ocaml target_rep function fs_closedir = `Sibylfs.run_closedir`
