(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives
(* Monadic parsing (see "Monadic Parsing in Haskell" from Hutton & Meijer) *)

type parserM 'a =
 | ParserM of (list char -> list ('a * list char))

val parse: forall 'a. parserM 'a -> list char -> list ('a * list char)
let parse (ParserM p) = p


val return: forall 'a. 'a -> parserM 'a
let parse_return a = ParserM (fun cs -> [(a, cs)])
let inline return = parse_return

val bind: forall 'a 'b. parserM 'a -> ('a -> parserM 'b) -> parserM 'b
let parse_bind p f = ParserM (fun cs ->
  List.concatMap (fun (a, cs') -> parse (f a) cs') (parse p cs)
)
let inline bind = parse_bind

val mzero: forall 'a. parserM 'a
let mzero = ParserM (fun _ -> [])

val mplus: forall 'a. parserM 'a -> parserM 'a -> parserM 'a
let parse_mplus p1 p2 = ParserM (fun cs -> parse p1 cs ++ parse p2 cs)
let inline mplus = parse_mplus

val liftM: forall 'a 'b. ('a -> 'b) -> parserM 'a -> parserM 'b
let liftM f p = ParserM (fun cs ->
  map (fun (a, cs') -> (f a, cs')) $ parse p cs
)


let inline (>>=)    = bind
let inline (>>) m f = bind m (fun _ -> f)


val item: parserM char
let item =
  ParserM (fun cs -> match cs with
    | []      -> []
    | (c::cs) -> [(c, cs)]
  end)


(* NOTE: the inline is just because ocaml doesn't like <|> as an operator (that's a lem bug I guess) *)
val        (<|>): forall 'a. parserM 'a -> parserM 'a -> parserM 'a
let inline (<|>) p1 p2 =
  ParserM (fun cs -> match parse (mplus p1 p2) cs with
    | []     -> []
    | (x::_) -> [x]
  end)


val option: forall 'a. 'a -> parserM 'a -> parserM 'a
let parse_option x p = p <|> return x
let inline option = parse_option


val optionMaybe: forall 'a. parserM 'a -> parserM (maybe 'a)
let optionMaybe p =
  option Nothing (liftM (fun z -> Just z) p) 


val sat: (char -> bool) -> parserM char
let sat pred =
  item >>= fun c ->
  if pred c then return c else mzero


val char: char -> parserM char
let parse_char c =
  sat (fun z -> c = z)
let inline char = parse_char


val anyChar: parserM char
let anyChar =
  sat (fun _ -> true)


val string: list char -> parserM (list char)
let rec string cs =
  match cs with
    | [] ->
        return []
    | (c::cs') ->
        char c     >>
        string cs' >>
        return (c::cs')
  end

val     many:  forall 'a. parserM 'a -> parserM (list 'a)
val     many1: forall 'a. parserM 'a -> parserM (list 'a)
let rec many p = many1 p <|> return []
and     many1 p =
  p      >>= fun a   ->
  many p >>= fun _as ->
  return (a::_as)
