(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives Utils AilSyntax Core
import Loc TypingError Undefined Constraint Symbol

type misc_violation =
  | UndeclaredIdentifier of string (*§6.5.1#2 *)
  | MultipleEnumDeclaration of Symbol.identifier (* §6.7.2.2#3, FOOTNOTE.127 *)
  | EnumSimpleDeclarationConstruction (* §6.7.2.3#7, FOOTNOTE.131 *)
  | ArrayDeclarationStarIllegalScope (* §6.7.6.2#4, sentence 2 *)
  | ArrayCharStringLiteral (* §6.7.9#14 *)
  | UniqueVoidParameterInFunctionDeclaration (* TODO: unknown quote *)
  | TypedefInitializer (* TODO: unknown quote *)

type desugar_cause =
  | Desugar_ConstraintViolation of Constraint.violation
  | Desugar_UndefinedBehaviour of Undefined.undefined_behaviour
  | Desugar_MiscViolation of misc_violation
  | Desugar_NotYetSupported of string
  | Desugar_NeverSupported of string
  | Desugar_TODO of string (* TODO: get rid of this constructor eventually *)

type core_typing_cause =
  | UndefinedStartup of Symbol.sym (* Found no definition of the startup fun/proc *)
  | Mismatch of string (* syntax info *) * core_base_type (* expected *) * core_base_type (* found *)
  | MismatchBinaryOperator of Core.binop
  | MismatchIf of core_base_type (* then *) * core_base_type (* else *)
  | MismatchExpected of string (* syntax info *) * core_base_type (* expected *) * string (* found *)
  | MismatchFound of string (* syntax info *) * string (* expected *) * maybe core_base_type (* found *)
  | UnresolvedSymbol of name
  | FunctionOrProcedureSymbol of Symbol.sym
  | CFunctionExpected of name (* symbol *)
  | CFunctionParamsType
  | CFunctionReturnType
  | TooGeneral
  | CoreTyping_TODO of string (* TODO: get rid of this constructor eventually *)
  (* NOTE: I cannot fire these errors *)
  | HeterogenousList of core_base_type (* expected *) * core_base_type (* found *)
  | InvalidTag of Symbol.sym
  | InvalidMember of Symbol.sym * Symbol.identifier

type core_linking_cause =
  | DuplicateExternalName of Symbol.identifier
  | DuplicateMain

type core_run_cause =
  | Illformed_program of string (* typing or name-scope error *)
  | Found_empty_stack of string (* TODO debug *)
  | Reached_end_of_proc
  | Unknown_impl
  | Unresolved_symbol of Loc.t * Symbol.sym (* found an unresolved symbolic name in core_eval *)

type cparser_cause =
  | Cparser_invalid_symbol
  | Cparser_invalid_line_number of string
  | Cparser_unexpected_eof
  | Cparser_unexpected_token of string
  | Cparser_non_standard_string_concatenation

type core_parser_cause =
  | Core_parser_invalid_symbol
  | Core_parser_unexpected_token of string
  | Core_parser_unresolved_symbol of string
  | Core_parser_multiple_declaration of string
  | Core_parser_ctor_wrong_application of int (*expected*) * int (* found *)
  | Core_parser_wrong_decl_in_std
  | Core_parser_undefined_startup

type driver_cause =
  | Driver_UB of list Undefined.undefined_behaviour

type cause =
  | CPP of string (* NOTE: this is an empty string when piping to stderr *)
  | CPARSER of cparser_cause
  | DESUGAR of desugar_cause
  | AIL_TYPING of TypingError.typing_error
  | CORE_PARSER of core_parser_cause
  | CORE_TYPING of core_typing_cause
  | CORE_LINKING of core_linking_cause
  | CORE_RUN of core_run_cause
  | DRIVER of driver_cause
  | UNSUPPORTED of string

type error = Loc.t * cause

instance (Show core_run_cause)
  let show = function
    | Illformed_program str ->
        "Illformed_program[" ^ str ^ "]"
    | Found_empty_stack str ->
        "Found_empty_stack[" ^ str ^ "]"
    | Reached_end_of_proc ->
        "Reached_end_of_proc"
    | Unknown_impl ->
        "Unknown_impl"
    | Unresolved_symbol _ sym ->
        "Unresolved_symbol[" ^ show sym ^ "]"
  end
end
