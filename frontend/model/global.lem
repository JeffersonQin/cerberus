(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives

type execution_mode =
  | Interactive
  | Exhaustive
  | Random

instance (Eq execution_mode)
  let (=) = unsafe_structural_equality
  let (<>) = unsafe_structural_inequality
end

declare ocaml target_rep type     execution_mode = `Global_ocaml.execution_mode`
declare ocaml target_rep function Interactive    = `Global_ocaml.Interactive`
declare ocaml target_rep function Exhaustive     = `Global_ocaml.Exhaustive`
declare ocaml target_rep function Random         = `Global_ocaml.Random`

declare hol target_rep type     execution_mode = `util$execution_mode`
declare hol target_rep function Interactive    = `util$Interactive`
declare hol target_rep function Exhaustive     = `util$Exhaustive`
declare hol target_rep function Random         = `util$Random`

val current_execution_mode: unit -> maybe execution_mode
declare ocaml target_rep function current_execution_mode = `Global_ocaml.current_execution_mode`
declare hol   target_rep function current_execution_mode = `util$current_execution_mode`


val using_concurrency: unit -> bool
declare ocaml target_rep function using_concurrency = `Global_ocaml.concurrency_mode`
declare hol  target_rep function using_concurrency u = false


val isDefacto: unit -> bool
declare ocaml target_rep function isDefacto = `Global_ocaml.isDefacto`

val isAgnostic: unit -> bool
declare ocaml target_rep function isAgnostic = `Global_ocaml.isAgnostic`


type cerb_switch =
  | SW_strict_reads
  | SW_forbid_nullptr_free
  | SW_zap_dead_pointers
  | SW_no_integer_provenance

declare ocaml target_rep function SW_strict_reads = `Switches.SW_strict_reads`
declare ocaml target_rep function SW_forbid_nullptr_free = `Switches.SW_forbid_nullptr_free`
declare ocaml target_rep function SW_zap_dead_pointers = `Switches.SW_zap_dead_pointers`
declare ocaml target_rep function SW_no_integer_provenance = `Switches.SW_no_integer_provenance`


val is_PNVI: unit -> bool
declare ocaml target_rep function is_PNVI = `Switches.is_PNVI`

val has_strict_pointer_arith: unit -> bool
declare ocaml target_rep function has_strict_pointer_arith = `Switches.has_strict_pointer_arith`


val has_switch: cerb_switch -> bool
declare ocaml target_rep function has_switch = `Switches.has_switch`








