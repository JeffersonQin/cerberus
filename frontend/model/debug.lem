(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

import Loc

type domain =
  | DB_clexer
  | DB_cparser
  | DB_desugaring
  | DB_ail_typing
  | DB_elaboration
  | DB_core_typing
  | DB_core_dynamics
  | DB_driver
  | DB_concurrency
  | DB_driver_step
  | DB_memory

declare ocaml target_rep type domain = `Debug_ocaml.domain`

val get_level: unit -> nat
declare ocaml target_rep function get_level   = `Debug_ocaml.get_debug_level`
declare hol   target_rep function get_level u = 0 (* TODO: HOL hack *)


val output_string: string -> unit
declare ocaml target_rep function output_string = `Debug_ocaml.output_string2`
declare hol   target_rep function output_string = `util$output_string`

val print_debug: nat -> list domain -> (unit -> string) -> unit
declare ocaml target_rep function print_debug = `Debug_ocaml.print_debug`
declare hol   target_rep function print_debug = `util$print_debug`

val print_debug_located: nat -> list domain -> Loc.t -> (unit -> string) -> unit
declare ocaml target_rep function print_debug_located = `Debug_ocaml.print_debug_located`
declare hol   target_rep function print_debug_located =
                                  `util$print_debug_located`

val warn: list domain -> (unit -> string) -> unit
declare ocaml target_rep function warn = `Debug_ocaml.warn`
declare hol   target_rep function warn = `util$output_string`


(*
open import Pervasives 
import Boot

let _DEBUG level f k =
  if level <= Boot.debug_level then
    f k
  else
    k


(* Used in [core_run.lem], print the collected continuation in a Core program *)
let print_cont_map cont_map k =
  Boot.print_debug "TODO[newLem]" k
(*
  (  "COLLECTED CONTINUATIONS:\n" ^
  (List.fold_left (fun acc (f, ks) ->
    "In function `" ^ Boot.pp_core_expr (Core.Esym f) ^ "': [" ^
      (List.fold_left (fun acc k -> Boot.pp_core_expr (Core.Esym k) ^ ", " ^ acc) "" (List.map fst $ Pmap.bindings ks)) ^ "]\n" ^ acc
   ) "" $ Pmap.bindings cont_map))
  k
*)

*)


(* val debug: forall 'a. string -> 'a *)

