(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Bool Basic_classes Num

type float
declare ocaml target_rep type float = `float`

(* Relational operations *)

val floatEq : float -> float -> bool
declare ocaml target_rep function floatEq = infix `=`

instance (Eq float)
  let (=) = floatEq
  let (<>) x y = not (floatEq x y)
end

val floatLt : float -> float -> bool
declare ocaml target_rep function floatLt = infix `<`

val floatLe : float -> float -> bool
declare ocaml target_rep function floatLe = infix `<=`

val floatCompare : float -> float -> ordering
let inline floatCompare = defaultCompare

instance (Ord float)
  let compare = floatCompare
  let (<) = floatLt
  let (<=) = floatLe
  let (>) x y = not (floatLe x y)
  let (>=) x y = not (floatLt x y)
end

(* Arithmetic Operations *)

val floatAdd : float -> float -> float
declare ocaml target_rep function floatAdd = `Floating.add`

val floatSub : float -> float -> float
declare ocaml target_rep function floatSub = `Floating.sub`

val floatMul : float -> float -> float
declare ocaml target_rep function floatMul = `Floating.mul`

val floatDiv : float -> float -> float
declare ocaml target_rep function floatDiv = `Floating.div`

instance (NumAdd float)
  let (+) = floatAdd
end

instance (NumMinus float)
  let (-) = floatSub
end

instance (NumMult float)
  let ( * ) = floatMul
end

instance (NumDivision float)
  let (/) = floatDiv
end

(* Conversions *)

val of_int : int -> float
declare ocaml target_rep function of_int = `float_of_int`

val of_integer : integer -> float
let of_integer x = of_int (Num.intFromInteger x)

val of_string : string -> float
declare ocaml target_rep function of_string = `Floating.of_string`

val string_of_float : float -> string
declare ocaml target_rep function string_of_float = `string_of_float`

val to_int : float -> int
declare ocaml target_rep function to_int = `int_of_float`

val to_integer : float -> integer
let to_integer x = Num.integerFromInt (to_int x)
