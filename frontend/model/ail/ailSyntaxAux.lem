(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives AilTypesAux AilSyntax Loc Ctype
import Cmm_csem Builtins

(* Removes non-semantic constructor from a expression. Pattern matching with mor
   than one level of unfolding should usually only be done on stripped expressions *)
val     strip_expression: forall 'a. expression 'a -> expression 'a
let rec strip_expression (AnnotatedExpression _ _ _ expr_ as expr) =
  match expr_ with
    | AilEannot _ e ->
        strip_expression e
    | AilEprint_type e ->
        strip_expression e
    | _ ->
        expr
  end

(* STD ยง6.3.2.3#3, sentence 1 *)
val is_null_pointer_constant: forall 'a. expression 'a -> bool
let rec is_null_pointer_constant expr =
  let AnnotatedExpression _ _ _ expr_ = strip_expression expr in
  match expr_ with
    | AilEconst ConstantNull ->
        true
    | AilEconst (ConstantInteger (IConstant n _ _)) ->
        n = 0
    | AilEcast cast_qs (Ctype _ (Pointer referenced_qs (Ctype _ Void))) e ->
        is_null_pointer_constant e && is_unqualified cast_qs && is_unqualified referenced_qs
    | _ ->
        false
  end

val memory_order_of_expr: forall 'a. expression 'a -> maybe Cmm_csem.memory_order
let memory_order_of_expr (AnnotatedExpression _ _ _ expr) =
  match expr with
    | AilEconst (ConstantInteger (IConstant n _ _)) -> Builtins.decode_memory_order $ natFromInteger n
    | _ -> Nothing
  end


