(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives
import Constraint Undefined

type typing_misc_error =
  | UntypableIntegerConstant of integer (* §6.4.4.1#6, sentence 5 *)
  | UnableToTypeIntegerConstant (* This is used when in NON agnostic mode, the Impl
                                   is not complete enough to type an integer constant *)
  | ParameterTypeNotAdjusted (* internal *)
  | VaStartArgumentType (* §7.16.1.4#1 *)
  | VaArgArgumentType (* §7.16.1.1#1 *)
  | GenericFunctionMustBeDirectlyCalled

type typing_error =
  | TError_ConstraintViolation of Constraint.violation
  | TError_UndefinedBehaviour of Undefined.undefined_behaviour
  | TError_MiscError of typing_misc_error
  | TError_NotYetSupported of string

val std_of_typing_misc_error: typing_misc_error -> list string
let std_of_typing_misc_error = function
  | UntypableIntegerConstant _ ->
      ["§6.4.4.1#6, sentence 5"]
  | UnableToTypeIntegerConstant ->
      []
  | ParameterTypeNotAdjusted ->
      []
  | VaStartArgumentType ->
      ["§7.16.1.4#1"; "§7.16#3"]
  | VaArgArgumentType ->
      ["§7.16.1.1#1"; "§7.16#3"]
  | GenericFunctionMustBeDirectlyCalled ->
      []
end

val std_of_ail_typing_error: typing_error -> list string
let std_of_ail_typing_error = function
  | TError_ConstraintViolation v ->
      Constraint.std_of_violation v
  | TError_UndefinedBehaviour ub ->
      match (Undefined.std_of_undefined_behaviour ub) with
      | Just std -> [std]
      | Nothing -> []
      end
  | TError_MiscError e ->
      std_of_typing_misc_error e
  | TError_NotYetSupported _ ->
      []
end

