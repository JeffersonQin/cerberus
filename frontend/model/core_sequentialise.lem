open import Core

val     sequentialise_expr: typed_expr unit -> typed_expr unit
let rec sequentialise_expr (Expr annot expr_) =
  Expr annot match expr_ with
    | Epure _ ->
        expr_
    | Ememop _ _ ->
        expr_
    | Eaction _ ->
        expr_
    | Ecase pe cases ->
        (* TODO: the typing should maybe forbid unseqs inside cases anyway? *)
        Ecase pe (List.map (fun (pat, e) -> (pat, sequentialise_expr e)) cases)
    | Elet sym pe1 e2 ->
        Elet sym pe1 (sequentialise_expr e2)
    | Eif pe1 e2 e3 ->
        Eif pe1 (sequentialise_expr e2) (sequentialise_expr e3)
    | Eccall _ _ _ _ ->
        expr_
    | Eproc _ _ _ ->
        expr_
    | Eunseq es ->
        let () = Debug.warn [Debug.DB_core_dynamics] (fun () -> "Core_sequentialise ==> missed an unseq") in
        expr_
    | Ewseq (Pattern annot_ctor (CaseBase (Nothing, BTy_tuple bTys))) (Expr _ (Eunseq es)) e2 ->
        let Expr _ expr_' = List.foldr (fun (bTy, e) acc ->
          Expr [] (Ewseq (Pattern annot_ctor (CaseBase (Nothing, bTy))) (sequentialise_expr e) acc)
        ) (sequentialise_expr e2) (List.zip bTys es) in
        expr_'
    | Ewseq (Pattern _ (CaseCtor Ctuple pats)) (Expr _ (Eunseq es)) e2 ->
        let Expr _ expr_' = List.foldr (fun (pat, e) acc ->
          Expr [] (Ewseq pat (sequentialise_expr e) acc)
        ) (sequentialise_expr e2) (List.zip pats es) in
        expr_'
    | Ewseq pat e1 e2 ->
        Ewseq pat (sequentialise_expr e1) (sequentialise_expr e2)
    | Esseq (Pattern annot_ctor (CaseBase (Nothing, BTy_tuple bTys))) (Expr _ (Eunseq es)) e2 ->
        let Expr _ expr_' = List.foldr (fun (bTy, e) acc ->
          Expr [] (Esseq (Pattern annot_ctor (CaseBase (Nothing, bTy))) (sequentialise_expr e) acc)
        ) (sequentialise_expr e2) (List.zip bTys es) in
        expr_'
    | Esseq (Pattern _ (CaseCtor Ctuple pats)) (Expr _ (Eunseq es)) e2 ->
        let Expr _ expr_' = List.foldr (fun (pat, e) acc ->
          Expr [] (Esseq pat (sequentialise_expr e) acc)
        ) (sequentialise_expr e2) (List.zip pats es) in
        expr_'
    | Esseq pat e1 e2 ->
        Esseq pat (sequentialise_expr e1) (sequentialise_expr e2)
    | Easeq _ _ _ ->
        expr_
    | Ebound e ->
        Ebound (sequentialise_expr e)
    | End es ->
        End (List.map sequentialise_expr es)
    | Esave sym_ty xs e ->
        Esave sym_ty xs (sequentialise_expr e)
    | Erun () sym es ->
        expr_
    | Epar es ->
        Epar (List.map sequentialise_expr es)
    | Ewait _ ->
        expr_
    | Eannot xs e ->
        Eannot xs (sequentialise_expr e)
    | Eexcluded _ _ ->
        expr_
  end


val sequentialise_file: typed_file unit -> typed_file unit
let sequentialise_file file =
  <| file with funs= Map.map (function
       | Proc loc bTy params e ->
           Proc loc bTy params (sequentialise_expr e)
       | ProcDecl loc bTy params ->
           ProcDecl loc bTy params
       | BuiltinDecl loc bTy params ->
           BuiltinDecl loc bTy params
       | Fun bTy params pe ->
           Fun bTy params pe
     end) file.funs |>



(*
  main   : Symbol.sym;
  stdlib : generic_fun_map 'bty 'a;
  impl   : generic_impl 'bty;
  globs  : list (Symbol.sym * core_base_type * generic_expr 'a 'bty Symbol.sym);
  funs   : generic_fun_map 'bty 'a;
*)
