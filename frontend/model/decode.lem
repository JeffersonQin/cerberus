open import Pervasives
import AilSyntax

open import {hol} `pp_ailTheory`

val decode_integer_constant: forall 'a. string -> AilSyntax.basis * integer
declare ocaml target_rep function decode_integer_constant = `Decode_ocaml.decode_integer_constant`
declare hol   target_rep function decode_integer_constant = `pp_ail$decode_num`
declare coq   target_rep function decode_integer_constant = `DAEMON`


val decode_character_constant: string -> integer
declare ocaml target_rep function decode_character_constant = `Decode_ocaml.decode_character_constant`
declare hol   target_rep function decode_character_constant = `pp_ail$decode_char`
declare coq   target_rep function decode_character_constant = `DAEMON`

val escaped_char: char -> string
declare ocaml target_rep function escaped_char = `Decode_ocaml.escaped_char`
declare coq target_rep function escaped_char = `DAEMON`

val encode_character_constant: integer -> char
declare ocaml target_rep function encode_character_constant = `Decode_ocaml.encode_character_constant`
declare hol   target_rep function encode_character_constant = `pp_ail$encode_char`
declare coq   target_rep function encode_character_constant = `DAEMON`
