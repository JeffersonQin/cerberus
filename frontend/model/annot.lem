open import Maybe
open import Pervasives
import Loc
import Symbol

type bmc_annot =
  | Abmc_id of nat (* NOTE: basically same as uid *)

type attribute = <|
  attr_ns: maybe Symbol.identifier;
  attr_id: Symbol.identifier;
  attr_args: list string;
|>

type attributes =
  | Attrs of list attribute

instance (Show attributes)
  let show attrs = "ATTRS"
end

val no_attributes: attributes
let no_attributes =
  Attrs []

val combine_attributes: attributes -> attributes -> attributes
let combine_attributes (Attrs xs1) (Attrs xs2) =
  Attrs (xs1 ++ xs2)

type annot =
  | Astd of string (* ISO C11 Standard Annotation *)
  | Aloc of Loc.t (* C source location *)
  | Auid of string (* Unique ID *)
  | Abmc of bmc_annot
  | Aattrs of attributes (* C2X attributes *)


val     get_loc: list annot -> maybe Loc.t
let rec get_loc annots =
  match annots with
    | [] ->
        Nothing
    | (Aloc loc :: _) ->
        Just loc
    | (Astd _ :: annots') ->
        get_loc annots'
    | (Auid _ :: annots') ->
        get_loc annots'
    | (Abmc _ :: annots') ->
        get_loc annots'
    | (Aattrs _ :: annots') ->
        get_loc annots'
  end

val get_loc_: list annot -> Loc.t
let get_loc_ annots =
  match get_loc annots with
    | Just loc -> loc
    | Nothing -> Loc.unknown
  end

val     get_uid: list annot -> maybe string
let rec get_uid annots =
  match annots with
    | [] ->
        Nothing
    | (Aloc _ :: annots') ->
        get_uid annots'
    | (Astd _ :: annots') ->
        get_uid annots'
    | (Auid uid :: _) ->
        Just uid
    | (Abmc _ :: annots') ->
        get_uid annots'
    | (Aattrs _ :: annots') ->
        get_uid annots'
  end

