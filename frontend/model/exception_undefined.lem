(*==================================================================================*)
(*  BSD 2-Clause License                                                            *)
(*                                                                                  *)
(*  Cerberus                                                                        *)
(*                                                                                  *)
(*  Copyright (c) 2011-2020                                                         *)
(*    Kayvan Memarian                                                               *)
(*    Victor Gomes                                                                  *)
(*    Justus Matthiesen                                                             *)
(*    Peter Sewell                                                                  *)
(*    Kyndylan Nienhuis                                                             *)
(*    Stella Lau                                                                    *)
(*    Jean Pichon-Pharabod                                                          *)
(*    Christopher Pulte                                                             *)
(*    Rodolphe Lepigre                                                              *)
(*    James Lingard                                                                 *)
(*                                                                                  *)
(*  All rights reserved.                                                            *)
(*                                                                                  *)
(*  Redistribution and use in source and binary forms, with or without              *)
(*  modification, are permitted provided that the following conditions are met:     *)
(*                                                                                  *)
(*  1. Redistributions of source code must retain the above copyright notice, this  *)
(*     list of conditions and the following disclaimer.                             *)
(*                                                                                  *)
(*  2. Redistributions in binary form must reproduce the above copyright notice,    *)
(*     this list of conditions and the following disclaimer in the documentation    *)
(*     and/or other materials provided with the distribution.                       *)
(*                                                                                  *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"     *)
(*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE       *)
(*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *)
(*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE    *)
(*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL      *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR      *)
(*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER      *)
(*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   *)
(*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   *)
(*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.            *)
(*==================================================================================*)

open import Pervasives
import Exception Undefined

type t 'a 'msg = Exception.exceptM (Undefined.t 'a) 'msg

val return: forall 'a 'b 'msg. 'a -> t 'a 'msg
let exception_undef_return z =
  Exception.return (Undefined.return z)
let inline return = exception_undef_return

val bind: forall 'a 'b 'msg. t 'a 'msg -> ('a -> t 'b 'msg) -> t 'b 'msg
let exception_undef_bind m f =
  match m with
    | Exception.Result (Undefined.Defined z) ->
        f z
    | Exception.Result (Undefined.Undef loc ubs) ->
        Exception.return (Undefined.undef loc ubs)
    | Exception.Result (Undefined.Error loc str) ->
        Exception.return (Undefined.error loc str)
    | Exception.Exception err ->
        Exception.fail err
  end
let inline bind = exception_undef_bind

val fail: forall 'a 'msg. 'msg -> t 'a 'msg
let exception_undef_fail err = Exception.fail err
let inline fail = exception_undef_fail


val mapM: forall 'a 'b 'msg. ('a -> t 'b 'msg) -> list 'a -> t (list 'b) 'msg
let exception_undef_mapM f xs =
  Exception.bind (Exception.mapM f xs)
    (fun us -> Exception.return $ Undefined.mapM id us)
let inline mapM = exception_undef_mapM


module Operators = struct
  let inline (>>=)      = bind
  let inline (>>) m1 m2 = bind m1 (fun () -> m2)
end


open Operators
val sequence: forall 'a 'msg. list (t 'a 'msg) -> t (list 'a) 'msg
let exception_undef_sequence ms =
  foldr
    (fun m ms' ->
      m   >>= fun x  ->
      ms' >>= fun xs ->
      return (x::xs)
    ) (return []) ms
let inline sequence = exception_undef_sequence


(* NOTE: this is foldl *)
val     foldM: forall 'a 'b 'msg. ('a -> 'b -> t 'a 'msg) -> 'a -> list 'b -> t 'a 'msg (* GENERIC Monad *)
let rec exception_undef_foldM f a = function                                                            (* GENERIC Monad *)
  | [] ->                                                                               (* GENERIC Monad *)
      return a                                                                          (* GENERIC Monad *)
  | x::xs ->                                                                            (* GENERIC Monad *)
      f a x >>= fun fax -> exception_undef_foldM f fax xs                                               (* GENERIC Monad *)
end
let inline foldM = exception_undef_foldM

val     foldrM: forall 'a 'b 'msg. ('a -> 'b -> t 'b 'msg) -> 'b -> list 'a -> t 'b 'msg
let rec exception_undef_foldrM f a l =
  match l with
    | [] -> return a
    | x::xs -> exception_undef_foldrM f a xs >>= f x
  end
let inline foldrM = exception_undef_foldrM


val fmap: forall 'a 'b 'msg. ('a -> 'b) -> t 'a 'msg -> t 'b 'msg
let exception_undef_fmap f m = bind m (fun z -> return $ f z)
let inline fmap = exception_undef_fmap
