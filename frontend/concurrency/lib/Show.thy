header{*Generated by Lem from show.lem.*}

theory "Show" 

imports 
 	 Main
	 "Lem_string" 
	 "Lem_maybe" 
	 "Lem_num" 
	 "Lem_basic_classes" 
	 "Lem_string_extra" 

begin 

(*open import String Maybe Num Basic_classes*)

(* For the moment, the definition of Show is in String_extra *)
(*include import String_extra*)

(*
class (Show 'a)
  val show: 'a -> string
end
*)

definition instance_String_extra_Show_string_dict  :: "(string)Show_class "  where 
     " instance_String_extra_Show_string_dict = ((|

  show_method = (\<lambda> s. ([(Char Nibble2 Nibble2)]) @ (s @ ([(Char Nibble2 Nibble2)])))|) )"



definition string_of_maybe  :: "('a \<Rightarrow> string)\<Rightarrow> 'a option \<Rightarrow> string "  where 
     " string_of_maybe showX = ( \<lambda>x .  
  (case  x of
        Some x =>
  (''Just ('') @ (showX x @ ('')''))
    | None =>
  (''Nothing'')
  ) )"


definition instance_String_extra_Show_Maybe_maybe_dict  :: " 'a Show_class \<Rightarrow>('a option)Show_class "  where 
     " instance_String_extra_Show_Maybe_maybe_dict dict_String_extra_Show_a = ((|

  show_method = (\<lambda> x_opt. string_of_maybe 
  (show_method   dict_String_extra_Show_a) x_opt)|) )"



function (sequential,domintros)  string_of_list_aux  :: "('a \<Rightarrow> string)\<Rightarrow> 'a list \<Rightarrow> string "  where 
     " string_of_list_aux showX = ( \<lambda>x .  
  (case  x of
        [] =>
  ('''')
    | [x] =>
  showX x
    | x # xs' =>
  showX x @ ((''; '') @ string_of_list_aux showX xs')
  ) )" 
by pat_completeness auto


definition string_of_list  :: "('a \<Rightarrow> string)\<Rightarrow> 'a list \<Rightarrow> string "  where 
     " string_of_list showX xs = (
  (''['') @ (string_of_list_aux showX xs @ ('']'')))"


definition instance_String_extra_Show_list_dict  :: " 'a Show_class \<Rightarrow>('a list)Show_class "  where 
     " instance_String_extra_Show_list_dict dict_String_extra_Show_a = ((|

  show_method = (\<lambda> xs. string_of_list 
  (show_method   dict_String_extra_Show_a) xs)|) )"



fun string_of_pair  :: "('b \<Rightarrow> string)\<Rightarrow>('a \<Rightarrow> string)\<Rightarrow> 'b*'a \<Rightarrow> string "  where 
     " string_of_pair showX showY (x,y) = (
  (''('') @ (showX x @ (('', '') @ (showY y @ ('')'')))))" 
declare string_of_pair.simps [simp del]


definition instance_String_extra_Show_tup2_dict  :: " 'a Show_class \<Rightarrow> 'b Show_class \<Rightarrow>('a*'b)Show_class "  where 
     " instance_String_extra_Show_tup2_dict dict_String_extra_Show_a dict_String_extra_Show_b = ((|

  show_method = (string_of_pair 
  (show_method   dict_String_extra_Show_a) (show_method   dict_String_extra_Show_b))|) )"



(*
instance (Show nat)
  let show n = string_of_natural (naturalFromNat n)
end
*)

definition instance_String_extra_Show_Num_int_dict  :: "(int)Show_class "  where 
     " instance_String_extra_Show_Num_int_dict = ((|

  show_method = string_of_int |) )"


definition instance_String_extra_Show_Num_integer_dict  :: "(int)Show_class "  where 
     " instance_String_extra_Show_Num_integer_dict = ((|

  show_method = (\<lambda> n. (''TODO''))|) )"


definition instance_String_extra_Show_bool_dict  :: "(bool)Show_class "  where 
     " instance_String_extra_Show_bool_dict = ((|

  show_method = (\<lambda> b. if b then (''true'') else (''false''))|) )"

end
