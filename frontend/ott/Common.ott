metavar z ::=
  {{ phantom }}
  {{ lex numeral }}
  {{ coq Z }}
metavar n ::=
  {{ coq nat }}
  {{ lex numeral }}
indexvar i, j, k ::=
  {{ coq nat }}
  {{ lex numeral }}

grammar

b :: bool ::=
  {{ phantom }}
  {{ coq bool }}
  | true :: M :: True
     {{ coq true }}
  | false :: M :: False
     {{ coq false }}

wholeNumber, w :: WholeNumber ::=
% int and integer are already used in varies places :(
  {{ phantom }}
  {{ coq Z }}
  | ( w ) :: S :: Parens
      {{ icho [[w]] }}
  | Z nat :: M :: Nat
      {{ coq Z_of_nat [[nat]] }}
      {{ tex [[nat]] }}
  | Z n :: M :: N
      {{ coq Z_of_nat [[n]] }}
      {{ tex [[n]] }}
  | Z z :: S :: Int
      {{ icho [[z]] }}
      {{ tex [[z]] }}
  | w1 + w2 :: M :: Plus
      {{ coq [[w1]] + [[w2]] }}
  | w1 * w2 :: M :: Times
      {{ coq [[w1]] * [[w2]] }}
  | Z_i i :: S :: IndexI
      {{ icho [[i]] }}
      {{ tex [[i]] }}
  | Z_j j :: S :: IndexJ
      {{ icho [[j]] }}
      {{ tex [[j]] }}

nat :: Nat ::=
  {{ phantom }}
  {{ coq nat }}
  | ( nat ) :: S :: Parens
      {{ icho [[nat]] }}
  | N n :: S :: Nat
      {{ icho [[n]] }}
      {{ tex [[n]] }}
  | N_k k :: S :: IndexK
      {{ icho [[k]] }}
      {{ tex [[k]] }}

formula :: 'formula_' ::=
  | not formula :: M :: Not
      {{ tex \neg [[formula]] }}
      {{ coq ~ ([[formula]]) }}
  | formula1 \/ formula2 :: M :: Disj
      {{ coq [[formula1]] \/ [[formula2]] }}
  | formula1 /\ formula2 :: M :: Conj
      {{ coq [[formula1]] /\ [[formula2]] }}
  | formula1 --> formula2 :: M :: Impl
      {{ coq [[formula1]] -> [[formula2]] }}
  | ( formula ) :: S :: Parens
      {{ icho [[formula]] }}
  | formula1 ... formulak :: :: dots
  | b1 = b2 :: M :: BoolEq
      {{ coq [[b1]] = [[b2]] }}
  | w1 = w2 :: M :: ZEq
      {{ coq [[w1]] = [[w2]] }}
  | nat1 = nat2 :: M :: NatEq
      {{ coq [[nat1]] = [[nat2]] }}
  | w1 <= w2 :: M :: LeZ
      {{ tex [[w1]] \leqslant [[w2]] }}
      {{ coq [[w1]] <= [[w2]] }}
  | nat1 <= nat2 :: M :: LeNat
      {{ tex [[nat1]] \leqslant [[nat2]] }}
      {{ coq [[nat1]] <= [[nat2]] }}
  | judgement :: :: judgement

terminals :: 'terminals_' ::=
  | \/ :: :: Disj
      {{ tex \vee }}
  | /\ :: :: Conj
      {{ tex \wedge }}
  | --> :: :: Impl
      {{tex \implies }}
  | <= :: :: Leq
      {{ tex \leqslant }}
  | forall :: :: Forall
      {{ tex \forall }}
  | in :: :: In
      {{ tex \in }}
  | |- :: :: Turnstile
      {{ tex \vdash }}
  | |= :: :: Entails
      {{ tex \vDash }}
  | sub :: :: Subset
      {{ tex \subset }}
