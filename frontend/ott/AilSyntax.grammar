gamma, G :: gammaI_ ::=
% INC? {{ coq Map[identifier, (AilTypes.qualifiers * AilTypes.type)%type] }}
  {{ tex \Gamma }}
  {{ coq-universe Type }}
  | empty :: :: Empty
      {{ coq gamma_empty }}
  | G , id : qs type :: :: Ctor
      {{ coq ([[G]] [ [[id]] <- ([[qs]], [[type]]) ])%gamma }}
  | G1 @ G2 :: M :: App
      {{ coq ([[G1]] @ [[G2]])%gamma }}
  | ( G ) :: S :: Parens
      {{ icho [[G]] }}

arithmeticOperator, aop :: '' ::=
% INC?
  {{ com 6.5.5 Multiplicative operators }}
  | * :: :: Mul
  | / :: :: Div
  | % :: :: Mod
  {{ com 6.5.6 Additive operators }}
  | + :: :: Add
  | - :: :: Sub
  {{ com 6.5.7 Bitwise shift operators }}
  | << :: :: Shl
  | >> :: :: Shr
  {{ com 6.5.10 Bitwise AND operator }}
  | & :: :: Band
  {{ com 6.5.11 Bitwise exclusive OR operator }}
  | | :: :: Bor
  {{ com 6.5.12 Bitwise inclusive OR operator }}
  | ^ :: :: Xor

{{ com Binary operators from 6.5.5-14, 6.5.17 }}
binaryOperator, bop :: '' ::=
% INC?
  {{ com Group of operators also used for assigments }}
  | aop :: :: Arithmetic
  {{ com 6.5.17 Comma operator }}
  | , :: :: Comma
  {{ com 6.5.13 Logical AND operator }}
  | && :: :: And
  {{ com 6.5.14 Logical OR operator }}
  | || :: :: Or
  {{ com 6.5.8 Relational operators }}
  | < :: :: Lt
  | > :: :: Gt
  | <= :: :: Le
  | >= :: :: Ge
  {{ com 6.5.9 Equality operators }}
  | == :: :: Eq
  | != :: :: Ne

unaryOperator, uop :: '' ::=
% INC?
  | + :: :: Plus
  | - :: :: Minus
  | ~ :: :: Bnot
  | addr :: :: Address
  | * :: :: Indirection
  | incr :: :: PostfixIncr
      {{ com Note: Appears prefix in concrete syntax. }}
  | decr :: :: PostfixDecr
      {{ com Note: Appears prefix in concrete syntax. }}

{{ com 6.4.4.1 Integer constants }}
integerSuffix :: '' ::=
% INC?
  | unsigned :: :: UnsignedInt
  | unsigned long :: :: UnsignedLong
  | unsigned long long :: :: UnsignedLongLong
  | long :: :: SignedLong
  | long long :: :: SignedLongLong

integerConstant, int_const :: integerConstant_ ::=
% INC? {{ coq (nat * option integerSuffix)%type }}
  | n :: :: Plain
      {{ coq ([[n]], None) }}
  | n integerSuffix :: :: Suffix
      {{ coq ([[n]], Some [[integerSuffix]]) }}

{{ com 6.4.4 Constants }}
constant, c :: 'Constant' ::=
% INC?
  | int_const :: :: Integer
%  | float :: :: Float
%  | enum :: :: Enum
%     com 6.4.4.3 Enumeration constants
%  | char :: :: Char
%  | wchar :: :: Wchar

declaration, decl :: declaration_ ::=
% INC? {{ coq (nat * option AilTypes.storageDuration)%type }}
  | ty :: :: Plain
      {{ coq ([[ty]], None) }}
  | ty storageDuration :: :: Storage
      {{ coq ([[ty]], Some [[storageDuration]]) }}

expression, e :: '' ::=
% INC?
  {{ coq-universe Type }}
  | ( e ) :: S :: ExpressionParens
      {{ icho [[e]] }}
  | uop e :: :: Unary
  | e1 bop e2 :: :: Binary
  | e1 = e2 :: :: Assign
  | e1 aop = e2 :: :: CompoundAssign
  | e1 ? e2 : e3 :: ::Conditional
  | ( qs ty ) e :: :: Cast
  | e ( e1 , .. , ek ) :: :: Call
%  | e . id :: :: MemberOf
%  | e -> id :: :: MemberOfPtr
  | c :: :: Constant
  | id :: :: Var
% TODO size_of e
  | sizeof qs ty :: :: SizeOf
  | alignof qs ty :: :: AlignOf

definition, def :: definition ::=
% INC? {{ coq (identifier * expression)%type }}
  {{ coq-universe Type }}
  | id = e :: :: I
      {{ coq ([[id]],[[e]]) }}

{{ com Statements }}
statement, s :: '' ::=
% INC?
  {{ coq-universe Type }}
  | ( s ) :: S :: StatementParens
      {{ icho [[s]] }}
  | ; :: :: Skip
  | e ; :: :: Expression
  | { G | s1 .. sk } :: :: Block
  | if ( e ) s1 else s2 :: :: If
  | while ( e ) s :: :: While
  | do s while ( e ) ; :: :: Do
  | break ; :: :: Break
  | continue ; :: :: Continue
  | return ; :: :: ReturnVoid
  | return e ; :: :: Return
  | switch ( e ) s :: :: Switch
  | case int_const : s :: :: Case
  | default : s :: :: Default
  | id : s :: :: Label
  | goto id ; :: :: Goto
  | def1 , ... , defk ; :: :: Declaration

sigma, S :: sigmaI_ ::=
% INC? {{ coq Map[identifier, (AilTypes.type * statement)%type] }}
  {{ tex \Sigma }}
  {{ coq-universe Type }}
  | empty :: :: Empty
      {{ coq [] }}
  | S , id : ty = s :: :: Ctor
      {{ coq ([[S]] [ [[id]] <- ([[ty]], [[s]]) ])%sigma }}

program :: program ::=
% INC? {{ coq (identifier * sigma)%type }}
  {{ coq-universe Type }}
  | id S :: M :: I
      {{ coq ([[id]], [[S]]) }}
