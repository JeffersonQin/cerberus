embed {{ coq
Definition gamma_empty : gamma := MapInterface.empty _.
Definition gamma_find (id : identifier) (G : gamma) : 
  option (AilTypes.qualifiers * AilTypes.type)%type
:= MapInterface.find id G.
Definition gamma_add (id : identifier) (p : (AilTypes.qualifiers * AilTypes.type)%type) (G:gamma)
  : gamma
:= MapInterface.add id p G.
Definition gamma_update (G1 G2 : gamma) : gamma := G1 @ G2.

Notation "'[]'" :=
  (gamma_empty)
  (at level 0, no associativity)
: gamma_scope.
Notation "G '[' id ']' " :=
  (gamma_find id G)
  (at level 0, no associativity)
: gamma_scope.
Notation "G '[' id '<-' p ']' " :=
  (gamma_add id p G)
  (at level 0, no associativity)
: gamma_scope.
Notation "G1 '@' G2" :=
  (gamma_update G1 G2)
  (at level 0, no associativity)
: gamma_scope.

Delimit Scope gamma_scope with gamma.

Definition sigma_empty : sigma := MapInterface.empty _.
Definition sigma_find (id : identifier) (S : sigma) : 
  option (AilTypes.type * statement)%type
:= MapInterface.find id S.
Definition sigma_add (id : identifier) (p : (AilTypes.type * statement)%type) (S : sigma)
  : sigma
:= MapInterface.add id p S.
Definition sigma_update (S1 S2 : sigma) : sigma := S1 @ S2.

Notation "'[]'" :=
  (sigma_empty)
  (at level 0, no associativity)
: sigma_scope.
Notation "S '[' id ']' " :=
  (sigma_find id S)
  (at level 0, no associativity)
: sigma_scope.
Notation "S '[' id '<-' p ']' " :=
  (sigma_add id p S)
  (at level 0, no associativity)
: sigma_scope.
Notation "S1 '@' S2" :=
  (sigma_update S1 S2)
  (at level 0, no associativity)
: sigma_scope.
 
Delimit Scope sigma_scope with sigma.
}}
