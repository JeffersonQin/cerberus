embed
{{ coq
Require Import ZArith.
Local Open Scope Z_scope.

Definition range :=  { p : Z * Z | (fst p) <= (snd p) }.
Definition min (r : range) := fst (projT1 r).
Definition max (r : range) := snd (projT1 r).
Definition leq (r : range) : (min r) <= (max r) := projT2 r.

Definition mkRange x y : range :=
  match Z_lt_le_dec x y with
  | left  p => existT _ (x, y) (Z.lt_le_incl _ _ p)
  | right p => existT _ (y, x) p
  end.
}}

defns
neRange :: '' ::=

defn
range1 <> range2 :: :: noOverlap :: noOverlap by

max r1 <= min r2
---------------- :: I_Below 
r1 <> r2

max r2 <= min r1
---------------- :: I_Above
r1 <> r2

defns
leRange :: '' ::=

defn
range1 <= range2 :: :: le :: Le by

max r1 <= max r2
min r2 <= min r1
---------------- :: I
r1 <= r2

defns
memRange :: '' ::=

defn
w in range :: :: mem :: mem by

w <= max r
min r <= w
---------- :: I
w in r

embed {{ coq Definition memNat (n : nat) (r: range) := mem (Z_of_nat n) r. }}
