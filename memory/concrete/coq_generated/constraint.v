(* Generated by Lem from ocaml_generated/constraint.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.
Require Import symbol.
Require Export symbol.
Require Import cabs.
Require Export cabs.
Require Import genTypes.
Require Export genTypes.
Require Import ctype.
Require Export ctype.


Inductive simple_assignment_violation : Type := 
  | IncompatibleType: simple_assignment_violation 
  | IncompatiblePointerType: simple_assignment_violation 
  | DiscardsQualifiers: simple_assignment_violation .
Definition simple_assignment_violation_default: simple_assignment_violation  := IncompatibleType.

Inductive arith_binop_violation : Type := 
  (* 6.5.5 Multiplicative operators *)
  | MultiplicativeInvalidOperandsType: arith_binop_violation  (* Â§6.5.5#2, sentence 1 *)
  | ModInvalidOperandsType: arith_binop_violation  (* Â§6.5.5#2, sentence 2 *)
  (* 6.5.6 Additive operators *)
  | AdditiveOperandsArithmeticType: arith_binop_violation  (* Â§6.5.6#2 *)
  (* 6.5.7 Bitwise shift operators *)
  | BitwiseShiftInvalidOperandsType: arith_binop_violation  (* Â§6.5.7#2 *)
  (* 6.5.10 Bitwise AND operator *)
  | BitwiseAndInvalidOperandsType: arith_binop_violation  (* Â§6.5.10#2 *)
  (* 6.5.11 Bitwise exclusive OR operator *)
  | BitwiseXorInvalidOperandsType: arith_binop_violation  (* Â§6.5.11#2 *)
  (* 6.5.12 Bitwise inclusive OR operator *)
  | BitwiseOrInvalidOperandsType: arith_binop_violation .
Definition arith_binop_violation_default: arith_binop_violation  := MultiplicativeInvalidOperandsType. (* Â§6.5.12#2 *)

Inductive atomic_operations_synopsys : Type := 
  | AtomicLoad: atomic_operations_synopsys 
  | AtomicStore: atomic_operations_synopsys 
  | AtomicExchange: atomic_operations_synopsys 
  | AtomicCompareExchange: atomic_operations_synopsys .
Definition atomic_operations_synopsys_default: atomic_operations_synopsys  := AtomicLoad.

Inductive violation : Type := 
  (* 6.5 Expressions *)
  (* 6.5.2.2 Function calls *)
  | FunctionCallIncompleteReturnType:  ctype  -> violation  (* Â§6.5.2.2#1 *)
  | FunctionCallArrayReturnType:  ctype  -> violation  (* Â§6.5.2.2#1 *)
  | FunctionCallIncorrectType: violation  (* Â§6.5.2.2#1 *)
  | FunctionCallTooManyArguments:  nat  (*expected*) ->  nat  -> violation  (*have*) (* Â§6.5.2.2#2, sentence 1 *)
  | FunctionCallTooFewArguments:  nat  (*expected*) ->  nat  -> violation  (*have*) (* Â§6.5.2.2#2, sentence 1 *)
  (* 6.5.2.3 Structure and union members *)
  | MemberofReferenceBaseTypeLvalue:  qualifiers  ->  ctype  -> violation   (* Â§6.5.2.3#1 *)
  | MemberofReferenceBaseTypeRvalue:  genType  -> violation   (* Â§6.5.2.3#1 *)
  | MemberofNoMemberLvalue:  cabs_identifier  ->  qualifiers  ->  ctype  -> violation  (* Â§6.5.2.3#1 *)
  | MemberofNoMemberRvalue:  cabs_identifier  ->  genType  -> violation  (* Â§6.5.2.3#1 *)
  | MemberofptrReferenceBaseType:  qualifiers  ->  ctype  -> violation   (* Â§6.5.2.3#2 *)
  | MemberofptrReferenceTypeNotPointer:  genType  -> violation   (* Â§6.5.2.3#2 *)
  | MemberofptrNoMember:  cabs_identifier  ->  qualifiers  ->  ctype  -> violation  (* Â§6.5.2.3#2 *)
  (* 6.5.2.5 Compound literals *)
  | InvalidTypeCompoundLiteral: violation  (* Â§6.5.2.5#1 *)
  (* 6.5.3.1 Prefix increment and decrement operators *)
  | UnaryExpressionNotLvalue: violation  (* Â§6.5.3.1#1 *)
  | InvalidArgumentTypeUnaryIncrement:  ctype  -> violation  (* Â§6.5.3.1#1 *)
  | InvalidArgumentTypeUnaryDecrement:  ctype  -> violation  (* Â§6.5.3.1#1 *)
  (* 6.5.3.2 Address and indirection operators *)
  | UnaryAddressNotRvalue:  genType  -> violation  (* Â§6.5.3.2#1 *)
  | UnaryAddressRegisterLvalue: violation  (* Â§6.5.3.2#1 *)
  | IndirectionNotPointer: violation  (* Â§6.5.3.2#2 *)
  (* 6.5.3.3 Unary arithmetic operators *)
  | InvalidArgumentTypeUnaryExpression:  genType  -> violation  (* Â§6.5.3.3#1 *)
  (* 6.5.3.4 The sizeof and _Alignof operators *)
  | SizeofInvalidApplication:  genType  -> violation  (* Â§6.5.3.4#1, sentence 1 *)
  | AlignofInvalidApplication:  qualifiers  ->  ctype  -> violation  (* Â§6.5.3.4#1, sentence 2 *)
  (* 6.5.4 Cast operators *)
  | CastInvalidType:  qualifiers  ->  ctype  -> violation  (* Â§6.5.4#2 *)
  | CastPointerToFloat: violation  (* Â§6.5.4#4, sentence 1 *)
  | CastFloatToPointer: violation  (* Â§6.5.4#4, sentence 2 *)
  (* 6.5.{5,6,7,10,11,12} Arithmetic binary operators *)
  | ArithBinopOperandsType:  arith_binop_violation  ->  genType  ->  genType  -> violation 
  (* 6.5.8 Relational operators *)
  | RelationalInvalidOperandsType:  genType  ->  genType  -> violation  (* Â§6.5.8#2 *)
  (* 6.5.9 Equality operators *)
  | EqualityInvalidOperandsType:  genType  ->  genType  -> violation  (* Â§6.5.9#2 *)
  (* 6.5.13 Logical AND operator *)
  | AndInvalidOperandsType:  genType  ->  genType  -> violation  (* Â§6.5.13#2 *)
  (* 6.5.14 Logical OR operator *)
  | OrInvalidOperandsType:  genType  ->  genType  -> violation  (* Â§6.5.14#2 *)
  (* 6.5.15 Conditional operator *)
  | ConditionalOperatorControlType:  genType  -> violation  (* Â§6.5.15#2 *)
  | ConditionalOperatorInvalidOperandTypes:  genType  ->  genType  -> violation  (* Â§6.5.15#3 *)
  (* 6.5.16 Assignment operators *)
  | AssignmentModifiableLvalue: violation 
  (* 6.5.16.1 Simple assignment *)
  | SimpleAssignmentViolation:  simple_assignment_violation  ->  ctype  ->  genType  -> violation  (* Â§6.5.16.1#1 *)
  (* 6.5.16.2 Compound assignment *)
  | CompoundAssignmentAddSubOperandTypes:  genType  ->  genType  -> violation  (* Â§6.5.16.2#1 *)
  | CompoundAssignmentOthersOperandTypes:  arith_binop_violation  ->  genType  ->  genType  -> violation  (* Â§6.5.16.2#2 *)
  (* 6.6 Constant expressions *)
  | IntegerConstantOutRange: violation  (* Â§6.6#4 *)
  (* 6.7 Declarations *)
  | NoLinkageMultipleDeclaration:  cabs_identifier  -> violation  (* Â§6.7#3 *)
  | TypedefRedefinition: violation  (* Â§6.7#3, 1st bullet *)
  | TypedefRedefinitionVariablyModifiedType: violation  (* Â§6.7#3, 1st bullet, sentence 2 *)
  | SameScopeIncompatibleDeclarations: violation  (* Â§6.7#4 *)
  (* 6.7.1 Storage-class specifiers *)
  | IllegalMultipleStorageClasses: violation  (* Â§6.7.1#2 *)
  | IllegalMultipleStorageClassesThreadLocal: violation  (* Â§6.7.1#3, sentence 1 *)
  | ThreadLocalShouldAppearInEveryDeclaration: violation  (* Â§6.7.1#3, sentence 2 *)
  | ThreadLocalFunctionDeclaration: violation  (* Â§6.7.1#4 *)
  (* 6.7.2 Type specifiers *)
  | NoTypeSpecifierInDeclaration: violation  (* Â§6.7.2#2 *)
  | IllegalTypeSpecifierInDeclaration: violation  (* Â§6.7.2#2 *)
  (* 6.7.2.1 Struct and union specifiers *)
  | StructDeclarationLacksDeclaratorList: violation  (* Â§6.7.2.1#2 *)
  | StructMemberIncompleteType:  qualifiers  ->  ctype  -> violation  (* Â§6.7.2.1#3, sentence 1 *)
  | StructMemberFunctionType:  cabs_identifier  -> violation  (* Â§6.7.2.1#3, sentence 1 *)
  | StructMemberFlexibleArray: violation  (* Â§6.7.2.1#3, sentence 2 *)
  (* 6.7.2.1 Enum specifiers *)
  | WrongTypeEnumConstant: violation  (* Â§6.7.2.2#2 *)
  (* 6.7.2.3 Tags *)
  | TagRedefinition:  sym  -> violation  (* Â§6.7.2.3#1 *)
  | TagRedeclaration:  sym  -> violation  (* Â§6.7.2.3#2 *)
  | EnumTagIncomplete: violation  (* Â§6.7.2.3#3 *)
  (* 6.7.2.4 Atomic type specifiers *)
  | AtomicTypeConstraint: violation  (* Â§6.7.2.4#3 *)
  (* Type qualifier *)
  | RestrictQualifiedTypeConstraint: violation  (* Â§6.7.3#2 *)
  | RestrictQualifiedPointedTypeConstraint:  ctype  -> violation  (* Â§6.7.3#2 *)
  (* 6.7.6 Declarators *)
  | ArrayDeclarationNegativeSize: violation  (* Â§6.7.6.2#1, sentence 3 *)
  | ArrayDeclarationIncompleteType: violation  (* Â§6.7.6.2#1, sentence 4 *)
  | ArrayDeclarationFunctionType: violation  (* Â§6.7.6.2#1, sentence 4 *)
  | ArrayDeclarationQsAndStaticOnlyOutmost: violation  (* Â§6.7.6.2#1, sentence 5 *)
  | ArrayDeclarationQsAndStaticOutsideFunctionProto: violation  (* Â§6.7.6.2#1, sentence 5 *)
  | IllegalReturnTypeFunctionDeclarator: violation  (* Â§6.7.6.3#1 *)
  | IllegalStorageClassFunctionDeclarator: violation  (* Â§6.7.6.3#2 *)
  | IncompleteParameterTypeFunctionDeclarator: violation  (* Â§6.7.6.3#4 *)
  (* 6.7.9 Initialization *)
  | IllegalInitializer: violation  (* Â§6.7.9#3 *)
  | IllegalStorageClassStaticOrThreadInitializer: violation  (* Â§6.7.9#4 *)
  | IllegalLinkageAndInitialization: violation  (* Â§6.7.9#5 *)
  | IllegalTypeArrayDesignator: violation  (* Â§6.7.9#6, sentence 1 *)
  | IllegalSizeArrayDesignator: violation  (* Â§6.7.9#6, sentence 2 *)
  | InitializationAsSimpleAssignment:  simple_assignment_violation  ->  ctype  ->  genType  -> violation  (* Â§6.7.9#11, sentence 2 *)
  (* 6.7.10 Static assertions *)
  | StaticAssertFailed:  string  -> violation  (* Â§6.7.10#2 *)
  (* 6.8 Statements and blocks *)
  (* 6.8.1 Labeled statements *)
  | LabelStatementOutsideSwitch: violation  (* Â§6.8.1#2 *)
  | LabelRedefinition:  cabs_identifier  -> violation  (* Â§6.8.1#3 *)
  (* 6.8.4.1 The if statement *)
  | IfStatementControllingExpressionNotScalar: violation  (* Â§6.8.4.1#1 *)
  (* 6.8.4.1 The if statement *)
  | SwitchStatementControllingExpressionNotInteger: violation  (* Â§6.8.4.2#1 *)
  (* 6.8.5 Iteration statements *)
  | IterationStatementControllingExpressionNotScalar: violation  (* Â§6.8.5#2 *)
  | IllegalStorageClassIterationStatement: violation (* Â§6.8.5#3 *)
  (* 6.8.5 Jump statements *)
  | UndeclaredLabel:  cabs_identifier  -> violation  (* Â§6.8.6.1#1, sentence 1 *)
  | ContinueOutsideLoop: violation  (* Â§6.8.6.2#1 *)
  | BreakOutsideSwtichOrLoop: violation  (* Â§6.8.6.3#1 *)
  (* 6.8.5.4 The return statement  *)
  | NonVoidReturnVoidFunction: violation  (* Â§6.8.6.4#1, sentence 1 *)
  | VoidReturnNonVoidFunction: violation  (* Â§6.8.6.4#1, sentence 2 *)
  | ReturnAsSimpleAssignment:  simple_assignment_violation  ->  ctype  ->  genType  -> violation  (* Â§6.8.6.4#3, sentence 2 *)
  (* 6.9 External definitions *)
  | IllegalStorageClassFileScoped: violation  (* Â§6.9#2 *)
  | ExternalRedefinition:  sym  -> violation  (* Â§6.9#3 *)
  (* 6.9.1 Function definitions *)
  | WrongTypeFunctionIdentifier: violation  (*  Â§6.9.1#2 *)
  | IllegalStorageClassFunctionDefinition: violation  (* Â§6.9.1#4 *)
  | IllegalIdentifierTypeVoidInFunctionDefinition: violation  (* Â§6.9.1#5, sentence 1 *)
  | UniqueVoidParameterInFunctionDefinition: violation  (* Â§6.9.1#5 *)
  | FunctionParameterAsSimpleAssignment:  simple_assignment_violation  ->  ctype  ->  genType  -> violation  (* Â§6.9.1#10 *)
  (* 7 Library *)
  (* 7.2 Diagnostics <assert.h> *)
  (* 7.2.1.1 The assert macro *)
  | AssertMacroExpressionScalarType: violation  (* Â§7.2.1.1#2 *)
  (* 7.17 Atomics <stdatomic.h> *)
  | AtomicAddressArgumentMustBeAtomic:  atomic_operations_synopsys  ->  ctype  -> violation 
  | AtomicAddressArgumentMustBePointer:  atomic_operations_synopsys  ->  genType  -> violation .
Definition violation_default: violation  := FunctionCallIncompleteReturnType ctype_default.

Definition assignment_violation : Type := 
  simple_assignment_violation  ->  ctype  ->  genType  ->  violation .
Definition assignment_violation_default: assignment_violation  := (fun (x43 : 
  simple_assignment_violation ) => (fun (x44 :  ctype ) => (fun (x45 :  genType ) => violation_default))).

Definition std_of_assign_violation   : simple_assignment_violation  -> list (string ):=  
  fun (x : simple_assignment_violation ) =>
    match (x) with | IncompatibleType => ["Â§6.5.16.1#1"; "FOOTNOTE.112"]
      | IncompatiblePointerType =>
      ["Â§6.5.16.1#1, bullet 3 and 4"; "FOOTNOTE.112"]
      | DiscardsQualifiers =>
      ["Â§6.5.16.1#1, bullet 3 and 4"; "FOOTNOTE.112"] end.

Definition std_of_arith_binop_violation   : arith_binop_violation  -> list (string ):=  
  fun (x : arith_binop_violation ) =>
    match (x) with | MultiplicativeInvalidOperandsType =>
      ["Â§6.5.5#2, sentence 1"] | ModInvalidOperandsType =>
      ["Â§6.5.5#2, sentence 2"] | AdditiveOperandsArithmeticType =>
      ["Â§6.5.6#2"] | BitwiseShiftInvalidOperandsType => ["Â§6.5.7#2"]
      | BitwiseAndInvalidOperandsType => ["Â§6.5.10#2"]
      | BitwiseXorInvalidOperandsType => ["Â§6.5.11#2"]
      | BitwiseOrInvalidOperandsType => ["Â§6.5.12#2"] end.

Definition std_of_atomic_operation_synopsis   : atomic_operations_synopsys  -> list (string ):=  
  fun (x : atomic_operations_synopsys ) =>
    match (x) with | AtomicStore => ["Â§7.17.7.1#1"] | AtomicLoad =>
      ["Â§7.17.7.2#1"] | AtomicExchange => ["Â§7.17.7.3#1"]
      | AtomicCompareExchange => ["Â§7.17.7.4#1"] end.

Definition std_of_violation   : violation  -> list (string ):=  
  fun (x : violation ) =>
    match (x) with | FunctionCallIncompleteReturnType _ => ["Â§6.5.2.2#1"]
      | FunctionCallArrayReturnType _ => ["Â§6.5.2.2#1"]
      | FunctionCallIncorrectType => ["Â§6.5.2.2#1"]
      | FunctionCallTooManyArguments _ _ => ["Â§6.5.2.2#2, sentence 1"]
      | FunctionCallTooFewArguments _ _ => ["Â§6.5.2.2#2, sentence 1"]
      | MemberofReferenceBaseTypeLvalue _ _ => ["Â§6.5.2.3#1"]
      | MemberofReferenceBaseTypeRvalue _ => ["Â§6.5.2.3#1"]
      | MemberofNoMemberLvalue _ _ _ => ["Â§6.5.2.3#1"]
      | MemberofNoMemberRvalue _ _ => ["Â§6.5.2.3#1"]
      | MemberofptrReferenceBaseType _ _ => ["Â§6.5.2.3#2"]
      | MemberofptrReferenceTypeNotPointer _ => ["Â§6.5.2.3#2"]
      | MemberofptrNoMember _ _ _ => ["Â§6.5.2.3#2"]
      | InvalidTypeCompoundLiteral => ["Â§6.5.2.5#1"]
      | UnaryExpressionNotLvalue => ["Â§6.5.3.1#1"]
      | InvalidArgumentTypeUnaryIncrement _ => ["Â§6.5.3.1#1"]
      | InvalidArgumentTypeUnaryDecrement _ => ["Â§6.5.3.1#1"]
      | UnaryAddressNotRvalue _ => ["Â§6.5.3.2#1"]
      | UnaryAddressRegisterLvalue => ["Â§6.5.3.2#1"]
      | InvalidArgumentTypeUnaryExpression _ => ["Â§6.5.3.3#1"]
      | SizeofInvalidApplication _ => ["Â§6.5.3.4#1, sentence 1"]
      | AlignofInvalidApplication _ _ => ["Â§6.5.3.4#1, sentence 2"]
      | CastInvalidType _ _ => ["Â§6.5.4#2"] | CastPointerToFloat =>
      ["Â§6.5.4#4, sentence 1"] | CastFloatToPointer =>
      ["Â§6.5.4#4, sentence 2"] | IndirectionNotPointer => ["Â§6.5.3.2#2"]
      | ArithBinopOperandsType viol _ _ => std_of_arith_binop_violation viol
      | RelationalInvalidOperandsType _ _ => ["Â§6.5.8#2"]
      | EqualityInvalidOperandsType _ _ => ["Â§6.5.9#2"]
      | AndInvalidOperandsType _ _ => ["Â§6.5.13#2"]
      | OrInvalidOperandsType _ _ => ["Â§6.5.14#2"]
      | ConditionalOperatorControlType _ => ["Â§6.5.15#2"]
      | ConditionalOperatorInvalidOperandTypes _ _ => ["Â§6.5.15#3"]
      | AssignmentModifiableLvalue => ["Â§6.5.16#2"]
      | SimpleAssignmentViolation viol _ _ => std_of_assign_violation viol
      | CompoundAssignmentAddSubOperandTypes _ _ => ["Â§6.5.16.2#1"]
      | CompoundAssignmentOthersOperandTypes viol _ _ =>
      "Â§6.5.16.2#2" :: std_of_arith_binop_violation viol
      | IntegerConstantOutRange => ["Â§6.6#4"]
      | NoLinkageMultipleDeclaration _ => ["Â§6.7#3"]
      | TypedefRedefinition => ["Â§6.7#3, bullet 1"]
      | TypedefRedefinitionVariablyModifiedType =>
      ["Â§6.7#3, bullet 1, sentence 2"]
      | SameScopeIncompatibleDeclarations => ["Â§6.7#4"]
      | IllegalMultipleStorageClasses => ["Â§6.7.1#2"]
      | IllegalMultipleStorageClassesThreadLocal => ["Â§6.7.1#3, sentence 1"]
      | ThreadLocalShouldAppearInEveryDeclaration =>
      ["Â§6.7.1#3, sentence 2"] | ThreadLocalFunctionDeclaration =>
      ["Â§6.7.1#4"] | NoTypeSpecifierInDeclaration =>
      ["Â§6.7.2#2, sentence 2"] | IllegalTypeSpecifierInDeclaration =>
      ["Â§6.7.2#2"] | StructDeclarationLacksDeclaratorList => ["Â§6.7.2.1#2"]
      | StructMemberIncompleteType _ _ => ["Â§6.7.2.1#3, sentence 1"]
      | StructMemberFunctionType _ => ["Â§6.7.2.1#3, sentence 1"]
      | StructMemberFlexibleArray => ["Â§6.7.2.1#3, sentence 2"]
      | WrongTypeEnumConstant => ["Â§6.7.2.2#2"] | TagRedefinition _ =>
      ["Â§6.7.2.3#1"] | TagRedeclaration _ => ["Â§6.7.2.3#2"]
      | EnumTagIncomplete => ["Â§6.7.2.3#3"] | AtomicTypeConstraint =>
      ["Â§6.7.2.4#3"] | RestrictQualifiedTypeConstraint => ["Â§6.7.3#2"]
      | RestrictQualifiedPointedTypeConstraint _ => ["Â§6.7.3#2"]
      | ArrayDeclarationNegativeSize => ["Â§6.7.6.2#1, sentence 3"]
      | ArrayDeclarationIncompleteType => ["Â§6.7.6.2#1, sentence 4"]
      | ArrayDeclarationFunctionType => ["Â§6.7.6.2#1, sentence 4"]
      | ArrayDeclarationQsAndStaticOnlyOutmost => ["Â§6.7.6.2#1, sentence 5"]
      | ArrayDeclarationQsAndStaticOutsideFunctionProto =>
      ["Â§6.7.6.2#1, sentence 5"] | IllegalReturnTypeFunctionDeclarator =>
      ["Â§6.7.6.3#1"] | IllegalStorageClassFunctionDeclarator =>
      ["Â§6.7.6.3#2"] | IncompleteParameterTypeFunctionDeclarator =>
      ["Â§6.7.6.3#4"] | IllegalInitializer => ["Â§6.7.9#3"]
      | IllegalStorageClassStaticOrThreadInitializer => ["Â§6.7.9#4"]
      | IllegalLinkageAndInitialization => ["Â§6.7.9#5"]
      | IllegalTypeArrayDesignator => ["Â§6.7.9#6, sentence 1"]
      | IllegalSizeArrayDesignator => ["Â§6.7.9#6, sentence 2"]
      | InitializationAsSimpleAssignment viol _ _ =>
      "Â§6.7.9#11, sentence 2" :: std_of_assign_violation viol
      | StaticAssertFailed _ => ["Â§6.7.10#2"]
      | LabelStatementOutsideSwitch => ["Â§6.8.1#2"] | LabelRedefinition _ =>
      ["Â§6.8.1#3"] | IfStatementControllingExpressionNotScalar =>
      ["Â§6.8.4.1#1"] | SwitchStatementControllingExpressionNotInteger =>
      ["Â§6.8.4.2#1"] | IterationStatementControllingExpressionNotScalar =>
      ["Â§6.8.5#2"] | IllegalStorageClassIterationStatement => ["Â§6.8.5#3"]
      | ContinueOutsideLoop => ["Â§6.8.6.2#1"] | UndeclaredLabel _ =>
      ["Â§6.8.6.1#1, sentence 1"] | BreakOutsideSwtichOrLoop =>
      ["Â§6.8.6.3#1"] | NonVoidReturnVoidFunction =>
      ["Â§6.8.6.4#1, sentence 1"] | VoidReturnNonVoidFunction =>
      ["Â§6.8.6.4#1, sentence 2"] | ReturnAsSimpleAssignment viol _ _ =>
      (@ List.app _) ["Â§6.8.6.4#3, sentence 2"; "FOOTNOTE.160"]
        (std_of_assign_violation viol) | IllegalStorageClassFileScoped =>
      ["Â§6.9#2"] | ExternalRedefinition _ => ["Â§6.9#3"]
      | WrongTypeFunctionIdentifier => ["Â§6.9.1#2"]
      | IllegalStorageClassFunctionDefinition => ["Â§6.9.1#4"]
      | IllegalIdentifierTypeVoidInFunctionDefinition =>
      ["Â§6.9.1#5, sentence 1"] | UniqueVoidParameterInFunctionDefinition =>
      ["Â§6.9.1#5, sentence 2"]
      | FunctionParameterAsSimpleAssignment viol _ _ =>
      "Â§6.9.1#10" :: std_of_assign_violation viol
      | AssertMacroExpressionScalarType => ["Â§7.2.1.1#2"]
      | AtomicAddressArgumentMustBeAtomic op _ =>
      "Â§7.17.1#5" :: std_of_atomic_operation_synopsis op
      | AtomicAddressArgumentMustBePointer op _ =>
      std_of_atomic_operation_synopsis op end.
