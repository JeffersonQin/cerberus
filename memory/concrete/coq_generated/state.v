(* Generated by Lem from ocaml_generated/state.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.
Require Import utils.
Require Export utils.


Definition stateM  (a: Type) (s: Type) : Type :=  s ->  ((a * s) % type).
Definition stateM_default {a: Type} {s: Type} : stateM a s := (fun (x118 :  s) => (DAEMON, DAEMON)).
(* [?]: removed value specification. *)

Definition return1 {a s : Type}  (a1 : a)  : s -> (a*s) % type:=  fun (s1 : s) => (a1, s1).
(* [?]: removed value specification. *)

Definition bind2 {a b s : Type}  (m : s -> (a*s) % type) (f : a -> s -> (b*s) % type)  : s -> (b*s) % type:=  
  fun (s1 : s) => match ( m s1) with (a1,  s') => f a1 s' end.
(* [?]: removed value specification. *)

Definition runStateM {a st : Type}  (m : st -> (a*st) % type) (st1 : st)  : (a*st) % type:= 
  m st1.


Definition join {a b : Type}  (m : a -> ((a -> (b*a) % type)*a) % type)  : a -> (b*a) % type:=  bind2 m (fun (x : a -> (b*a) % type) => x).
(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition state_fmap {a b st : Type}  (f : a -> b) (m : st -> (a*st) % type)  : st -> (b*st) % type:=  bind2 m ( (fun (x : a)=>return1 (f x))).
(* [?]: removed value specification. *)

Definition app {a b s : Type}  (mf : s -> ((a -> b)*s) % type) (m : s -> (a*s) % type)  : s -> (b*s) % type:=  bind2 mf (fun (f : a -> b) => bind2 m ( (fun (x : a)=>return1 (f x)))).
(* [?]: removed value specification. *)

Definition update0 {a s : Type}  (f : s -> s)  : s -> (unit *s) % type:=  fun (s1 : s) => (tt, f s1).
(* [?]: removed value specification. *)

Definition modify {a s : Type}  (f : s -> (a*s) % type)  : s -> (a*s) % type:=  fun (s1 : s) => f s1.
(* [?]: removed value specification. *)

Definition read {a s : Type}  (f : s -> a)  : s -> (a*s) % type:=  fun (s1 : s) => (f s1, s1).
(* [?]: removed value specification. *)

Definition eval {a s : Type}  (m : s -> (a*s) % type) (st : s)  : a:=  (@ fst _ _) (m st).
(* [?]: removed top-level value definition. *)
(* [?]: removed top-level value definition. *)


Definition sequence0 {a b : Type}  (ms : list (b -> (a*b) % type))  : b -> (list a*b) % type:= 
  List.fold_right
    (fun (m : b -> (a*b) % type) (m' : b -> (list a*b) % type) =>  bind2
      m (fun (x : a)  => bind2
      m' (fun (xs : list a) =>
      return1 (x::xs)))
    ) (return1 []) ms.

Definition listM {a b c : Type}  (t3 : a -> list (b -> (c*b) % type)) (xs : a)  : b -> (list c*b) % type:=  sequence0 (t3 xs).
(* [?]: removed value specification. *)

Definition mapM0 {a b s : Type}  (f : a -> s -> (b*s) % type)  : list a -> s -> (list b*s) % type:=  listM (List.map f).
(* [?]: removed value specification. *)

Definition state_replicateM {a st : Type}  (n : nat ) (x : st -> (a*st) % type)  : st -> (list a*st) % type:=  sequence0 (replicate n x).

Definition sequence_ {a b : Type}  (ms : list (a -> (b*a) % type))  : a -> (unit *a) % type:=  List.fold_right (fun (m : a -> (b*a) % type) (f : a -> (unit *a) % type)=>bind2 m (fun ( _ : b) => f)) (return1 tt) ms.
(* [?]: removed value specification. *)

Definition mapM_ {a b s : Type}  (f : a -> s -> (b*s) % type) (_as : list a)  : s -> (unit *s) % type:=  sequence_ (List.map f _as).
(* [?]: removed value specification. *)

Program Fixpoint foldlM0 {a b s : Type}  (f : a -> b -> s -> (a*s) % type) (a1 : a)  : list b -> s -> (a*s) % type:=  
  fun (x : list b) =>
    match (x) with | [] => return1 a1 | x::xs =>
      bind2 (f a1 x) (fun (z : a) => foldlM0 f z xs) end.
(* [?]: removed value specification. *)

Definition get {s : Type}   : s -> (s*s) % type:= 
  fun (st : s) => (st, st).
(* [?]: removed value specification. *)

Definition put {s : Type}  (st : s)  : s -> (unit *s) % type:= 
  fun ( _ : s) => (tt, st).
(* [?]: removed top-level value definition. *)
(* [?]: removed top-level value definition. *)
