(* Generated by Lem from ocaml_generated/state_exception_undefined.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.

Require Import state.
Require Export state.
Require Import state_exception.
Require Export state_exception.
Require Import exception_undefined.
Require Export exception_undefined.
Require Import undefined.
Require Export undefined.



Definition stExceptUndefM  (a: Type) (bs: Type) (msg: Type) : Type :=  state_exception.stExceptM  (undefined.t0  a)  bs  msg.
Definition stExceptUndefM_default {a: Type} {bs: Type} {msg: Type} : stExceptUndefM a bs msg := DAEMON.
(* [?]: removed value specification. *)

Definition stExceptUndef_return {a b c : Type}  (z : a)  : b -> exception.exceptM ((undefined.t0 a*b) % type) c:= 
  state_exception.stExpect_return (undefined.return0 z).
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition stExceptUndef_bind {a b c d e : Type}  (m : e -> exception.exceptM ((undefined.t0 d*a) % type) c) (f : d -> a -> exception.exceptM ((undefined.t0 b*a) % type) c)  : e -> exception.exceptM ((undefined.t0 b*a) % type) c:=  fun (st : e) =>
  match ( m st) with 
    | exception.Result (undefined.Defined z,  st') =>
        f z st'
    | exception.Result (undefined.Undef loc ubs,  st') =>
        state_exception.stExpect_return (undefined.undef loc ubs) st'
    | exception.Result (undefined.Error loc str,  st') =>
        state_exception.stExpect_return (undefined.error loc str) st'
    | exception.Exception err =>
        (fun ( _ : e) => exception.fail0 err) st
  end.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition stExceptUndef_mapM {a b c d : Type}  (f : d -> state_exception.stExceptM (undefined.t0 a) b c) (xs : list d)  : b -> exception.exceptM ((undefined.t0 (list a)*b) % type) c:= 
  state_exception.stExpect_bind (state_exception.stExpect_mapM f xs)
    (fun (us : list (undefined.t0 a)) =>  apply state_exception.stExpect_return (undefined.mapM (fun (x : undefined.t0 a)=>x) us)).
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition runEU {a msg s : Type}  (m : exception.exceptM (undefined.t0 a) msg)  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:=  fun (st : s) =>
  match ( m) with 
    | exception.Result( undefined.Defined z) =>
        exception.Result (undefined.Defined z, st)
    | exception.Result( undefined.Undef loc ubs) =>
        exception.Result (undefined.Undef loc ubs, st)
    | exception.Result( undefined.Error loc str) =>
        exception.Result (undefined.Error loc str, st)
    | exception.Exception err =>
        exception.Exception err
  end.
(* [?]: removed value specification. *)

Definition runE {a msg s : Type}  (m : exception.exceptM a msg)  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:= 
  runEU (exception.except_bind m exception_undefined.exception_undef_return).
(* [?]: removed value specification. *)

Definition runS {a msg s : Type}  (m : s -> (a*s) % type)  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:=  
  fun (st : s) =>
    match ( m st) with (a1,  st') =>
      exception.except_return (undefined.return0 a1, st') end.
(* [?]: removed value specification. *)

Definition runSE {a msg s : Type}  (m : s -> exception.exceptM ((a*s) % type) msg)  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:= 
  state_exception.stExpect_bind m
    (fun (z : a) => state_exception.stExpect_return (undefined.return0 z)).
(* [?]: removed value specification. *)

Definition stExceptUndef_run {a b : Type}  (m : a -> b) (st : a)  : b:=  m st.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Program Fixpoint stExceptUndef_foldM {a b c d e : Type}  (f : a -> e -> c -> exception.exceptM ((undefined.t0 a*c) % type) b) (a1 : a)  : list e -> c -> exception.exceptM ((undefined.t0 a*c) % type) b:=  
  fun (x : list e) =>
    match (x) with | [] => stExceptUndef_return a1 | x::xs =>
      stExceptUndef_bind (f a1 x) (fun (z : a) => stExceptUndef_foldM f z xs)
    end.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Program Fixpoint filterM {a msg s : Type}  (pred : a -> s -> exception.exceptM ((undefined.t0 (bool )*s) % type) msg)  : list a -> s -> exception.exceptM ((undefined.t0 (list a)*s) % type) msg:=  
  fun (x : list a) =>
    match (x) with | [] => stExceptUndef_return [] |( x::xs) =>
      stExceptUndef_bind (pred x)
        (fun (b : bool ) =>
           stExceptUndef_bind (filterM pred xs)
             (fun (ys : list a) =>
                stExceptUndef_return (if b then x :: ys else ys) )) end.
(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition replicateM {a msg s : Type}  (n : nat ) (x : s -> exception.exceptM ((undefined.t0 a*s) % type) msg)  : s -> exception.exceptM ((undefined.t0 (list a)*s) % type) msg:= 
  let k  := (fun (m : s -> exception.exceptM ((undefined.t0 a*s) % type) msg) (m' : s -> exception.exceptM ((undefined.t0 (list a)*s) % type) msg) =>
    stExceptUndef_bind m (fun (x : a) =>
      stExceptUndef_bind m' (fun (xs : list a) =>
        stExceptUndef_return (x::xs)
      )
    )) in
  List.fold_right k (stExceptUndef_return []) (lem_list.replicate n x).
(* [?]: removed value specification. *)

Definition stExceptUndef_fail {a msg s : Type}  (err : msg)  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:= 
  runE (exception.fail0 err).
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition stExceptUndef_fmap {a b c d e : Type}  (f : a -> b) (m : d -> exception.exceptM ((undefined.t0 a*d) % type) c)  : d -> exception.exceptM ((undefined.t0 b*d) % type) c:= 
  stExceptUndef_bind m (fun (z : a) => stExceptUndef_return (f z)).
(* [?]: removed top-level value definition. *)


Module Operators.  
(* [?]: removed top-level value definition. *)
(* [?]: removed top-level value definition. *)
(* [?]: removed top-level value definition. *)
End Operators.

(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition stExceptUndef_undef {a msg s : Type}  (loc : unit ) (ubs : list (undefined.undefined_behaviour ))  : s -> exception.exceptM ((undefined.t0 a*s) % type) msg:= 
  state_exception.stExpect_return (undefined.undef loc ubs).
(* [?]: removed top-level value definition. *)
