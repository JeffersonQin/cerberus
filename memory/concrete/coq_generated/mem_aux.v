(* Generated by Lem from ocaml_generated/mem_aux.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.
Require Import utils.
Require Export utils.
Require Import mem.
Require Export mem.

Require Import ctype.
Require Export ctype.

(* [?]: removed value specification. *)

Definition integerFromIntegerValue  (ival : unit )  : option (Z ) := 
  DAEMON ival.
(* [?]: removed value specification. *)

Definition integerValueFromMemValue  (mval : unit )  : option ((ctype.integerType *unit ) % type) :=  
  match ( debug.print_debug ( 1) []
            (fun (u : unit ) =>
               match ( (u) ) with ( tt) =>
                 String.append "integerValueFromMemValue ==> " (BOOM mval)
               end )) with tt =>
    DAEMON mval (fun ( _ : ctype.ctype ) => None)
      (fun ( _ : ctype.integerType ) ( _ : symbol.sym ) => None)
      (fun (ity : ctype.integerType ) (ival : unit ) => Some (ity, ival))
      (fun ( _ : ctype.floatingType ) ( _ : unit ) => None)
      (fun ( _ : ctype.ctype ) ( _ : unit ) => None)
      (fun ( _ : list (unit )) => None)
      (fun ( _ : symbol.sym ) ( _ : list ((symbol.identifier *ctype.ctype *unit ) % type)) =>
         None)
      (fun ( _ : symbol.sym ) ( _ : symbol.identifier ) ( _ : unit ) => None)
  end.
(* [?]: removed value specification. *)

Definition unspecifiedFromMemValue  (mval : unit )  : option (ctype.ctype ) := 
  DAEMON mval
    (fun (ty : ctype.ctype ) => Some ty)
    (fun ( _ : ctype.integerType ) ( _ : symbol.sym ) => None)
    (fun ( _ : ctype.integerType ) ( _ : unit ) => None)
    (fun ( _ : ctype.floatingType ) ( _ : unit ) => None)
    (fun ( _ : ctype.ctype ) ( _ : unit ) => None)
    (fun ( _ : list (unit )) => None)
    (fun ( _ : symbol.sym ) ( _ : list ((symbol.identifier *ctype.ctype *unit ) % type)) => None)
    (fun ( _ : symbol.sym ) ( _ : symbol.identifier ) ( _ : unit ) => None).
(* [?]: removed value specification. *)

Definition isUnspecifiedMemValue  (mval : unit )  : bool := 
  match ( unspecifiedFromMemValue mval) with 
    | Some _ => true
    | None => false
  end.
(* [?]: removed value specification. *)

Definition pointerValueFromMemValue  (mem_val : unit )  : option ((ctype.ctype *unit ) % type) :=  
  match ( debug.print_debug ( 1) []
            (fun (u : unit ) =>
               match ( (u) ) with ( tt) =>
                 String.append "pointerValueFromMemValue ==> " (BOOM mem_val)
               end )) with tt =>
    DAEMON mem_val (fun ( _ : ctype.ctype ) => None)
      (fun ( _ : ctype.integerType ) ( _ : symbol.sym ) => None)
      (fun ( _ : ctype.integerType ) ( _ : unit ) => None)
      (fun ( _ : ctype.floatingType ) ( _ : unit ) => None)
      (fun (ref_ty : ctype.ctype ) (ptr_val : unit ) =>
         Some (ref_ty, ptr_val)) (fun ( _ : list (unit )) => None)
      (fun ( _ : symbol.sym ) ( _ : list ((symbol.identifier *ctype.ctype *unit ) % type)) =>
         None)
      (fun ( _ : symbol.sym ) ( _ : symbol.identifier ) ( _ : unit ) => None)
  end.
(* [?]: removed value specification. *)

Definition integer_mval  (ity : ctype.integerType ) (n : Z )  : unit := 
  DAEMON ity (DAEMON n).
