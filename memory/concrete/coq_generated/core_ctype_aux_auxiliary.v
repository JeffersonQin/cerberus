(* Generated by Lem from ocaml_generated/core_ctype_aux.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.




(*
val tags_are_compatible: Symbol.sym -> Symbol.sym -> bool
let tags_are_compatible tag_sym1 tag_sym2 =
  let members_are_compatibles xs1 xs2 =
    if List.length xs1 <> List.length xs2 then
      false
    else
      List.all (fun ((ident1, ty1), (ident2, ty2)) ->
        ident1 = ident2 && 
      ) (List.combine xs1)
  
  if from_same_translation_unit tag_sym1 tag_sym2 then
    tag_sym1 = tag_sym2
  else
    (* TODO: temporary hack *)
    let Symbol.Symbol _ _ str_opt1 = tag_sym1 in
    let Symbol.Symbol _ _ str_opt2 = tag_sym2 in
    if str_opt1 = str_opt2 then
      match (get_membersDefs tag_sym1, get_membersDefs tag_sym2) with
        | (StructDef xs1, StructDef xs2) ->
            members_are_compatibles xs1 x2
        | (UnionDef xs1, UnionDef xs2) ->
            members_are_compatibles xs1 xs2
        | _ ->
            false
      end
    else
      false
*)

(*
  | StructDef of list (Cabs.cabs_identifier * ctype)
  | UnionDef of list (Cabs.cabs_identifier * ctype)
*)
