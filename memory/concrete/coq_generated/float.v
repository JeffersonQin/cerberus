(* Generated by Lem from ocaml_generated/float.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_bool.
Require Export lem_bool.
Require Import lem_basic_classes.
Require Export lem_basic_classes.
Require Import lem_num.
Require Export lem_num.

(* 

Inductive float : Type := .
Definition float_default: float  := DAEMON. *)
(* [?]: removed value specification. *)


Instance x55_Eq : Eq float := {
   isEqual  :=  (fun x y => x = y);
   isInequal   x  y :=  negb (x = y)
}.

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)

Instance x54_Ord : Ord float := {
   compare  :=  (fun  x  y=>EQ);
   isLess  :=  ltb%float_scope;
   isLessEqual  :=  leb%float_scope;
   isGreater   x  y :=  negb (leb%float_scope x y);
   isGreaterEqual   x  y :=  negb (ltb%float_scope x y)
}.

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)


Instance x53_NumAdd : NumAdd float := {
   numAdd  :=  add%float_scope
}.


Instance x52_NumMinus : NumMinus float := {
   numMinus  :=  sub%float_scope
}.


Instance x51_NumMult : NumMult float := {
   numMult  :=  mul%float_scope
}.


Instance x50_NumDivision : NumDivision float := {
   numDivision  :=  div%float_scope
}.

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition of_integer  (x : Z )  : float :=  BOOM ( x).
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition to_integer  (x : float )  : Z :=   (BOOM x).
