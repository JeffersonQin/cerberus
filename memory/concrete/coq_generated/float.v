(* Generated by Lem from ocaml_generated/float.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_bool.
Require Export lem_bool.
Require Import lem_basic_classes.
Require Export lem_basic_classes.
Require Import lem_num.
Require Export lem_num.

(* 

(* open import {coq} `Coq.Floats.Floats` *)

Inductive float : Type := .
Definition float_default: float  := DAEMON. *)
(* [?]: removed value specification. *)

(* declare coq   target_rep function floatEq = infix `=` *)
Definition floatEq   : unit   -> unit   -> bool :=  classical_boolean_equivalence.

Instance x36_Eq : Eq unit  := {
   isEqual  :=  floatEq;
   isInequal   x  y :=  negb (floatEq x y)
}.

(* [?]: removed value specification. *)

(* declare coq   target_rep function floatLt = `ltb%float_scope` *)
Definition floatLt  ( _ : unit  ) ( _ : unit  )  : bool :=  false.
(* [?]: removed value specification. *)

(* declare coq   target_rep function floatLe = `leb%float_scope` *)
Definition floatLe  ( _ : unit  ) ( _ : unit  )  : bool :=  true.
(* [?]: removed value specification. *)

(* [?]: removed top-level value definition. *)

Instance x35_Ord : Ord unit  := {
   compare  :=  (fun  x  y=>EQ);
   isLess  :=  floatLt;
   isLessEqual  :=  floatLe;
   isGreater   x  y :=  negb (floatLe x y);
   isGreaterEqual   x  y :=  negb (floatLt x y)
}.

(* [?]: removed value specification. *)

(* declare coq   target_rep function floatAdd = `add%float_scope` *)
Definition floatAdd  (a : unit  ) ( _ : unit  )  : unit  :=  a.
(* [?]: removed value specification. *)

(* declare coq   target_rep function floatSub = `sub%float_scope` *)
Definition floatSub  (a : unit  ) ( _ : unit  )  : unit  :=  a.
(* [?]: removed value specification. *)

(* declare coq   target_rep function floatMul = `mul%float_scope` *)
Definition floatMul  (a : unit  ) ( _ : unit  )  : unit  :=  a.
(* [?]: removed value specification. *)

(* declare coq   target_rep function floatDiv = `div%float_scope` *)
Definition floatDiv  (a : unit  ) ( _ : unit  )  : unit  :=  a.

Instance x34_NumAdd : NumAdd unit  := {
   numAdd  :=  floatAdd
}.


Instance x33_NumMinus : NumMinus unit  := {
   numMinus  :=  floatSub
}.


Instance x32_NumMult : NumMult unit  := {
   numMult  :=  floatMul
}.


Instance x31_NumDivision : NumDivision unit  := {
   numDivision  :=  floatDiv
}.

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition of_integer  (x : Z )  : unit  :=  tt.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

Definition to_int  ( _ : unit  )  : Z := Coq.ZArith.BinIntDef.Z.of_nat 0.
(* [?]: removed value specification. *)

Definition to_integer  (x : unit  )  : Z :=   (to_int x).
