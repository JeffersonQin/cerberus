(* Generated by Lem from ocaml_generated/exception_undefined.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.

Require Import exception.
Require Export exception.
Require Import undefined.
Require Export undefined.


Definition t1  (a: Type) (msg: Type) : Type :=  exception.exceptM  (undefined.t0  a)  msg.
Definition t1_default {a: Type} {msg: Type} : t1 a msg := DAEMON.
(* [?]: removed value specification. *)

Definition exception_undef_return {a b : Type}  (z : a)  : exception.exceptM (undefined.t0 a) b:= 
  exception.except_return (undefined.return0 z).
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition exception_undef_bind {a b c : Type}  (m : exception.exceptM (undefined.t0 c) b) (f : c -> exception.exceptM (undefined.t0 a) b)  : exception.exceptM (undefined.t0 a) b:= 
  match ( m) with 
    | exception.Result( undefined.Defined z) =>
        f z
    | exception.Result( undefined.Undef loc ubs) =>
        exception.except_return (undefined.undef loc ubs)
    | exception.Result( undefined.Error loc str) =>
        exception.except_return (undefined.error loc str)
    | exception.Exception err =>
        exception.fail0 err
  end.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition exception_undef_fail {a b : Type}  (err : a)  : exception.exceptM b a:=  exception.fail0 err.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition exception_undef_mapM {a b c : Type}  (f : c -> exception.exceptM (undefined.t0 a) b) (xs : list c)  : exception.exceptM (undefined.t0 (list a)) b:= 
  exception.except_bind (List.fold_right
    (fun (m : exception.exceptM (undefined.t0 a) b) (ms' : exception.exceptM (list (undefined.t0 a)) b) =>   exception.except_bind
      m (fun (x : undefined.t0 a)  => exception.except_bind
      ms' (fun (xs : list (undefined.t0 a)) =>
      exception.except_return (x::xs)))
    ) (exception.except_return []) ((List.map f) xs))
    (fun (us : list (undefined.t0 a)) =>  apply exception.except_return (undefined.mapM (fun (x : undefined.t0 a)=>x) us)).
(* [?]: removed top-level value definition. *)


Module Operators.  
(* [?]: removed top-level value definition. *)
(* [?]: removed top-level value definition. *)
End Operators.



Require Import operators.
Require Export operators.

(* [?]: removed value specification. *)

Definition exception_undef_sequence {a b c d : Type}  (ms : list (exception.exceptM (undefined.t0 a) b))  : exception.exceptM (undefined.t0 (list a)) b:= 
  List.fold_right
    (fun (m : exception.exceptM (undefined.t0 a) b) (ms' : exception.exceptM (undefined.t0 (list a)) b) =>   exception_undef_bind
      m (fun (x : a)  => exception_undef_bind
      ms' (fun (xs : list a) =>
      exception_undef_return (x::xs)))
    ) (exception_undef_return []) ms.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)
 (* GENERIC Monad *)
Program Fixpoint exception_undef_foldM {a b c d : Type}  (f : a -> d -> exception.exceptM (undefined.t0 a) b) (a1 : a)  : list d -> exception.exceptM (undefined.t0 a) b:=  
  fun (x : list d) =>
    match (x) with (* GENERIC Monad *) | [] =>
      (* GENERIC Monad *) exception_undef_return a1 (* GENERIC Monad *)
      | x::xs =>
      exception_undef_bind ( (* GENERIC Monad *) f a1 x)
        (fun (fax : a) => exception_undef_foldM f fax xs) (* GENERIC Monad *)
    end.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Program Fixpoint exception_undef_foldrM {a b c d : Type}  (f : d -> a -> t1 a b) (a1 : a) (l : list d)  : exception.exceptM (undefined.t0 a) b:= 
  match ( l) with 
    | [] => exception_undef_return a1
    | x::xs => exception_undef_bind (exception_undef_foldrM f a1 xs) (f x)
  end.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition exception_undef_fmap {a b c d : Type}  (f : a -> b) (m : exception.exceptM (undefined.t0 a) c)  : exception.exceptM (undefined.t0 b) c:=  exception_undef_bind m (fun (z : a) =>  apply exception_undef_return (f z)).
(* [?]: removed top-level value definition. *)
