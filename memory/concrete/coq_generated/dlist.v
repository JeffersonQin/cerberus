(* Generated by Lem from ocaml_generated/dlist.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

(* Difference lists *)
Require Import lem_list.
Require Export lem_list.
Require Import lem_function.
Require Export lem_function.


Inductive dlist (a : Type) : Type := 
  Dlist:  (list  a ->  list  a) -> dlist a.
Definition dlist_default{a: Type} : dlist a := Dlist (fun (x73 : list  a) => DAEMON).
(* [?]: removed value specification. *)

Definition nil0 {a : Type}   : dlist a:= 
  Dlist (fun (x : list a)=>x).
(* [?]: removed value specification. *)

Definition singleton {a : Type}  (x : a)  : dlist a:= 
  Dlist (fun (xs : list a) => x :: xs).
(* [?]: removed value specification. *)

Definition append {a : Type}  (d : dlist a) (d0 : dlist a)  : dlist a:= 
  match ( (d,d0)) with (( Dlist xs), ( Dlist ys)) =>
    Dlist (fun (zs : list a) => ys (xs zs)) end.
(* [?]: removed value specification. *)

Definition cons0 {a : Type}  (x : a) (d : dlist a)  : dlist a:= 
  match ( (x,d)) with ( x, ( Dlist ys)) =>
    Dlist (fun (zs : list a) => ys (x :: zs)) end.
(* [?]: removed value specification. *)

Definition dlist_fromList {a : Type}  (xs : list a)  : dlist a:= 
  List.fold_left (fun (acc : dlist a) (x : a) => cons0 x acc) xs nil0.
(* [?]: removed top-level value definition. *)
(* [?]: removed value specification. *)

Definition toList {a : Type}  (d : dlist a)  : list a:= 
  match ( (d)) with (( Dlist xs)) => xs [] end.
