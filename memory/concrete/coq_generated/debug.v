(* Generated by Lem from ocaml_generated/debug.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import loc.
Require Export loc.


Inductive domain : Type := 
  | DB_clexer: domain 
  | DB_cparser: domain 
  | DB_desugaring: domain 
  | DB_ail_typing: domain 
  | DB_elaboration: domain 
  | DB_core_typing: domain 
  | DB_core_dynamics: domain 
  | DB_driver: domain 
  | DB_concurrency: domain 
  | DB_driver_step: domain 
  | DB_memory: domain .
Definition domain_default: domain  := DB_clexer.
(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)

(* [?]: removed value specification. *)



(*
open import Pervasives 
import Boot

let _DEBUG level f k =
  if level <= Boot.debug_level then
    f k
  else
    k


(* Used in [core_run.lem], print the collected continuation in a Core program *)
let print_cont_map cont_map k =
  Boot.print_debug "TODO[newLem]" k
(*
  (  "COLLECTED CONTINUATIONS:\n" ^
  (List.fold_left (fun acc (f, ks) ->
    "In function `" ^ Boot.pp_core_expr (Core.Esym f) ^ "': [" ^
      (List.fold_left (fun acc k -> Boot.pp_core_expr (Core.Esym k) ^ ", " ^ acc) "" (List.map fst $ Pmap.bindings ks)) ^ "]\n" ^ acc
   ) "" $ Pmap.bindings cont_map))
  k
*)

*)


(* val debug: forall 'a. string -> 'a *)

