(* Generated by Lem from ocaml_generated/cmm_op.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.


LemmaconsistencyFromTrace_def_lemma:((foralltrace wit pre rel0,(Bool.eqb ((list_equal_by ((fun (left : (string *set ((action *action ) % type)) % type) (right : (string *set ((action *action ) % type)) % type)=>(tuple_equal_by (fun (left : string ) (right : string )=>(string_equal left right)) (set_equal_by (pairCompare (fun (x : action ) (y : action )=>(genericCompare nat_ltb beq_nat (aid_of x) (aid_of y))) (fun (x : action ) (y : action )=>(genericCompare nat_ltb beq_nat (aid_of x) (aid_of y))))) left right)))
  rel0 (standard_relations pre wit)) &&
  (exists s,( 
  trace pre (incInitialState pre) s &&
  (( classical_boolean_equivalence(incWit  s) wit) &&
  ( (set_equal_by (fun (x : action ) (y : action )=>(genericCompare nat_ltb beq_nat (aid_of x) (aid_of y)))(set_from_list_by (fun (x : action ) (y : action )=>(genericCompare nat_ltb beq_nat (aid_of x) (aid_of y)))(incCommitted  s))(actions  pre)))) : Prop))) 
  (BOOM trace (pre, wit, rel0)) : Prop)): Prop) .
