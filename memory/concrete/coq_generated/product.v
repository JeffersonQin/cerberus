(* Generated by Lem from ocaml_generated/product.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.


Definition make {a b : Type}  (x : a) (y : b)  : (a*b) % type:=  (x, y).
Definition app_right {a b c : Type}  (f : b -> c) (p : (a*b) % type)  : (a*c) % type:= 
  match ( (f,p)) with ( f,  (x,  y)) => ( x, f y) end.
Definition app_left {a b c : Type}  (f : a -> b) (p : (a*c) % type)  : (b*c) % type:= 
  match ( (f,p)) with ( f,  (x,  y)) => (f x, y) end.

(* TODO[newLem] use the Ord typeclass *)
Definition prod_compare {a b c d : Type}  (compare_left : d -> c -> ordering ) (compare_right : b -> a -> ordering ) (p : (d*b) % type) (p0 : (c*a) % type)  : ordering := 
  match ( (compare_left,compare_right,p,p0)) with
      ( compare_left,  compare_right,  (x1,  y1),  (x2,  y2)) =>
    let ord := compare_left x1 x2 in
  if (ordering_equal ord EQ) then compare_right y1 y2 else ord end.
(* [?]: removed top-level value definition. *)
