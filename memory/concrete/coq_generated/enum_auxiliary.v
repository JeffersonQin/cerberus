(* Generated by Lem from ocaml_generated/enum.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Open Scope nat_scope.
Open Scope string_scope.



(* class ( Enum 'a ) 
 *   val toEnum:   nat -> 'a
 *   val fromEnum: 'a -> nat
 * (\*  val succ: 'a -> 'a *\)
 * end
 * 
 * 
 * instance (Enum nat)
 *   let toEnum   = id
 *   let fromEnum = id
 * (\*  let succ n   = n + 1 *\)
 * end
 * 
 * (\* instance (Enum natural)
 *  *   let toEnum   = naturalFromNat
 *  *   let fromEnum = natFromNatural
 *  * (\\*  let succ n   = n + 1 *\\)
 *  * end *\)
 * 
 * 
 * 
 * val     enumFromTo: forall 'a. NumSucc 'a, Enum 'a => 'a -> 'a -> list 'a
 * let rec enumFromTo n m =
 *   if fromEnum n > fromEnum m then
 *     []
 *   else
 *     n :: enumFromTo (succ n) m *)
