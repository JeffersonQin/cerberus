(* Generated by Lem from ocaml_generated/bimap.lem. *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import String.
Require Import Program.Wf.

Require Import coqharness.

Open Scope nat_scope.
Open Scope string_scope.

Require Import lem_pervasives.
Require Export lem_pervasives.


Inductive bimap (a : Type) (b : Type) : Type := 
  Bimap:  fmap  a  b ->  fmap  b  a -> bimap a b.
Definition bimap_default {a: Type} {b: Type} : bimap a b := Bimap DAEMON DAEMON.
(* [?]: removed value specification. *)

Definition lookupL {a b : Type} `{MapKeyType a} `{MapKeyType b}  (a1 : a) (b1 : bimap a b)  : option b := 
  match ( (a1,b1)) with ( a1, ( Bimap mapa _)) =>
    (fmap_lookup_by mapKeyCompare a1 mapa) end.
(* [?]: removed value specification. *)

Definition lookupR {a b : Type} `{MapKeyType a} `{MapKeyType b}  (b2 : b) (b0 : bimap a b)  : option a := 
  match ( (b2,b0)) with ( b1, ( Bimap _ mapb)) =>
    (fmap_lookup_by mapKeyCompare b1 mapb) end.
(* [?]: removed value specification. *)

Program Fixpoint fromList_aux {a b : Type} `{MapKeyType a} `{MapKeyType b}  (b1 : bimap a b) (xs : list ((a*b) % type))  : bimap a b:= 
  match ( (b1,xs)) with ( Bimap mapa mapb as acc,  xs) =>
    match ( xs) with | [] => acc | (a1,  b1) :: xs =>
      fromList_aux (Bimap (fmap_add a1 b1 mapa) (fmap_add b1 a1 mapb)) xs end
  end.

Definition fromList0 {a b : Type} `{MapKeyType a} `{MapKeyType b}   : list ((a*b) % type) -> bimap a b:= 
  fromList_aux (Bimap fmap_empty fmap_empty).
