{- SB+Wsc_Rsc+Wsc_Rsc Store Buffering (or Dekker's), with sequential
   consistent atomics. The reads cannot both see 0 in the same
   execution. This contrasts with SB with release/acquire pairs where
   the reads can both see 0. An exhaustive execution of this program
   should return the values 1, 2, 3.  -}

proc main () : eff integer :=
  let strong x : pointer  = create (Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong _ : unit     = store (!(_Atomic(signed int)), x, Specified(0)) in
  let strong y : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong _ : unit    = store(!(_Atomic(signed int)), y, Specified(0)) in
  let strong (_a1 : loaded integer, _a2 : loaded integer) = par(
    let strong _ : unit = store(!(_Atomic(signed int)), y, Specified(1), seq_cst) in
    load(!(_Atomic(signed int)), x, seq_cst)
  ,
   let strong _ : unit = store(!(_Atomic(signed int)), x, Specified(1), seq_cst) in
   load(!(_Atomic(signed int)), y, seq_cst)
  ) in
  let strong _ : unit = kill(x) in
  let strong _ : unit = kill(y) in
  case (_a1, _a2) of
    | (Specified (a1: integer), Specified (a2: integer)) =>
        pure (a1 + 2*a2)
  end
