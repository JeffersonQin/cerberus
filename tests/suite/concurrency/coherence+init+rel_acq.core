{- The coherence axioms CoWW and CoWR forbid that the load reads from
   the first write.  The only allowed outcome is therefore 1. The
   diference with the test coherence+rel_rel_acq is that a thread is
   created between the first and second write, and the test will only
   succeed if the operational semantics creates the correct asw edges.
   -}

proc main () : eff loaded integer :=
  let strong x : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong _ : unit    = store(!(_Atomic(signed int)), x, Specified(0), release) in
  let strong (a : loaded integer, _ : unit) = par(
    let strong _ : unit = store(!(_Atomic(signed int)), x, Specified(1), release) in
    load(!(_Atomic(signed int)), x, acquire)
  ,
    pure(Unit)
  ) in
  let strong _ : unit = kill(x) in
  pure(a)

