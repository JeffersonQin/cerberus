{- The loads are allowed to both read 0, which means there is a cycle
   in mo union hb.  The total set of allowed outcomes is 0, 1, 2, 3.
   -}

proc main () : eff integer :=
  let strong x : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong y : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong (_a1 : loaded integer, _a2 : loaded integer) = par(
    let strong _ : unit = store(!(_Atomic(signed int)), x, Specified(0), release) in
    let strong _ : unit = store(!(_Atomic(signed int)), y, Specified(1), release) in
    load(!(_Atomic(signed int)), y, acquire)
  ,
    let strong _ : unit = store(!(_Atomic(signed int)), y, Specified(0), release) in
    let strong _ : unit = store(!(_Atomic(signed int)), x, Specified(1), release) in
    load(!(_Atomic(signed int)), x, acquire)
  ) in
  let strong _ : unit = kill(x) in
  let strong _ : unit = kill(y) in
  case (_a1, _a2) of
    | (Specified(a1: integer), Specified(a2: integer)) =>
        pure(a1 + (2 * a2))
  end
