{- The strong compare_exchange will always succeed if the compared
values are equal. Hence, the value of x will be 1 at the end of the
execution and the value of y still 0. An exhaustive execution will
therefore only return 5. -}

{-
fun main () : [integer] :=
  x <- create(_Atomic(signed int));
  y <- create(signed int);
  store(_Atomic(signed int), x, 0);
  store(signed int, y, 0);
  success <- compare_exchange_strong(signed int, x, y, 1, seq_cst, seq_cst);
  a <- load(_Atomic(signed int), x);
  b <- load(signed int, y);
  ret a + 2 * b + 4 * success
-}
proc main () : eff integer :=
  let strong x : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong y : pointer = create(Ivalignof(!(signed int)), !(signed int)) in
  let strong _ : unit    = store(!(_Atomic(signed int)), x, Specified(0)) in
  let strong _ : unit    = store(!(signed int), y, Specified(0)) in
  let strong _success : loaded integer = compare_exchange_strong(!(signed int), x, y, 1, seq_cst, seq_cst) in
  let strong _a : loaded integer       = load(!(_Atomic(signed int)), x) in
  let strong _b : loaded integer       = load(!(signed int), y) in
  case (_success, _a, _b) of
    | (Specified (success: integer), Specified (a: integer), Specified (b: integer)) =>
        pure(a + 2 * b + 4 * success)
  end