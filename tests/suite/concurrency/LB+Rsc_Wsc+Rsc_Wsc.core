{- LB+Rsc_Wsc+Rsc_Wsc Load Buffering, with sequential consistent
   atomics the values of a1 and a2 cannot both be 1. An exhaustive
   execution of this program should therefore return the values 0, 1
   and 2.  -}

proc main () : eff integer :=
  let strong x : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong _ : unit    = store(!(_Atomic(signed int)), x, Specified(0)) in
  let strong y : pointer = create(Ivalignof(!(_Atomic(signed int))), !(_Atomic(signed int))) in
  let strong _ : unit    = store(!(_Atomic(signed int)), y, Specified(0)) in
  let strong (_a1 : loaded integer, _a2 : loaded integer) = par(
    let strong v : loaded integer = load(!(_Atomic(signed int)), x, seq_cst) in
    let strong _ : unit           = store(!(_Atomic(signed int)), y, Specified(1), seq_cst) in
    pure(v)
  ,
    let strong v : loaded integer = load(!(_Atomic(signed int)), y, seq_cst) in
    let strong _ : unit           = store(!(_Atomic(signed int)), x, Specified(1), seq_cst) in
    pure(v)
  ) in
  let strong _ : unit = kill(x) in
  let strong _ : unit = kill(y) in
  case (_a1, _a2) of
    | (Specified (a1 : integer), Specified (a2 : integer)) =>
        pure(a1 + (2 * a2))
  end
