{- The weak compare_exchange will always fail if the compared values
are not equal. Hence, the value of x will still be 0 at the end of the
execution and the value of y will be 0. An exhaustive execution will
therefore only return 0. -}

{-
fun main () : [integer] :=
  x <- create(_Atomic(signed int));
  y <- create(signed int);
  store(_Atomic(signed int), x, 0);
  store(signed int, y, 1);
  success <- compare_exchange_weak(signed int, x, y, 2, seq_cst, seq_cst);
  a <- load(_Atomic(signed int), x);
  b <- load(signed int, y);
  ret a + 3 * b + 9 * success
-}
fun main () : [integer] :=
  let strong x = create(<alignof>("_Atomic(signed int)"), "_Atomic(signed int)") in
  let strong y = create(<alignof>("signed int"), "signed int") in
  let strong _ = store("_Atomic(signed int)", x, 0) in
  let strong _ = store("signed int", y, 1) in
  let strong success = compare_exchange_weak("signed int", x, y, 2, seq_cst, seq_cst) in
  let strong a = load("_Atomic(signed int)", x) in
  let strong b = load("signed int", y) in
  return(a + 3 * b + 9 * success)
  end end end end end end end
