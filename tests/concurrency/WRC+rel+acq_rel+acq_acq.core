{- If the final load of x is executed, it is required to see 1. An
exhaustive execution of this program should therefore only return 1
and 2. -}

fun main () : [integer] :=
  let strong x = create(<alignof>("_Atomic(signed int)"), "_Atomic(signed int)") in
  let strong y = create(<alignof>("_Atomic(signed int)"), "_Atomic(signed int)") in
  let strong _ = store("_Atomic(signed int)", x, 0) in
  let strong _ = store("_Atomic(signed int)", y, 0) in
  let strong (_, _, a3) = par(
    let strong _ = store("_Atomic(signed int)", x, 1, release) in
    return (unit)
    end
  ,
    let strong a1 = load("_Atomic(signed int)", x, acquire) in
    let strong _ =
      if a1 = 1 then
        store("_Atomic(signed int)", y, 1, release)
      else
        skip
      end in
    return (unit)
    end end
  ,
    let strong a2 = load("_Atomic(signed int)", y, acquire) in
    let strong ret =
      if a2 = 1 then
        load("_Atomic(signed int)", x, acquire)
      else
        2
      end in
    return(ret)
    end end
  ) in
  let strong _ = kill(x) in
  let strong _ = kill(y) in
  return(a3)
  end end end end end end end
