{- SB+rel_acq+rel_acq Store Buffering (or Dekker's), with
   release-acquire pairs The reads can both see 0 in the same
   execution.  An exhaustive execution of this program should
   therefore return the values 0, 1, 2, 3.  -}

{-
fun main () : [integer] :=
  x <- create(_Atomic(signed int));
  store(_Atomic(signed int), x, 0);
  y <- create(_Atomic(signed int));
  store(_Atomic(signed int), y, 0);
  (a1, a2) <- {{{
       store(_Atomic(signed int), y, 1, release);
       load(_Atomic(signed int), x, acquire)
  |||
       store(_Atomic(signed int), x, 1, release);
       load(_Atomic(signed int), y, acquire)
  }}};
  kill(x);
  kill(y);
  ret a1 + (2 * a2)
-}
proc main () : eff integer :=
  let strong x = create(<alignof>("_Atomic(signed int)"), "_Atomic(signed int)") in
  let strong _ = store("_Atomic(signed int)", x, 0) in
  let strong y = create(<alignof>("_Atomic(signed int)"), "_Atomic(signed int)") in
  let strong _ = store("_Atomic(signed int)", y, 0) in
  let strong (a1, a2) = par(
    let strong _ = store("_Atomic(signed int)", y, 1, release) in
    let strong ret = load("_Atomic(signed int)", x, acquire) in
    return(ret)
    end end 
  ,
    let strong _ = store("_Atomic(signed int)", x, 1, release) in
    let strong ret = load("_Atomic(signed int)", y, acquire) in
    return(ret)
    end end 
  ) in
  let strong _ = kill(x) in
  let strong _ = kill(y) in
  return(a1 + (2 * a2))
  end end end end end end end
