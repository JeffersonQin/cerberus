(* Created by Victor Gomes 2017-04-30 *)

open Cerb_pp_prelude
open Pp_ocaml

let std_filename = "coreStd.ml"

let print_head filename =
  !^"(* Generated by Cerberus *)" ^//^
  !^"module RT = Rt_ocaml" ^/^
  !^"module M = Impl_mem" ^/^
  !^"module T = AilTypes" ^/^
  !^"module C = Core_ctype" ^/^
  !^"module N = Nat_big_num" ^/^
  !^"module B = Ocaml_builtins" ^//^
  !^"let (>>=) = M.bind" ^//^
  !^"let rec id = fun x -> x"

let gen stdlib impl =
  let contents =
    print_head std_filename ^^
    print_impls [] impl ^^
    print_funs [] stdlib ~init:false
  in
  let oc = open_out std_filename in
  P.ToChannel.pretty 1. 80 oc contents;
  close_out oc

let gen_standalone dummy_core =
  let open Cps_core in
  let open Core_opt in
  let opt_passes core =
    elim_wseq core
    |> assoc_seq
    |> elim_skip
    |> elim_let
  in
  let cps_core = elim_proc_decls dummy_core
    |> run opt_passes
    |> cps_transform []
  in
  gen cps_core.stdlib cps_core.impl
